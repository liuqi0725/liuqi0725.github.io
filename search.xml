<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CentOS-7 安装 Docker</title>
    <url>/post/841b6107.html</url>
    <content><![CDATA[<p>微服务现在已经是趋势，不管大型，中型，小型应用，都可以进行拆分，达到应用松耦合，可复用的目的。说到微服务，就要提到 Docker。介绍下 Docker 在 centos-7 上安装的步骤</p>
<span id="more"></span>


<h2 id="删除已存在的-docker-版本"><a href="#删除已存在的-docker-版本" class="headerlink" title="删除已存在的 docker 版本"></a>删除已存在的 docker 版本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure>

<p>删除 <code>/var/lib/docker</code> 目录下的图片，资源等</p>
<h2 id="安装-docker"><a href="#安装-docker" class="headerlink" title="安装 docker"></a>安装 docker</h2><p>安装方式</p>
<ol>
<li>大多数用户设置了Docker的存储库并从它们进行安装，以方便安装和升级任务。这是推荐的方法。</li>
<li>一些用户下载RPM包并手动安装，并完全手动管理升级。这在一些情况下非常有用，比如在没有访问internet的被隔离的系统上安装Docker。</li>
<li>在测试和开发环境中，一些用户选择使用自动化的方便脚本来安装Docker。</li>
</ol>
<h2 id="使用-repository-安装（推荐）"><a href="#使用-repository-安装（推荐）" class="headerlink" title="使用 repository 安装（推荐）"></a>使用 repository 安装（推荐）</h2><h3 id="安装-yum-utils"><a href="#安装-yum-utils" class="headerlink" title="安装 yum-utils"></a>安装 <code>yum-utils</code></h3><p>安装um-utils包(它提供了um-config-manager实用程序)并设置稳定存储库。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure>

<h3 id="设置-docker-的存储库（repository）"><a href="#设置-docker-的存储库（repository）" class="headerlink" title="设置 docker 的存储库（repository）"></a>设置 docker 的存储库（repository）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<h3 id="安装-Docker-引擎"><a href="#安装-Docker-引擎" class="headerlink" title="安装 Docker 引擎"></a>安装 Docker 引擎</h3><ol>
<li>安装最新版本</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<p>安装过程如果出现，要求接受 GPG 秘钥，通过<br><code>If prompted to accept the GPG key, verify that the fingerprint matches 060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35, and if so, accept it.</code></p>
<p>至此 Docker 已经安装好了， docker group 也自动创建了，但是没有用户在该 group 下。</p>
<ol start="2">
<li>安装指定版本</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示仓库中的版本</span></span><br><span class="line">yum list docker-ce --showduplicates | <span class="built_in">sort</span> -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 顺序由高到低</span></span><br><span class="line">docker-ce.x86_64  3:18.09.1-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64  3:18.09.0-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64  18.06.1.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64  18.06.0.ce-3.el7                    docker-ce-stable</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装指定版本</span></span><br><span class="line"><span class="comment"># VERSION_STRING : 包名。 版本字符串(第二列)，从第一个冒号(:)开始，直到第一个连字符(-)。</span></span><br><span class="line"><span class="comment"># 例如 3:18.09.1-3.el7 版本的包名是 18.09.1</span></span><br><span class="line">yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span><br></pre></td></tr></table></figure>

<h3 id="启动-验证-Docker"><a href="#启动-验证-Docker" class="headerlink" title="启动/验证 Docker"></a>启动/验证 Docker</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker.service</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="comment"># 验证 ， 这个命令会在容器中下载一个test 图像。</span></span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure>


<h2 id="使用资源包-RPM-安装"><a href="#使用资源包-RPM-安装" class="headerlink" title="使用资源包 RPM 安装"></a>使用资源包 RPM 安装</h2><p>详见<a href="https://docs.docker.com/engine/install/centos/">官方安装文档</a></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7 Let’s encrypt certbot 证书管理</title>
    <url>/post/37ac579a.html</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2022/02/09/opzq4VKntDG5RCI.jpg"></p>
<span id="more"></span>


<h2 id="安装-certbot"><a href="#安装-certbot" class="headerlink" title="安装 certbot"></a>安装 certbot</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y epel-release</span><br><span class="line">yum install -y certbot</span><br></pre></td></tr></table></figure>

<h2 id="安装证书前"><a href="#安装证书前" class="headerlink" title="安装证书前"></a>安装证书前</h2><ul>
<li>安装证书前先准备个临时目录，有个 index.html</li>
<li>配置 nginx 增加你要添加证书的 server </li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name you_add_domain</span><br><span class="line">    root /your/test/www/dir</span><br><span class="line">    location / &#123;</span><br><span class="line">        index  index.html</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="standalone-模式"><a href="#standalone-模式" class="headerlink" title="standalone 模式"></a>standalone 模式</h2><p>有些时候我们的一些服务并没有根目录，例如一些微服务，这时候使用 –webroot 就走不通了。certbot 还有另外一种模式 –standalone，这种模式不需要指定网站根目录，他会自动启用服务器的443端口，来验证域名的归属。我们有其他服务（例如nginx）占用了443端口，就必须先停止这些服务，在证书生成完毕后，再启用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">certbot certonly --standalone -d sub.domain.com -m xxxxxx@xxx.com --agree-tos</span><br></pre></td></tr></table></figure>

<p><strong>证书生成后文件：</strong></p>
<ul>
<li>cert.pem              服务端证书</li>
<li>chain.pem                 浏览器需要的所有证书但不包括服务端证书，比如根证书和中间证书</li>
<li>fullchain.pem         包括了cert.pem和chain.pem的内容</li>
<li>privkey.pem           证书的私钥</li>
</ul>
<h2 id="nginx-ssl-配置"><a href="#nginx-ssl-配置" class="headerlink" title="nginx ssl 配置"></a>nginx ssl 配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置一个 80 端口，并转发到 443 端口 </span></span><br><span class="line"><span class="comment"># 可以配置多个，也可以一个配置多个域名  用空格分割</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name example.your.domain;                    <span class="comment"># 修改域名</span></span><br><span class="line">    rewrite ^(.*) https://$server_name<span class="variable">$1</span> permanent;     <span class="comment"># 转发 443</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 443 ,可以多个</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen      443 ssl;</span><br><span class="line">    server_name your.domain.com;      <span class="comment"># 修改域名</span></span><br><span class="line">    </span><br><span class="line">    ssl_protocols TLSv1.2 TLSv1.3;</span><br><span class="line">    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;</span><br><span class="line">    ssl_prefer_server_ciphers off;</span><br><span class="line">    ssl_session_cache shared:SSL:10m;</span><br><span class="line">    ssl_session_timeout 1d;</span><br><span class="line">    ssl_session_tickets off;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 配置证书</span></span><br><span class="line">    ssl_certificate /etc/letsencrypt/live/your.domain.com/fullchain.pem;</span><br><span class="line">    ssl_certificate_key /etc/letsencrypt/live/your.domain.com/privkey.pem;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        <span class="comment"># 可以是转发，指向目录等</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location /name &#123;<span class="comment"># name 代表在使用该 域名时 通过该目录访问执行的地址。该示例就是 https://your.domain.com/name</span></span><br><span class="line">        <span class="comment"># 可以是转发，指向目录等</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="查看已安装的证书"><a href="#查看已安装的证书" class="headerlink" title="查看已安装的证书"></a>查看已安装的证书</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">certbot certificates</span><br></pre></td></tr></table></figure>

<h2 id="删除证书"><a href="#删除证书" class="headerlink" title="删除证书"></a>删除证书</h2><p><strong>千万别删除文件夹的方式删除</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">certbot delete --cert-name example.com</span><br></pre></td></tr></table></figure>

<h2 id="手动续期"><a href="#手动续期" class="headerlink" title="手动续期"></a>手动续期</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/certbot renew</span><br></pre></td></tr></table></figure>

<h2 id="自定续期"><a href="#自定续期" class="headerlink" title="自定续期"></a>自定续期</h2><h3 id="安装-cron-服务"><a href="#安装-cron-服务" class="headerlink" title="安装 cron 服务"></a>安装 cron 服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install vixie-cron</span><br><span class="line">yum -y install crontabs</span><br></pre></td></tr></table></figure>

<h3 id="启动-cron-服务"><a href="#启动-cron-服务" class="headerlink" title="启动 cron 服务"></a>启动 cron 服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service crond start</span><br><span class="line"><span class="comment"># 开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> crond</span><br></pre></td></tr></table></figure>

<h3 id="查看-corn-位置"><a href="#查看-corn-位置" class="headerlink" title="查看 corn 位置"></a>查看 corn 位置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -name <span class="string">&quot;cron&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/selinux/targeted/active/modules/100/cron</span><br><span class="line">/var/log/cron   <span class="comment"># 这个是日志文件位置，不管它</span></span><br><span class="line">/var/lib/docker/overlay2/755f150def933bc7d28386aa9c28db653fcc466d4a5f43f42987a8f63e75e566/diff/var/spool/cron</span><br><span class="line">/var/lib/docker/overlay2/f7d173cd29f2405151201e67c6b403e03e41c632e42c53d04f6c66977eb31a67/merged/var/spool/cron</span><br><span class="line">/var/spool/cron <span class="comment"># 这里是所有的自动执行任务的 cron 文件存放位置</span></span><br></pre></td></tr></table></figure>

<h3 id="创建-cron-配置"><a href="#创建-cron-配置" class="headerlink" title="创建 cron 配置"></a>创建 cron 配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure>

<blockquote>
<p>此命令会在 <code>/var/spool/cron</code> 下创建 ‘root’ 命名的 root 用户定时配置文件</p>
</blockquote>
<h3 id="添加定时任务"><a href="#添加定时任务" class="headerlink" title="添加定时任务"></a>添加定时任务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /var/spool/cron/root</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">15 3 * * * /usr/bin/certbot renew --quiet</span><br></pre></td></tr></table></figure>

<p>添加完后需要重启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service crond restart</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Centos7</category>
      </categories>
      <tags>
        <tag>Centos7</tag>
        <tag>https</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7 yum 安装 nginx</title>
    <url>/post/360ec959.html</url>
    <content><![CDATA[<p><a href="http://nginx.org/en/linux_packages.html#stable">官方说明</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install yum-utils</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 nginx  yum 源</span></span><br><span class="line"></span><br><span class="line">vi /etc/yum.repos.d/nginx.repo</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加如下内容</span></span><br><span class="line">[nginx-stable]</span><br><span class="line">name=nginx stable repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[nginx-mainline]</span><br><span class="line">name=nginx mainline repo</span><br><span class="line">baseurl=http://nginx.org/packages/mainline/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=<span class="literal">true</span></span><br></pre></td></tr></table></figure>


<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认安装最新的 ‘稳定版’。如果要自定义版本 【不安装特定版本，跳过】</span></span><br><span class="line">sudo yum-config-manager --<span class="built_in">enable</span> nginx-mainline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装稳定版</span></span><br><span class="line">sudo yum install nginx</span><br></pre></td></tr></table></figure>

<h2 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start nginx       <span class="comment"># 启动</span></span><br><span class="line">systemctl status nginx      <span class="comment"># 查看状态</span></span><br><span class="line">systemctl stop nginx        <span class="comment"># 停止</span></span><br><span class="line">systemctl restart nginx     <span class="comment"># 重启</span></span><br><span class="line">systemctl <span class="built_in">enable</span> nginx      <span class="comment"># 设置开机启动</span></span><br></pre></td></tr></table></figure>


<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -s reload <span class="comment"># 修改配置后,使配置生效</span></span><br><span class="line">nginx -t        <span class="comment"># 验证 nginx 配置是否正确</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p> 注意，修改配置后，一定要用 nginx -s reload 使配置生效。 再重启服务器</p>
</blockquote>
]]></content>
      <categories>
        <category>CentOS7</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7+v2Ray+WS+Apache（httpd）+ MacOs(V2RayU)科学上网流量伪装</title>
    <url>/post/8e14883f.html</url>
    <content><![CDATA[<p>最近SS、SSR 老是被 ban，只有换工具了，一直听说 v2Ray 很好用。就尝试切换到 v2Ray 。网上看了下现有的教程，大多是 nginx 的，这里有几个问题。 </p>
<ol>
<li>大多数教程是裸搭建，仅适合为了 v2ray 买个 vps 来搭建的人</li>
<li>大多已经不适用现在的版本</li>
<li>客户端多数是 v2RayN 、V2RayW (windows),而非 MacOS 的</li>
</ol>
<p>因为我个人的 VPS，就一个 blog 和一些自己的测试应用，都是 apache，而且中间有大量的配置。实在懒得为了个 v2Ray 搭一套 Nginx 的环境了。所以就在现有的环境下搞了。</p>
<span id="more"></span>

<h2 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h2><ol>
<li>CentOS 7</li>
<li>v2Ray 4.20.0</li>
<li>Apache 2.4.6</li>
<li>V2RayU 2.1 （mac 客户端）</li>
<li>MacOs Catalina(10.15.3)</li>
</ol>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul>
<li><a href="https://www.v2ray.com/">v2Ray 首页</a></li>
<li><a href="https://guide.v2fly.org/">v2Ray白话文教程</a></li>
</ul>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>本文适用于有一定 linux 、apache 基础的人。中间的过程，如安装 apache、配置 ssl 安全连接这种基础，本文没有介绍。</p>
<ol>
<li>境外 VPS 一台，<a href="https://bwh88.net/">搬瓦工【价格实惠、适合个人】</a>、<a href="https://www.vultr.com/">Vultr【按流量计费、随时换 IP】</a>等都可以；</li>
<li>域名【备不备案无所谓】 。一般爱折腾的人都有吧。如果没有，买一个就是，建议不要用一级，新建一个二级域名。DNS 新建个 A 记录指向你的 VPS 服务器 IP 即可；</li>
<li>SSL 安全连接。我用的 Certbot 配置的 Let’s Encrypt 证书。这随意搜索下，很多教程；</li>
<li>安装 apache 2.4.6 以上吧。并有一个有效的可以访问的 https【安全的】 应用（可以是静态网页模板）；</li>
</ol>
<blockquote>
<p>请满足以上几个条件再往下看。</p>
</blockquote>
<h2 id="服务端-安装配置"><a href="#服务端-安装配置" class="headerlink" title="服务端-安装配置"></a>服务端-安装配置</h2><p>Ok,看到这里，说明你前期准备完了。离成功只有一步了。</p>
<h3 id="约定"><a href="#约定" class="headerlink" title="约定"></a><a href="javascript:void(0);" id="约定">约定</a></h3><p>现在要假设几个条件，在文中需要用到，方便联系上下文。如下内容都是假设的，请勿图方便复制，你需要根据你真实环境来。</p>
<p>现在假设:</p>
<ul>
<li>能访问的的 apache 应用: <a href="https://v2ray.your.domain/">https://v2ray.your.domain</a>     【此处替换为你的域名】</li>
<li>目录是 <code>/var/www/v2ray_your_domain</code>                  【此处替换为你的 apache 服务】</li>
<li>SSL 链接配置地址 <code>/etc/httpd/conf.d/vhost/ssl.conf</code>   【此处替换为你的 apache ssl 配置文件】</li>
</ul>
<h3 id="新建伪装目录"><a href="#新建伪装目录" class="headerlink" title="新建伪装目录"></a>新建伪装目录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/www/v2ray_your_domain</span><br><span class="line"><span class="built_in">mkdir</span> anonymous <span class="comment"># 这个名称后面会用，文件名随意，可以自己定义</span></span><br></pre></td></tr></table></figure>

<h3 id="安装-v2Ray"><a href="#安装-v2Ray" class="headerlink" title="安装 v2Ray"></a>安装 v2Ray</h3><p><a href="https://www.v2ray.com/chapter_00/install.html">有问题或其他系统安装，可以看官网-安装说明</a></p>
<p>运行下面的指令下载并安装 V2Ray。当 yum 或 apt-get 可用的情况下，此脚本会自动安装 unzip 和 daemon。这两个组件是安装 V2Ray 的必要组件。如果你使用的系统不支持 yum 或 apt-get，请自行安装 unzip 和 daemon</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -L -s https://install.direct/go.sh)</span><br></pre></td></tr></table></figure>

<p>此脚本会自动安装以下文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/v2ray/v2ray：V2Ray 程序；</span><br><span class="line">/usr/bin/v2ray/v2ctl：V2Ray 工具；</span><br><span class="line">/etc/v2ray/config.json：配置文件；</span><br><span class="line">/usr/bin/v2ray/geoip.dat：IP 数据文件</span><br><span class="line">/usr/bin/v2ray/geosite.dat：域名数据文件</span><br></pre></td></tr></table></figure>

<h3 id="配置-v2Ray"><a href="#配置-v2Ray" class="headerlink" title="配置 v2Ray"></a>配置 v2Ray</h3><p>打开 conf.json</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/v2ray/config.json</span><br></pre></td></tr></table></figure>

<p>配置，注意带注释的行</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;inbounds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">8888</span><span class="punctuation">,</span>  <span class="comment">// v2Ray 【监听端口】，自定义</span></span><br><span class="line">    <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vmess&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;clients&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;453sd-1458-432f-b2435-0435c8324af52f&quot;</span><span class="punctuation">,</span>  <span class="comment">// 您的【用户id】，安装 v2ray 自动生成</span></span><br><span class="line">          <span class="attr">&quot;level&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span>   <span class="comment">// </span></span><br><span class="line">          <span class="attr">&quot;alterId&quot;</span><span class="punctuation">:</span> <span class="number">64</span> <span class="comment">// 1~64  数字越大，性能越差，网上看到一个人说的，没验证过</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// streamSettings 流量伪装的配置，默认是没有的</span></span><br><span class="line">    <span class="comment">// 如果不伪装，仅修改  监听端口、level、alterId  即可使用</span></span><br><span class="line">    <span class="attr">&quot;streamSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;network&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ws&quot;</span><span class="punctuation">,</span>        <span class="comment">// 通讯协议</span></span><br><span class="line">        <span class="attr">&quot;wsSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span><span class="string">&quot;/anonymous&quot;</span>     <span class="comment">// 需要跟你新建的伪装目录同名</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;listen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;127.0.0.1&quot;</span>     <span class="comment">// 仅允许本地通过此协议访问</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;outbounds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;freedom&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blackhole&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blocked&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;routing&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;field&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ip&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;geoip:private&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;outboundTag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blocked&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>


<h3 id="配置-Firewall"><a href="#配置-Firewall" class="headerlink" title="配置 Firewall"></a>配置 Firewall</h3><p><a href="https://baike.baidu.com/item/IPTABLES/9139339?fr=aladdin">iptables介绍</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置防火墙允许 v2ray 监听端口通过 【TCP】</span></span><br><span class="line">firewall-cmd --permanent --add-port=8888/tcp    <span class="comment"># 8888 改成你v2ray conf.json 的端口号</span></span><br><span class="line"><span class="comment"># 防火墙重新加载</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"><span class="comment"># iptables 允许v2ray 监听端口通过 </span></span><br><span class="line"><span class="comment">#【TCP】</span></span><br><span class="line">iptables -I INPUT -p tcp --dport 8888 -j ACCEPT     </span><br><span class="line"><span class="comment">#【UDP】</span></span><br><span class="line">iptables -I INPUT -p UDP --dport 8888 -j ACCEPT</span><br><span class="line"><span class="comment"># 保存配置</span></span><br><span class="line">service iptables save</span><br><span class="line"><span class="comment"># 设置开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> v2ray</span><br><span class="line"><span class="comment"># 运行v2ray</span></span><br><span class="line">systemctl start v2ray</span><br></pre></td></tr></table></figure>

<h3 id="配置-Apache"><a href="#配置-Apache" class="headerlink" title="配置 Apache"></a>配置 Apache</h3><p>打开Apache https 配置。 在 <a href="#约定">约定</a> 中已说明。  服务器配置有问题，可以参考<a href="https://guide.v2fly.org/advanced/wss_and_web.html#%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE">v2Ray白话文教程-服务器配置</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#v2ray</span></span><br><span class="line">&lt;VirtualHost *:443&gt; <span class="comment">#监听 443端口</span></span><br><span class="line">    DocumentRoot /var/www/v2ray_your_domain  <span class="comment"># 应用目录，人畜无害的并且可以访问的</span></span><br><span class="line">    ServerName  v2ray.your.domain            <span class="comment"># 监听域名，当域名为v2ray.your.domain走当前配置</span></span><br><span class="line">    SSLEngine on</span><br><span class="line">    SSLProtocol             all -SSLv3 -TLSv1 -TLSv1.1</span><br><span class="line">    SSLCipherSuite          ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384</span><br><span class="line">    SSLHonorCipherOrder     off</span><br><span class="line">    SSLSessionTickets       off</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 需要跟你的伪装目录同名</span></span><br><span class="line">    &lt;Location <span class="string">&quot;/anonymous&quot;</span>&gt;</span><br><span class="line">        ProxyPass ws://127.0.0.1:8888/anonymous  <span class="comment"># 请勿以 &quot;/&quot; 结尾 ， anonymous 和 anonymous/ 是 2 个意思</span></span><br><span class="line">        ProxyAddHeaders Off</span><br><span class="line">        ProxyPreserveHost On</span><br><span class="line">        RequestHeader append X-Forwarded-For %&#123;REMOTE_ADDR&#125;s</span><br><span class="line">    &lt;/Location&gt;</span><br><span class="line">    &lt;Directory <span class="string">&quot;/var/www/v2ray_your_domain&quot;</span>&gt;</span><br><span class="line">        Options FollowSymLinks</span><br><span class="line">        AllowOverride All</span><br><span class="line">        Order deny,allow</span><br><span class="line">        Allow from all</span><br><span class="line">    &lt;/Directory&gt;</span><br><span class="line">    <span class="comment"># ssl 证书配置,根据你的证书配置路径</span></span><br><span class="line">    Include /etc/ssl-security/options-ssl-apache.conf</span><br><span class="line">    SSLCertificateFile /etc/ssl-security/live/v2ray.your.domain/cert.pem</span><br><span class="line">    SSLCertificateKeyFile /etc/ssl-security/live/v2ray.your.domain/privkey.pem</span><br><span class="line">    SSLCertificateChainFile /etc/ssl-security/live/v2ray.your.domain/chain.pem</span><br><span class="line">&lt;/VirtualHost&gt; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以配置多个域名</span></span><br><span class="line">&lt;VirtualHost *:443&gt;</span><br><span class="line">    DocumentRoot /var/www/blog_your_domain</span><br><span class="line">    ServerName  blog.your.domain</span><br><span class="line">    ServerAlias  blog.your.domain</span><br><span class="line">    SSLEngine on</span><br><span class="line">    ...</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>

<h3 id="测试配置"><a href="#测试配置" class="headerlink" title="测试配置"></a>测试配置</h3><p>访问 <a href="https://v2ray.your.domain/anonymous">https://v2ray.your.domain/anonymous</a> 因该是 400 或者 404</p>
<h2 id="客户端-安装配置"><a href="#客户端-安装配置" class="headerlink" title="客户端-安装配置"></a>客户端-安装配置</h2><p><a href="https://github.com/yanue/V2rayU/releases">V2RayU【MacOS客户端】新版下载地址</a></p>
<p>所有平台包括移动到客户端下载参考<a href="https://www.v2ray.com/awesome/tools.html">官网-神一样的工具们</a></p>
<h3 id="v2rayU-下载不能打开解决"><a href="#v2rayU-下载不能打开解决" class="headerlink" title="v2rayU 下载不能打开解决"></a>v2rayU 下载不能打开解决</h3><p>下载下来打不开，可以打开 <code>安全与隐私</code> -&gt; <code>允许任何来源</code></p>
<p><img src="https://s2.loli.net/2022/02/09/CRMqmbPatzjBgZV.jpg"></p>
<h3 id="配置本地监听"><a href="#配置本地监听" class="headerlink" title="配置本地监听"></a>配置本地监听</h3><p><img src="https://s2.loli.net/2022/02/09/NPmzBWZnTXO7U8l.jpg"></p>
<h3 id="配置服务器"><a href="#配置服务器" class="headerlink" title="配置服务器"></a>配置服务器</h3><ul>
<li>id、alterId、level、security 和你 v2ray conf.json 配置一样。</li>
<li>其他参考你 apache 进行配置</li>
</ul>
<p><img src="https://s2.loli.net/2022/02/09/Jv4XRwSxGqm7g9U.jpg"></p>
]]></content>
      <categories>
        <category>CentOS7</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
        <tag>v2Ray</tag>
        <tag>Apache</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7 端口与防火墙配置</title>
    <url>/post/cb0a5d97.html</url>
    <content><![CDATA[<h2 id="防火墙相关"><a href="#防火墙相关" class="headerlink" title="防火墙相关"></a>防火墙相关</h2><h3 id="开放-关闭端口"><a href="#开放-关闭端口" class="headerlink" title="开放/关闭端口"></a>开放/关闭端口</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=443/tcp --permanent       <span class="comment"># 开放443端口</span></span><br><span class="line">firewall-cmd --zone=public --remove-port=443/tcp --permanent    <span class="comment"># 关闭443端口</span></span><br></pre></td></tr></table></figure>

<h3 id="查看防火墙所有开放的端口"><a href="#查看防火墙所有开放的端口" class="headerlink" title="查看防火墙所有开放的端口"></a>查看防火墙所有开放的端口</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure>
<h3 id="防火墙重新加载"><a href="#防火墙重新加载" class="headerlink" title="防火墙重新加载"></a>防火墙重新加载</h3><p>任何<strong>修改了防火墙相关的配置</strong>，都需要重启防火墙，使之生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload </span><br></pre></td></tr></table></figure>

<h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><p>如果要开放的端口太多，嫌麻烦，可以关闭防火墙，安全性自行评估</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure>
<h3 id="查看防火墙状态"><a href="#查看防火墙状态" class="headerlink" title="查看防火墙状态"></a>查看防火墙状态</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --state</span><br></pre></td></tr></table></figure>
<h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><h3 id="查看监听的端口"><a href="#查看监听的端口" class="headerlink" title="查看监听的端口"></a>查看监听的端口</h3><p>centos7 默认没有 <code>netstat</code> 命令，需要安装 ‘net-tools’ 工具，<code>yum install -y net-tools</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -lnpt</span><br></pre></td></tr></table></figure>

<p><strong>示例</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7-alexliu ~]<span class="comment"># netstat -lnpt</span></span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 127.0.0.1:4040          0.0.0.0:*               LISTEN      67591/ngrok         </span><br><span class="line">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      70689/nginx: master </span><br><span class="line">tcp        0      0 192.168.122.1:53        0.0.0.0:*               LISTEN      2474/dnsmasq        </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1091/sshd           </span><br><span class="line">tcp        0      0 127.0.0.1:631           0.0.0.0:*               LISTEN      1087/cupsd          </span><br><span class="line">tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      1718/master         </span><br><span class="line">tcp6       0      0 :::2017                 :::*                    LISTEN      98919/v2raya        </span><br><span class="line">tcp6       0      0 :::9000                 :::*                    LISTEN      99517/docker-proxy- </span><br><span class="line">tcp6       0      0 :::20170                :::*                    LISTEN      65216/v2ray         </span><br><span class="line">tcp6       0      0 :::20171                :::*                    LISTEN      65216/v2ray         </span><br><span class="line">tcp6       0      0 :::20172                :::*                    LISTEN      65216/v2ray         </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      1091/sshd           </span><br><span class="line">tcp6       0      0 ::1:631                 :::*                    LISTEN      1087/cupsd          </span><br><span class="line">tcp6       0      0 :::32345                :::*                    LISTEN      65216/v2ray         </span><br><span class="line">tcp6       0      0 ::1:25                  :::*                    LISTEN      1718/master     </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="检查端口被哪个进程占用"><a href="#检查端口被哪个进程占用" class="headerlink" title="检查端口被哪个进程占用"></a>检查端口被哪个进程占用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -lnpt |grep 80</span><br></pre></td></tr></table></figure>

<p><strong>示例</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7-alexliu ~]<span class="comment"># netstat -lnpt |grep 80</span></span><br><span class="line">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      70689/nginx: master </span><br></pre></td></tr></table></figure>

<h3 id="查看进程的详细信息"><a href="#查看进程的详细信息" class="headerlink" title="查看进程的详细信息"></a>查看进程的详细信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps 70689</span><br></pre></td></tr></table></figure>

<p><strong>示例</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7-alexliu ~]<span class="comment"># ps 70689</span></span><br><span class="line">   PID TTY      STAT   TIME COMMAND</span><br><span class="line"> 70689 ?        Ss     0:00 nginx: master process /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>
<h3 id="中止进程"><a href="#中止进程" class="headerlink" title="中止进程"></a>中止进程</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> 70689</span><br><span class="line"><span class="comment"># 强制 kill</span></span><br><span class="line"><span class="built_in">kill</span> -9 70689</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CentOS7</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 常用命令</title>
    <url>/post/f1efb8a3.html</url>
    <content><![CDATA[<h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有容器 ID</span></span><br><span class="line">docker ps -aq  或 docker ps -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止所有容器</span></span><br><span class="line">docker stop $(docker ps -aq)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止单个容器</span></span><br><span class="line">docker stop 要停止的容器名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有容器</span></span><br><span class="line">docker <span class="built_in">rm</span> $(docker ps -aq)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除单个容器</span></span><br><span class="line">docker <span class="built_in">rm</span> 要删除的容器名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有的镜像</span></span><br><span class="line">docker rmi $(docker images -q)</span><br></pre></td></tr></table></figure>

<h2 id="指定开机启动"><a href="#指定开机启动" class="headerlink" title="指定开机启动"></a>指定开机启动</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker update --restart=always &lt;容器<span class="built_in">id</span> 或 容器别名&gt;</span><br></pre></td></tr></table></figure>

<h2 id="打开容器命令行"><a href="#打开容器命令行" class="headerlink" title="打开容器命令行"></a>打开容器命令行</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it &lt;容器<span class="built_in">id</span> 或 容器别名&gt; /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行容器内脚本</span></span><br><span class="line">docker <span class="built_in">exec</span> -it &lt;容器<span class="built_in">id</span> 或 容器别名&gt; /bin/bash &lt;脚本路径&gt;/xxx.sh</span><br></pre></td></tr></table></figure>

<h2 id="拷贝文件"><a href="#拷贝文件" class="headerlink" title="拷贝文件"></a>拷贝文件</h2><p>不管启动与否都可以拷贝</p>
<p>命令：<code>docker cp &lt;image_id&gt;:&lt;target_dir_path&gt; &lt;local_dir_path&gt;</code></p>
<ul>
<li><strong>image_id</strong> : 镜像 id  可以通过 <code>docker ps -a</code> 查看，可以简写(取 id 前几位)</li>
<li><strong>target_dir_path</strong> : docker 中目标文件夹路径</li>
<li><strong>local_dir_path</strong> : 拷贝到本地的路径</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 示例 </span></span><br><span class="line"><span class="comment"># 查看镜像  `741c99bf26bb` 是镜像id  </span></span><br><span class="line">$ docker ps -a                                                                                </span><br><span class="line">CONTAINER ID        IMAGE                COMMAND                  CREATED             STATUS                            PORTS               NAMES</span><br><span class="line">741c99bf26bb        vanas/tokenmanager   <span class="string">&quot;/bin/sh -c &#x27;circusd…&quot;</span>   3 minutes ago       Restarting (127) 14 seconds ago                       vanastokenmanager_web1_1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝 docker 镜像下 /app  到本地的  /Users/alexliu/app 目录</span></span><br><span class="line">$ docker <span class="built_in">cp</span> 74:/app /Users/alexliu/app</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker部署GitLab远程SSH需要密码</title>
    <url>/post/75a0dc43.html</url>
    <content><![CDATA[<p>因为Docker 部署时，我们一般都会映射端口，防止与服务器的端口冲突或占用。Gitlab默认的 SSH 是<code>22</code> 端口，如果我们做了端口映射，但是不修改 Gitlab 的SSH 连接端口，会导致权限验证失败变成需要输入密码才能连接。</p>
<h3 id="查看-Gitlab-映射的22端口"><a href="#查看-Gitlab-映射的22端口" class="headerlink" title="查看 Gitlab 映射的22端口"></a>查看 Gitlab 映射的22端口</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                       PORTS                                                                           NAMES</span><br><span class="line">cd685db5315a        gitlab/gitlab-ce    <span class="string">&quot;/assets/wrapper&quot;</span>        2 years ago         Up 21 hours (healthy)        80/tcp, 0.0.0.0:10000-&gt;10000/tcp, 0.0.0.0:2223-&gt;22/tcp, 0.0.0.0:8444-&gt;443/tcp   fx-gitlab</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我这里映射的是 <code>2223</code> 端口</p>
<h3 id="修改-Gitlab-的ssh连接端口"><a href="#修改-Gitlab-的ssh连接端口" class="headerlink" title="修改 Gitlab 的ssh连接端口"></a>修改 Gitlab 的ssh连接端口</h3><p>打开 Gitlab 的 <code>gitlab.rb</code> 配置文件。 通过搜索查看 <code>gitlab_shell_ssh_port</code> 配置。</p>
<p>如果有则修改，没有则新增即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改SSH 连接端口为映射端口</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_shell_ssh_port&#x27;</span>] = 2223</span><br></pre></td></tr></table></figure>

<h3 id="重启-amp-测试"><a href="#重启-amp-测试" class="headerlink" title="重启&amp;测试"></a>重启&amp;测试</h3><p>重启Gitlab，进入您项目地址，会发现ssh方式的地址都会有端口号。 </p>
<p>如 <code>ssh://git@192.168.0.197:2223/xxx/xxxx.git</code> ，然后本地测试 <code>git clone ssh://git@192.168.0.197:2223/xxx/xxxx.git</code> 这时候就可以看到不需要密码了。</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 删除标签 Tag</title>
    <url>/post/e484a152.html</url>
    <content><![CDATA[<p>删除本地tag</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag -d tag-name</span><br></pre></td></tr></table></figure>


<p>删除远程tag</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin :refs/tags/tag-name</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Common</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>一种跨平台的迁移 Git服务器数据到新服务器的笨办法</title>
    <url>/post/7bc6d161.html</url>
    <content><![CDATA[<p>我们可能会在特定情况下，需要将公司 Git 版本库进行迁移。 这里不讨论公司的 Git 服务器是gitlab 、gitblit 或是balabala…… </p>
<p>不同框架有不同的迁移方式。<strong>您可能有更好的迁移版本库的方法</strong>，这里只是提供一总迁移的方法，不用折腾，简单，也是最笨的方法。</p>
<p><strong>这种迁移方式是跨平台的</strong></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文举例围绕将  <code>http://192.168.0.1/project_a.git</code> 迁移至 <code>http://192.168.0.2/projcet_a_new.git</code> 上。 <strong>实际操作中请替换为您的服务器地址及项目名称</strong></p>
<h2 id="Let-s-Go"><a href="#Let-s-Go" class="headerlink" title="Let`s Go"></a>Let`s Go</h2><ol>
<li><p>本地新建文件夹<code>server_code</code> (名称任意,  <code>主要用来clone 服务器代码到本地</code>）</p>
</li>
<li><p>在 <code>server_code</code> 中 clone <code>project_a</code></p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 请用命令行操作</span></span><br><span class="line">git <span class="built_in">clone</span> --bare http://192.168.0.1/project_a.git</span><br><span class="line"><span class="comment"># 注意，下载后的文件夹是  `project_a.git` 文件夹</span></span><br></pre></td></tr></table></figure></li>
<li><p>新 Git 服务器，新建<code>同名或不同名</code>的项目。并复制地址</p>
<p> 本示例为：<code>http://192.168.0.2/project_a_new.git</code></p>
</li>
<li><p>命令行 CD 进入 <code>project_a.git</code> 目录</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">$ /Users/alexliu/tmp/server_code</span><br><span class="line">$ <span class="built_in">cd</span> project_a.git</span><br><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">$ /Users/alexliu/tmp/server_code/project_a.git</span><br></pre></td></tr></table></figure></li>
<li><p>推送项目</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 推送</span></span><br><span class="line">git push --mirror http://192.168.0.2/project_a_new.git</span><br></pre></td></tr></table></figure></li>
</ol>
<p>OK, 这样项目所有的提交记录、分支、tags、release 版本都提交了到新的版本库了</p>
]]></content>
      <categories>
        <category>CentOS7</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
        <tag>技巧</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo第三方服务</title>
    <url>/post/77c2f60b.html</url>
    <content><![CDATA[<p>静态站点拥有一定的局限性，因此我们需要借助于第三方服务来扩展站点的功能。 罗列一些 NexT 目前支持的第三方服务，你可以根据你的需求集成一些功能进来。</p>
<span id="more"></span>

<h2 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h2><p>NexT 支持多种评论系统</p>
<blockquote>
<p>如需取消某个 页面/文章 的评论，在 md 文件的 front-matter 中增加 comments: false</p>
</blockquote>
<h3 id="Disqus"><a href="#Disqus" class="headerlink" title="Disqus"></a>Disqus</h3><p><a href="http://www.disqus.com/">Disqus</a> 漂亮，但需要翻墙才能使用，体验不好。</p>
<h3 id="DisqusJs"><a href="#DisqusJs" class="headerlink" title="DisqusJs"></a>DisqusJs</h3><p><a href="https://github.com/SukkaW/DisqusJS">DisqusJs</a>使用 Disqus API 获取到的数据渲染评论列表，搭配 Disqus API 的反代可以实现在网络审查地区加载 <a href="http://www.disqus.com/">Disqus</a> 评论列表；支持自动检测访客的 <a href="http://www.disqus.com/">Disqus</a> 可用性自动选择加载原生 <a href="http://www.disqus.com/">Disqus</a>（评论完整模式）和 <a href="https://github.com/SukkaW/DisqusJS">DisqusJs</a> 提供的评论基础模式。</p>
<ul>
<li>展示评论列表、支持按照「最新」、「最早」、「最佳」排序</li>
<li>判断访客能否访问 Disqus、自动选择「评论基础模式」或「Disqus 完整模式」</li>
<li><a href="https://disqusjs.skk.moe/">Demo-1</a></li>
<li><a href="https://blog.skk.moe/">Demo-2</a></li>
</ul>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">disqusjs:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">false</span></span><br><span class="line">  <span class="comment"># API Endpoint of Disqus API (https://disqus.com/api/).</span></span><br><span class="line">  <span class="comment"># Leave api empty if you are able to connect to Disqus API. Otherwise you need a reverse proxy for it.</span></span><br><span class="line">  <span class="comment"># For example:</span></span><br><span class="line">  <span class="comment"># api: https://disqus.skk.moe/disqus/</span></span><br><span class="line">  api:</span><br><span class="line">  apikey: <span class="comment"># Register new application from https://disqus.com/api/applications/</span></span><br><span class="line">  shortname: <span class="comment"># See: https://disqus.com/admin/settings/general/</span></span><br></pre></td></tr></table></figure>
<h3 id="Gitalk-评论"><a href="#Gitalk-评论" class="headerlink" title="Gitalk 评论"></a>Gitalk 评论</h3><p><a href="https://gitalk.github.io/">Gitalk</a> 是一个基于 GitHub Issue 和 Preact 开发的评论插件。<a href="https://gitalk.github.io/">Demo</a></p>
<p>需要<code>Git Application</code> 用于授权登录，到<a href="https://github.com/settings/applications/new">New Applications</a>注册一个即可。就可以得到 <code>client_id</code>,<code>client_secret</code>。</p>
<p><img src="https://s2.loli.net/2022/02/09/SzFYZnAGlNBU91K.jpg"></p>
<p><img src="https://s2.loli.net/2022/02/09/gxAY1RIfcMsrdk2.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitalk:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  github_id: liuqi0725 <span class="comment"># GitHub repo owner 你 github 用户名</span></span><br><span class="line">  repo: liuqi0725.github.io <span class="comment"># Repository name to store issues 用来放评论的仓库名称</span></span><br><span class="line">  client_id: <span class="comment"># GitHub Application Client ID </span></span><br><span class="line">  client_secret: <span class="comment"># GitHub Application Client Secret</span></span><br><span class="line">  admin_user: liuqi0725 <span class="comment"># GitHub repo owner and collaborators, only these guys can initialize   gitHub issues</span></span><br><span class="line">  distraction_free_mode: <span class="literal">true</span> <span class="comment"># Facebook-like distraction free mode</span></span><br><span class="line">  <span class="comment"># Gitalk&#x27;s display language depends on user&#x27;s browser or system environment</span></span><br><span class="line">  <span class="comment"># If you want everyone visiting your site to see a uniform language, you can set a  force language value</span></span><br><span class="line">  <span class="comment"># Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span></span><br><span class="line">  language: zh-CN</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：本地调试时。因为无法获取 Git Application 授权，所以无法使用。</p>
</blockquote>
<h3 id="Valine"><a href="#Valine" class="headerlink" title="Valine"></a>Valine</h3><p><a href="https://valine.js.org/">Valine</a> 是一款基于LeanCloud的快速、简洁且高效的无后端评论系统。目前已有Hexo、Jekyll、Typecho、Hugo、Ghost 等博客程序在使用Valine。</p>
<ul>
<li>支持 <code>Markdown</code></li>
<li>支持 文章阅读量统计</li>
</ul>
<p>  在<a href="https://leancloud.cn/">leancloud</a>注册账号后，编辑 Next 的配置文件中的 valine即可</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">valine:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span>  <span class="comment">#设置为 true 打开 valine</span></span><br><span class="line">  appid:  <span class="comment"># Your leancloud application appid</span></span><br><span class="line">  appkey: <span class="comment"># Your leancloud application appkey</span></span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>

<h3 id="livere-来必力"><a href="#livere-来必力" class="headerlink" title="livere|来必力"></a>livere|来必力</h3><p>棒子的东西，个人觉得速度太慢了。登陆 <a href="http://livere.com/">livere</a> 获取你的 LiveRe UID 。编辑 Next 的配置文件中的 <code>livere_uid</code>。<a href="http://livere.com/city-demo">Demo</a></p>
<ul>
<li>支持 <code>Markdown</code></li>
</ul>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># LiveRe comments system</span></span><br><span class="line"><span class="comment"># You can get your uid from https://livere.com/insight/myCode (General web site)</span></span><br><span class="line">livere_uid: <span class="comment"># &lt;your_uid&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="搜索服务"><a href="#搜索服务" class="headerlink" title="搜索服务"></a>搜索服务</h2><h3 id="Local-Search"><a href="#Local-Search" class="headerlink" title="Local Search"></a>Local Search</h3><p>本地自定义站点内容搜索，可以通过文字标题或文字内容关键字搜索出相应文章</p>
<ol>
<li>安装 hexo-generator-searchdb，在站点的根目录下执行以下命令</li>
</ol>
<pre><code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
</code></pre>
<ol start="2">
<li>编辑站点配置文件，新增以下内容到任意位置 <code>your-blog-path/_config.yml</code></li>
</ol>
<pre><code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  <span class="built_in">limit</span>: 10000</span><br></pre></td></tr></table></figure>
</code></pre>
<ol start="3">
<li>编辑主题配置文件，启用本地搜索功能 <code>your-blog-path/themes/next/_config.yml</code></li>
</ol>
<pre><code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line">local_search:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</code></pre>
<h3 id="Algolia-Search"><a href="#Algolia-Search" class="headerlink" title="Algolia Search"></a>Algolia Search</h3><p>现在比较有名的云搜索的服务，直接到<a href="https://www.algolia.com/">Algolia</a>注册账号。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Algolia Search</span></span><br><span class="line"><span class="comment"># For more information: https://www.algolia.com</span></span><br><span class="line">algolia_search:</span><br><span class="line"> <span class="built_in">enable</span>: <span class="literal">false</span></span><br><span class="line"> hits:</span><br><span class="line">   per_page: 10</span><br><span class="line"> labels:</span><br><span class="line">   input_placeholder: Search <span class="keyword">for</span> Posts</span><br><span class="line">   hits_empty: <span class="string">&quot;We didn&#x27;t find any results for the search: <span class="variable">$&#123;query&#125;</span>&quot;</span></span><br><span class="line">   hits_stats: <span class="string">&quot;<span class="variable">$&#123;hits&#125;</span> results found in <span class="variable">$&#123;time&#125;</span> ms&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="Swiftype-Search"><a href="#Swiftype-Search" class="headerlink" title="Swiftype Search"></a>Swiftype Search</h3><p>据说只有 30 天试用，要收费。有兴趣可以了解下。到<a href="https://swiftype.com/">Swiftype Search</a>注册账号获取 key 填入 NexT 配置即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Swiftype Search API Key</span></span><br><span class="line">swiftype_key:</span><br></pre></td></tr></table></figure>

<h2 id="分享服务"><a href="#分享服务" class="headerlink" title="分享服务"></a>分享服务</h2><h3 id="Addthis"><a href="#Addthis" class="headerlink" title="Addthis"></a>Addthis</h3><p><a href="https://www.addthis.com/">Addthis</a>上注册账号，添加<code>WEBSITE TOOLS</code>。 最后在 <code>Profile Settings</code> 中查看 <code>ID</code>。并添加到 NexT 配置中</p>
<img src="http://pic.fangxutuwen.com/15791898823300.jpg" width="500" style="align:center">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># AddThis Share. See: https://www.addthis.com</span></span><br><span class="line"><span class="comment"># Go to https://www.addthis.com/dashboard to customize your tools.</span></span><br><span class="line">add_this_id: </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Common</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-Google(谷歌)三件套 安装指南</title>
    <url>/post/687ace9e.html</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2022/02/09/kpjL7sJrmiqDUBZ.jpg"></p>
<p>Android系统不能使用 Google Play 简直是 2 个世界。本文介绍如何安装 google 3 件套，使用Goolge Play服务。</p>
<h2 id="Google-3-件套"><a href="#Google-3-件套" class="headerlink" title="Google 3 件套"></a>Google 3 件套</h2><ul>
<li><p>Google 服务框架</p>
<p>  GSF（Google Server Framework） 是谷歌安卓系统官方服务框架，用来作为谷歌软件的支持平台。例如<strong>GooglePlay</strong>就需要此服务框架的支持，很多国行或者改版ROM的手机都删除了这个框架，导致部分谷歌app不可正常运行。</p>
</li>
<li><p>Google play services</p>
<p>  GMS（GoogleMobile Service）。提供GooglePlay、Search、Search by Voice、Gmail、Contact Sync、Calendar Sync、Talk、Maps、Street View、YouTube、Android Market等服务，GMS为安卓上的谷歌公司系列应用提供支持</p>
</li>
<li><p>Google play store</p>
<p>  Google Play是运行Android操作系统设备的官方应用程序商店。</p>
</li>
</ul>
<span id="more"></span>

<h2 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h2><ol>
<li><p>Google 账号一枚。 <a href="https://www.google.com/intl/zh-CN/account/about/">注册地址</a></p>
</li>
<li><p>确保 Android 可以<strong>访问Google（FQ敏感词）</strong></p>
<p> 访问方式</p>
<ul>
<li>VPN</li>
<li>借朋友的VPN，SSR，v2ray 账号等</li>
<li>如果你有境外服务器，可以自己搭建<a href="https://35liuqi.com/2020/03/02/CentOS7,%20v2Ray%20,%20Apache,%20websock/">CentOS7+v2Ray+WS+Apache（httpd）+ MacOs(V2RayU)科学上网流量伪装</a></li>
</ul>
</li>
</ol>
<blockquote>
<p>小技巧：如果你有境外服务器，可以在境外服务器下载，然后通过 scp 或者 ftp 等方式下载到本地，再传到设备上。</p>
</blockquote>
<h2 id="安装-Google-服务框架"><a href="#安装-Google-服务框架" class="headerlink" title="安装 Google 服务框架"></a>安装 Google 服务框架</h2><p><a href="https://www.apkmirror.com/apk/google-inc/google-services-framework/">下载地址</a></p>
<p>注意选择与你设备 Android 系统对应的版本。</p>
<p><img src="https://s2.loli.net/2022/02/09/YT5IUDVfevrE9z1.jpg"></p>
<p>选择最新的即可</p>
<p><img src="https://s2.loli.net/2022/02/09/KQJeNBATm6YGn25.jpg"></p>
<h2 id="安装-Google-Play-Service"><a href="#安装-Google-Play-Service" class="headerlink" title="安装 Google Play Service"></a>安装 Google Play Service</h2><p><a href="https://www.apkmirror.com/apk/google-inc/google-play-services/">下载地址</a></p>
<p>打开下载链接。选择<strong>最新</strong> 版本的 Google Play Service。 </p>
<p><img src="https://s2.loli.net/2022/02/09/OLT89l7iDSrYFJW.jpg"></p>
<p>在下载页面，有很多选项。从 Android 4.0 - Android 最新版本。下载前先看自己设备的 Android 设备的版本。  至于nodpi、480dpi、320dpi，pad 一般 nodpi， 手机一般 480dpi 即可。</p>
<p>选择列表中你要下载的前方红字，进入下载页面。</p>
<p><img src="https://s2.loli.net/2022/02/09/CkGJc9qLl12g6Va.jpg"></p>
<h2 id="安装-Google-Play-Store"><a href="#安装-Google-Play-Store" class="headerlink" title="安装 Google Play Store"></a>安装 Google Play Store</h2><p><a href="https://www.apkmirror.com/apk/google-inc/google-play-store/">下载地址</a></p>
<p><img src="https://s2.loli.net/2022/02/09/ioOmz7E6U1StVsD.jpg"></p>
]]></content>
      <categories>
        <category>Common</category>
      </categories>
      <tags>
        <tag>Common</tag>
        <tag>google</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 创建 Sitemap</title>
    <url>/post/19bbd224.html</url>
    <content><![CDATA[<p>Sitemap 可方便网站管理员通知搜索引擎他们网站上有哪些可供抓取的网页。最简单的 Sitemap 形式，就是XML 文件，在其中列出网站中的网址以及关于每个网址的其他元数据（上次更新的时间、更改的频率以及相对于网站上其他网址的重要程度为何等），以便搜索引擎可以更加智能地抓取网站。</p>
<span id="more"></span>

<h2 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h2><ul>
<li>hexo: 4.2.0</li>
<li>hexo-theme-next v7.x</li>
<li>Macos 10.15</li>
</ul>
<h2 id="修改主题配置文件"><a href="#修改主题配置文件" class="headerlink" title="修改主题配置文件"></a>修改主题配置文件</h2><p>打开您的 hexo 站点目录，编辑 <code>hemes/next/_config.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="comment">#about: /about/ || user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="attr">sitemap:</span> <span class="string">/sitemap.xml</span> <span class="string">||</span> <span class="string">sitemap</span>   <span class="comment"># 默认是注释掉的。 去掉注释</span></span><br></pre></td></tr></table></figure>


<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>可以装第一个，或者 2 个都安装 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通用 sitemap 生成。 会在 public 目录下生成 sitemap.xml</span></span><br><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line"><span class="comment"># 百度 sitemap 生成。 会在 public 目录下生成 baidusitemap.xml</span></span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure>

<h2 id="生成-sitemap"><a href="#生成-sitemap" class="headerlink" title="生成 sitemap"></a>生成 sitemap</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>过一会就可以访问</p>
<ul>
<li><code>http://your.domain/sitemap.xml</code> </li>
<li><code>http://your.domain/baidusitemap.xml</code></li>
</ul>
<p>然后你需要把你的 sitemap 配置到您的 <a href="https://search.google.com/search-console/about">GoogleSearchConsole</a> , <a href="https://ziyuan.baidu.com/">百度资源管理平台</a> 中去</p>
]]></content>
      <categories>
        <category>Common</category>
      </categories>
      <tags>
        <tag>技巧</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Homebrew 下载加速</title>
    <url>/post/1e5507db.html</url>
    <content><![CDATA[<p><a href="https://brew.sh/index_zh-cn.html">Homebrew</a> 在国内的更新速度实在感人，几十 kb 的东西，盯着进度条能把人搞崩溃。虽然换国内的源不一定就能解决问题，但是换了还是比不换好。下面来介绍如何换换国内的源，不换国内源也能下载快的偏方。望能帮助到大家。</p>
<span id="more"></span>

<p>使用 <a href="https://brew.sh/index_zh-cn.html">Homebrew</a> 安装软件时，跟如下 3 个仓库有关:</p>
<ul>
<li>brew.git</li>
<li>homebrew-core.git</li>
<li>homebrew-bottles</li>
</ul>
<p>如何更换|还原 <a href="https://brew.sh/index_zh-cn.html">Homebrew</a>的源，开搞</p>
<blockquote>
<p>提示： 更换|还原 源操作后，需要执行 <code>brew update</code> 使配置生效</p>
</blockquote>
<h3 id="brew-git-仓库"><a href="#brew-git-仓库" class="headerlink" title="brew.git 仓库"></a>brew.git 仓库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 替换为清华源</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>&quot;</span> </span><br><span class="line">git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 还原</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>&quot;</span> </span><br><span class="line">git remote set-url origin https://github.com/Homebrew/brew.git</span><br></pre></td></tr></table></figure>

<h3 id="homebrew-core-git-仓库"><a href="#homebrew-core-git-仓库" class="headerlink" title="homebrew-core.git 仓库"></a>homebrew-core.git 仓库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 替换为清华源</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core&quot;</span> </span><br><span class="line">git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 还原</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core&quot;</span> </span><br><span class="line">git remote set-url origin https://github.com/Homebrew/homebrew-core.git</span><br></pre></td></tr></table></figure>

<h3 id="homebrew-bottles-地址"><a href="#homebrew-bottles-地址" class="headerlink" title="homebrew-bottles 地址"></a>homebrew-bottles 地址</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 替换为清华源</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="comment"># 查看添加与否</span></span><br><span class="line"><span class="built_in">cat</span> ~/.bash_profile </span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 还原</span></span><br><span class="line"><span class="comment"># 然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置</span></span><br><span class="line">vi ~/.bash_profile </span><br></pre></td></tr></table></figure>


<h3 id="国内源列表"><a href="#国内源列表" class="headerlink" title="国内源列表"></a>国内源列表</h3><p>以下是一些国内的源，还有一些可以自己搜索</p>
<h4 id="brew-git"><a href="#brew-git" class="headerlink" title="brew.git"></a>brew.git</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>&quot;</span> </span><br><span class="line"><span class="comment"># 阿里</span></span><br><span class="line">git remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git </span><br><span class="line"><span class="comment"># 中国科大</span></span><br><span class="line">git remote set-url origin https://mirrors.ustc.edu.cn/brew.git</span><br><span class="line"><span class="comment"># 清华大学</span></span><br><span class="line">git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git</span><br></pre></td></tr></table></figure>

<h4 id="homebrew-core-git"><a href="#homebrew-core-git" class="headerlink" title="homebrew-core.git"></a>homebrew-core.git</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>&quot;</span> </span><br><span class="line"><span class="comment"># 阿里</span></span><br><span class="line">git remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git </span><br><span class="line"><span class="comment"># 中国科大</span></span><br><span class="line">git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br><span class="line"><span class="comment"># 清华大学</span></span><br><span class="line">git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git</span><br></pre></td></tr></table></figure>

<h4 id="homebrew-bottles"><a href="#homebrew-bottles" class="headerlink" title="homebrew-bottles"></a>homebrew-bottles</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 阿里</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles&#x27;</span> &gt;&gt; ~/.bash_profile </span><br><span class="line"><span class="comment"># 中国科大</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="comment"># 清华大学</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.bash_profile</span><br></pre></td></tr></table></figure>


<h3 id="通过-git-还原-homebrew"><a href="#通过-git-还原-homebrew" class="headerlink" title="通过 git 还原 homebrew"></a>通过 git 还原 homebrew</h3><p><strong>如果你把 homebrew 折腾坏了，可以尝试 git 还原</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 诊断Homebrew的问题:</span></span><br><span class="line">brew doctor</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置brew.git设置:</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>&quot;</span></span><br><span class="line">git fetch</span><br><span class="line">git reset --hard origin/master</span><br><span class="line"></span><br><span class="line"><span class="comment"># homebrew-core.git同理:</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core&quot;</span></span><br><span class="line">git fetch</span><br><span class="line">git reset --hard origin/master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置 </span></span><br><span class="line">vi ~/.bash_profile </span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用生效:</span></span><br><span class="line">brew update </span><br></pre></td></tr></table></figure>


<h3 id="偏方"><a href="#偏方" class="headerlink" title="偏方"></a>偏方</h3><p>偏方即一些不用更改源，也可让下载飞起的方法，以下方法我都亲测过。</p>
<h4 id="手机热点"><a href="#手机热点" class="headerlink" title="手机热点"></a>手机热点</h4><p>用电脑连接手机热点，下载能达到 <code>50</code>~`100`kb以上。</p>
<ul>
<li>优点：最简单直接。就一点流量，无所谓</li>
<li>缺点：有些资源还是不行，另外此方法貌似仅适用于 <strong>电信</strong>，移动、联通 试过感觉没变化。</li>
</ul>
<h4 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h4><p>不多说了，经常使用的可以买一个，不经常使用的可以找一个免费的。</p>
<ul>
<li>优点：付费的VPN绝对能解决问题</li>
<li>缺点：免费的 VPN 不好找，付费的太贵</li>
</ul>
<h4 id="科学上网"><a href="#科学上网" class="headerlink" title="科学上网"></a>科学上网</h4><p>同 VPN 异曲同工，可以用自己搭建的，也可以是付费的。执行 brew 的时候改为<code>全局代理</code></p>
]]></content>
      <categories>
        <category>MacOS</category>
      </categories>
      <tags>
        <tag>Homebrew</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA OCR Tesseract 识别代码实现</title>
    <url>/post/7a3c4236.html</url>
    <content><![CDATA[<p>Tesseract的OCR引擎最先由HP实验室于1985年开始研发，至1995年时已经成为OCR业内最准确的三款识别引擎之一。然而，HP不久便决定放弃OCR业务，Tesseract也从从此尘封。</p>
<p>数年以后，HP意识到，与其将Tesseract束之高阁，不如贡献给开源软件业，让其重焕新生－－2005年，Tesseract由美国内华达州信息技术研究所获得，并求诸于Google对Tesseract进行改进、消除Bug、优化工作。</p>
<p>在修复了最重要的数个漏洞后，Google认为，Tesseract OCR已经足够稳定，可以重新以开源软件方式发布。</p>
<span id="more"></span>

<p><a href="https://github.com/tesseract-ocr/tesseract">Tesseract GitHub 地址</a></p>
<h2 id="Windows-下安装测试"><a href="#Windows-下安装测试" class="headerlink" title="Windows 下安装测试"></a>Windows 下安装测试</h2><hr>
<ul>
<li>安装 Microsoft Visual C++ 2015 ,根据您的操作系统位数选择32 或 64 <a href="https://www.microsoft.com/en-us/download/details.aspx?id=48145">下载地址</a>  </li>
<li>配置环境变量 <code>TESSDATA_PREFIX</code> , 值就是您 Tesseract 的路径，比如<code>D:\abc\def\Tesseract-OCR</code></li>
</ul>
<blockquote>
<p>不安装vc 2015 会出现 gs 等找不到的错误</p>
</blockquote>
<blockquote>
<p>不配置环境变量，在使用时，会出现 <code>Please make sure the TESSDATA_PREFIX environment variable is set to the parent directory of your &quot;tessdata&quot; directory</code> 错误</p>
</blockquote>
<blockquote>
<p>如果在安装 vc 2015 出现 <code>0x80240017</code> -未指定的错误，<a href="http://www.iszip.com/post/VC14setupfailed.html">请参考此处解决</a></p>
</blockquote>
<ul>
<li>使用命令行测试</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:: cd 到对应目录</span><br><span class="line"></span><br><span class="line">tesseract sourcefile.jpg savename -l chi_sim</span><br></pre></td></tr></table></figure>

<h2 id="MacOS-下安装测试"><a href="#MacOS-下安装测试" class="headerlink" title="MacOS 下安装测试"></a>MacOS 下安装测试</h2><hr>
<p>使用 <code>Homebrew</code> 安装 <code>tesseract</code> 即可,brew 会自动安装依赖包。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install tesseract</span><br></pre></td></tr></table></figure>

<ul>
<li>使用命令行测试</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tesseract sourcefile.jpg savename -l chi_sim</span><br></pre></td></tr></table></figure>

<h2 id="JAVA-环境"><a href="#JAVA-环境" class="headerlink" title="JAVA 环境"></a>JAVA 环境</h2><hr>
<h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><ul>
<li>JDK 1.8</li>
<li>IDEA 2017</li>
<li>junit 4.2</li>
<li>log4j2</li>
<li>Maven3.x</li>
</ul>
<h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><p><strong>如果不是 maven 项目跳过此步骤即可</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">log4j2.version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">log4j2.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--日志包--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j2.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j2.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j2.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-slf4j-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j2.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-jcl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j2.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.directory.studio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>org.apache.commons.lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="log4j2-xml"><a href="#log4j2-xml" class="headerlink" title="log4j2.xml"></a>log4j2.xml</h3><p><strong>具体的 log4j2 配置，可参考:</strong> <a href="https://my.oschina.net/u/3767256/blog/1615732">Log4j1 升级 Log4j2 实战</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">&quot;warn&quot;</span> <span class="attr">monitorInterval</span>=<span class="string">&quot;600&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Properties</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;BASE_LOG_PATTERN&quot;</span>&gt;</span>%5p %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%t] (%class&#123;36&#125;:%L）%M - %m%n<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_DIR_HOME&quot;</span>&gt;</span>logs<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;BASE_LOG_FILENAME&quot;</span>&gt;</span>nuna-ocr<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">&quot;trace&quot;</span> <span class="attr">onMatch</span>=<span class="string">&quot;ACCEPT&quot;</span> <span class="attr">onMismatch</span>=<span class="string">&quot;DENY&quot;</span> <span class="attr">immediateFlush</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;$&#123;BASE_LOG_PATTERN&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingRandomAccessFile</span> <span class="attr">name</span>=<span class="string">&quot;stdout_appender&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">immediateFlush</span>=<span class="string">&quot;true&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;$&#123;LOG_DIR_HOME&#125;/$&#123;BASE_LOG_FILENAME&#125;-stdout.log&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">filePattern</span>=<span class="string">&quot;$&#123;LOG_DIR_HOME&#125;/$&#123;BASE_LOG_FILENAME&#125;-stdout-%d&#123;yyyy-MM-dd&#125;_%i.log.gz&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;BASE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">PatternLayout</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> <span class="attr">modulate</span>=<span class="string">&quot;true&quot;</span> <span class="attr">interval</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">&quot;5120 KB&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">&quot;3&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingRandomAccessFile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingRandomAccessFile</span> <span class="attr">name</span>=<span class="string">&quot;error_appender&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">immediateFlush</span>=<span class="string">&quot;true&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;$&#123;LOG_DIR_HOME&#125;/$&#123;BASE_LOG_FILENAME&#125;-error.log&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">filePattern</span>=<span class="string">&quot;$&#123;LOG_DIR_HOME&#125;/$&#123;BASE_LOG_FILENAME&#125;-error-%d&#123;yyyy-MM-dd&#125;_%i.log.gz&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;BASE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">PatternLayout</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> <span class="attr">modulate</span>=<span class="string">&quot;true&quot;</span> <span class="attr">interval</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">&quot;5120 KB&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Filters</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">&quot;warn&quot;</span> <span class="attr">onMatch</span>=<span class="string">&quot;ACCEPT&quot;</span> <span class="attr">onMismatch</span>=<span class="string">&quot;DENY&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Filters</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">&quot;3&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingRandomAccessFile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.liu.app.ocr&quot;</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;stdout_appender&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;error_appender&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span> <span class="attr">includeLocation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;stdout_appender&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;error_appender&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="JAVA-代码实现"><a href="#JAVA-代码实现" class="headerlink" title="JAVA 代码实现"></a>JAVA 代码实现</h2><hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OcrProcess</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LogManager.getLogger(OcrProcess.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">tessPath</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">ocr_psm_num</span> <span class="operator">=</span> <span class="string">&quot;3&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">ocr_language</span> <span class="operator">=</span> <span class="string">&quot;eng&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">ocr_result_path</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">ocr_result_file_path</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">OS</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ocr_lang_option</span> <span class="operator">=</span> <span class="string">&quot;-l&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ocr_psm_option</span> <span class="operator">=</span> <span class="string">&quot;-psm&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="variable">procID</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文本换行符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EOL</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;line.separator&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前系统，路径分割符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FIS</span> <span class="operator">=</span> System.getProperties().getProperty(<span class="string">&quot;file.separator&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tessPath 本地 tesseract 路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OcrProcess</span><span class="params">(String tessPath)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tessPath = tessPath;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(logger.isDebugEnabled())&#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;OcrProcess Created .&quot;</span>);</span><br><span class="line">            logger.debug(<span class="string">&quot;OcrProcess Current OS &gt;&gt;&gt; &#123;&#125; &quot;</span>,<span class="built_in">this</span>.OS);</span><br><span class="line">            logger.debug(<span class="string">&quot;OcrProcess User tessPath &gt;&gt;&gt; &#123;&#125; &quot;</span>,<span class="built_in">this</span>.tessPath);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(logger.isInfoEnabled())&#123;</span><br><span class="line">            logger.info(<span class="string">&quot;OcrProcess Created .&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置 pagesegmode 1-10</span></span><br><span class="line"><span class="comment">     * 0 = Orientation and script detection (OSD) only.</span></span><br><span class="line"><span class="comment">     * 1 = Automatic page segmentation with OSD.</span></span><br><span class="line"><span class="comment">     * 2 = Automatic page segmentation, but no OSD, or OCR.</span></span><br><span class="line"><span class="comment">     * 3 = Fully automatic page segmentation, but no OSD. (Default)</span></span><br><span class="line"><span class="comment">     * 4 = Assume a single column of text of variable sizes.</span></span><br><span class="line"><span class="comment">     * 5 = Assume a single uniform block of vertically aligned text.</span></span><br><span class="line"><span class="comment">     * 6 = Assume a single uniform block of text.</span></span><br><span class="line"><span class="comment">     * 7 = Treat the image as a single text line.  // 识别内容为 横行， 可以提供单行文本的识别效率</span></span><br><span class="line"><span class="comment">     * 8 = Treat the image as a single word.</span></span><br><span class="line"><span class="comment">     * 9 = Treat the image as a single word in a circle.</span></span><br><span class="line"><span class="comment">     * 10 = Treat the image as a single character.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> psm 参考 tesseract 文档</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPageSegMode</span><span class="params">(Integer psm)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(logger.isDebugEnabled())&#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;OcrProcess User set OCR Process PageSeqMode &gt;&gt;&gt; &#123;&#125;&quot;</span>,psm);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(logger.isInfoEnabled())&#123;</span><br><span class="line">            logger.info(<span class="string">&quot;OcrProcess User set OCR Process PageSeqMode &gt;&gt;&gt; &#123;&#125;&quot;</span>,psm);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(psm == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;param psm is null,will use default 3&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(psm &gt; <span class="number">10</span> || psm &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;param psm only between 0 and 10,will use default 3&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.ocr_psm_num = String.valueOf(psm);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置保存路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> savePath</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSaveDir</span><span class="params">(String savePath)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(logger.isDebugEnabled())&#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;OcrProcess User set OCR Process Result TXT SavePath &gt;&gt;&gt; &#123;&#125;&quot;</span>,savePath);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(logger.isInfoEnabled())&#123;</span><br><span class="line">            logger.info(<span class="string">&quot;OcrProcess User set OCR Process Result TXT SavePath &gt;&gt;&gt; &#123;&#125;&quot;</span>,savePath);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">saveDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(savePath);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!saveDir.exists())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileNotFoundException</span>(<span class="string">&quot;the savePath is not found!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.ocr_result_path = savePath;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> alexliu</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span>：2017年11月22日 下午2:39:42</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>：文件 ocr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> language 语言  chi_sim ,eng</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 识别后文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSupportFileTypeException 自定义异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doOCR</span><span class="params">(File file , String language)</span> <span class="keyword">throws</span> NoSupportFileTypeException &#123;</span><br><span class="line">        <span class="comment">// 创建一个 ocr 执行id，便于日志、数据记录</span></span><br><span class="line">        <span class="comment">//this.procID = OcrTools.createProcessId();</span></span><br><span class="line">        <span class="built_in">this</span>.procID = <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(logger.isDebugEnabled())&#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;OcrProcess Begin. The file &gt;&gt;&gt; [&#123;&#125;], the procID is [&#123;&#125;] .&quot;</span>,file.getName(),<span class="built_in">this</span>.procID);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(logger.isInfoEnabled())&#123;</span><br><span class="line">            logger.info(<span class="string">&quot;OcrProcess Begin. The file &gt;&gt;&gt; [&#123;&#125;], the procID is [&#123;&#125;] . See More info PLZ set logger Debug or Trace.&quot;</span>,file.getName(),<span class="built_in">this</span>.procID);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">textSavePath</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(logger.isDebugEnabled())&#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;[&#123;&#125;] OCR process info : FilePath &gt;&gt;&gt; &#123;&#125;&quot;</span>,<span class="built_in">this</span>.procID,file.getAbsolutePath());</span><br><span class="line">            logger.debug(<span class="string">&quot;[&#123;&#125;] OCR process info : FileName &gt;&gt;&gt; &#123;&#125;&quot;</span>,<span class="built_in">this</span>.procID,file.getName());</span><br><span class="line">            logger.debug(<span class="string">&quot;[&#123;&#125;] OCR process info : FileSize &gt;&gt;&gt; &#123;&#125; KB&quot;</span>,<span class="built_in">this</span>.procID,(file.length() / <span class="number">1024f</span>));</span><br><span class="line">            logger.debug(<span class="string">&quot;[&#123;&#125;] OCR process info : OCR Language &gt;&gt;&gt; &#123;&#125;&quot;</span>,<span class="built_in">this</span>.procID,language);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.ocr_language = language;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取文件类型</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">fileType</span> <span class="operator">=</span> <span class="built_in">this</span>.getFileType(file.getName());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(logger.isDebugEnabled())&#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;[&#123;&#125;] OCR process info : FileType &gt;&gt;&gt; &#123;&#125;&quot;</span>,<span class="built_in">this</span>.procID,fileType);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(logger.isDebugEnabled())&#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;[&#123;&#125;] OCR process info : The FileType is Image .&quot;</span>,<span class="built_in">this</span>.procID);</span><br><span class="line">        &#125;</span><br><span class="line">        textSavePath = callTesseractCommand(file);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> textSavePath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取输出路径</span></span><br><span class="line"><span class="comment">     * 如果 用户调用了 `setSaveDir` ,那么 OCR 输出到用户设置的目录</span></span><br><span class="line"><span class="comment">     * 如果 没有调用 `setSaveDir` ，那么 OCR 输出与识别文件同一目录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceFile 原始文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getOutPutDir</span><span class="params">(File sourceFile)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(<span class="built_in">this</span>.ocr_result_path))&#123;</span><br><span class="line">            <span class="keyword">return</span> sourceFile.getAbsolutePath().substring(<span class="number">0</span>,sourceFile.getAbsolutePath().lastIndexOf(<span class="built_in">this</span>.FIS));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.ocr_result_path;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取文件类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSupportFileTypeException 自定义异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer <span class="title function_">getFileType</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> NoSupportFileTypeException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//此处根据文件后缀名判断是否是可以执行 OCR 的文件类型</span></span><br><span class="line">        <span class="comment">//Integer type = OcrTools.getFileType(fileName);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">type</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(type == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// NoSupportFileTypeException 为自定义异常，此处可自定义您的内容</span></span><br><span class="line">            <span class="comment">//throw new NoSupportFileTypeException(&quot;[&quot;+fileName+&quot;] , 无法识别的文件类型.&quot;);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建 ProcessBuilder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceFile</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ProcessBuilder <span class="title function_">createProcessBuilder</span><span class="params">(File sourceFile)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ProcessBuilder</span> <span class="variable">pb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.OS.startsWith(<span class="string">&quot;Mac OS&quot;</span>) || <span class="built_in">this</span>.OS.startsWith(<span class="string">&quot;Linux&quot;</span>))&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置命令行工作目录，Linux , Mac OS 设置在 tesseract 目录下</span></span><br><span class="line">            <span class="comment">//因为 tesseract 非安装模式，也没有添加到系统的环境变量中</span></span><br><span class="line">            pb.directory(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="built_in">this</span>.tessPath));</span><br><span class="line">            <span class="keyword">if</span>(logger.isDebugEnabled())&#123;</span><br><span class="line">                logger.debug(<span class="string">&quot;[&#123;&#125;] OCR process info : Set ProcessBuilder working dir &gt;&gt;&gt; &#123;&#125;&quot;</span>,<span class="built_in">this</span>.procID,<span class="built_in">this</span>.tessPath);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">this</span>.OS.startsWith(<span class="string">&quot;Windows&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">//设置命令行工作目录,windows 下设置在要解析的文件目录下</span></span><br><span class="line">            pb.directory(sourceFile.getParentFile());</span><br><span class="line">            <span class="keyword">if</span>(logger.isDebugEnabled())&#123;</span><br><span class="line">                logger.debug(<span class="string">&quot;[&#123;&#125;] OCR process info : Set ProcessBuilder working dir &gt;&gt;&gt; &#123;&#125;&quot;</span>,<span class="built_in">this</span>.procID,sourceFile.getParentFile());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出错误日志流</span></span><br><span class="line">        pb.redirectErrorStream(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建命令行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceFile</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; <span class="title function_">createCommand</span><span class="params">(File sourceFile)</span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; cmd = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ocr 输出目录</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result_out_dir</span> <span class="operator">=</span> getOutPutDir(sourceFile);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ocr 命令输出文件名，没有后缀</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">ocr_result_filename</span> <span class="operator">=</span> sourceFile.getName().substring(<span class="number">0</span> , sourceFile.getName().lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ocr 输出文件名,有后缀</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result_out_filePath</span> <span class="operator">=</span> result_out_dir + <span class="built_in">this</span>.FIS + ocr_result_filename + <span class="string">&quot;.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.ocr_result_file_path = result_out_filePath;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;[&#123;&#125;] OCR process info : Result SaveDir &gt;&gt;&gt; &#123;&#125;&quot;</span>,<span class="built_in">this</span>.procID,result_out_dir);</span><br><span class="line">            logger.debug(<span class="string">&quot;[&#123;&#125;] OCR process info : Result SaveFilePath &gt;&gt;&gt; &#123;&#125;&quot;</span>,<span class="built_in">this</span>.procID,result_out_filePath);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(logger.isInfoEnabled())&#123;</span><br><span class="line">            logger.info(<span class="string">&quot;[&#123;&#125;] OCR process info : Result SaveFilePath &gt;&gt;&gt; &#123;&#125;&quot;</span>,<span class="built_in">this</span>.procID,result_out_filePath);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.OS.startsWith(<span class="string">&quot;Mac OS&quot;</span>) || <span class="built_in">this</span>.OS.startsWith(<span class="string">&quot;Linux&quot;</span>))&#123;</span><br><span class="line">            cmd.add(<span class="string">&quot;tesseract&quot;</span>);</span><br><span class="line">            <span class="comment">// Linux or Mac 要设置工作目录为 tesseract 目录 ，所以`原始文件名`需包含路径</span></span><br><span class="line">            cmd.add(sourceFile.getAbsolutePath());</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">this</span>.OS.startsWith(<span class="string">&quot;Windows&quot;</span>))&#123;</span><br><span class="line">            cmd.add(<span class="built_in">this</span>.tessPath + <span class="built_in">this</span>.FIS + <span class="string">&quot;tesseract&quot;</span>);</span><br><span class="line">            <span class="comment">// windows 要设置工作目录为文件目录，所以`原始文件名`没有路径，只有文件名</span></span><br><span class="line">            cmd.add(sourceFile.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cmd.add(result_out_dir + <span class="built_in">this</span>.FIS + ocr_result_filename);</span><br><span class="line">        cmd.add(<span class="built_in">this</span>.ocr_psm_option);</span><br><span class="line">        cmd.add(<span class="built_in">this</span>.ocr_psm_num);</span><br><span class="line">        cmd.add(<span class="built_in">this</span>.ocr_lang_option);</span><br><span class="line">        cmd.add(<span class="built_in">this</span>.ocr_language);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(logger.isDebugEnabled())&#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;[&#123;&#125;] OCR process info : The Command &gt;&gt;&gt; &#123;&#125;&quot;</span>,<span class="built_in">this</span>.procID,cmd.toString());</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(logger.isInfoEnabled())&#123;</span><br><span class="line">            logger.info(<span class="string">&quot;[&#123;&#125;] OCR process info : The Command &gt;&gt;&gt; &#123;&#125;&quot;</span>,<span class="built_in">this</span>.procID,cmd.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cmd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理识别后的空格字符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> txtFilePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> FileNotFoundException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processSpace</span><span class="params">(String txtFilePath)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        String str;</span><br><span class="line"></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">readSuccess</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">txtFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(txtFilePath);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!txtFile.exists())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileNotFoundException</span>(<span class="string">&quot;OCR process Result file is not exist!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//读取文件</span></span><br><span class="line">            fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(txtFile);</span><br><span class="line">            isr = <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(fis,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> ((str = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                sb.append(str).append(<span class="built_in">this</span>.EOL);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            logger.error(<span class="string">&quot;[&#123;&#125;] OCR process space read file faild .&quot;</span>,<span class="built_in">this</span>.procID,e);</span><br><span class="line">            readSuccess = <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                br.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                <span class="comment">//ignore;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                isr.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                <span class="comment">//ignore;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fis.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                <span class="comment">//ignore;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理空格</span></span><br><span class="line">        <span class="keyword">if</span>(readSuccess)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//写出文件</span></span><br><span class="line">                fos = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(txtFile);</span><br><span class="line">                osw = <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(fos,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                bw = <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(osw);</span><br><span class="line">                bw.write(sb.toString().replaceAll(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                logger.error(<span class="string">&quot;[&#123;&#125;] OCR process space write file faild .&quot;</span>,<span class="built_in">this</span>.procID,e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bw.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    <span class="comment">//ignore;</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    osw.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    <span class="comment">//ignore;</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    <span class="comment">//ignore;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印命令行执行错误日志</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> process</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">printCommandError</span><span class="params">(Process process)</span>&#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 取得命令结果的输出流</span></span><br><span class="line">            fis = process.getInputStream();</span><br><span class="line">            <span class="comment">// 用一个读输出流类去读</span></span><br><span class="line">            isr = <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(fis);</span><br><span class="line">            <span class="comment">// 用缓冲器读行</span></span><br><span class="line">            br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr);</span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="comment">// 直到读完为止</span></span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                logger.warn(<span class="string">&quot;[&#123;&#125;] OCR process warning : &#123;&#125; &quot;</span>,<span class="built_in">this</span>.procID,line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            logger.warn(<span class="string">&quot;[&#123;&#125;] OCR process print command error Faild!&quot;</span>,e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                br.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                <span class="comment">//ignore</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                isr.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                <span class="comment">//ignore</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fis.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                <span class="comment">//ignore</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> alexliu</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span>：2017年11月22日 下午2:47:25</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>：用命令行执行ocr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> imageFile</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回识别后的文件路径目</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">callTesseractCommand</span><span class="params">(File imageFile)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">txt_path</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; comand = <span class="built_in">this</span>.createCommand(imageFile);</span><br><span class="line"></span><br><span class="line">        <span class="type">ProcessBuilder</span> <span class="variable">pb</span> <span class="operator">=</span> <span class="built_in">this</span>.createProcessBuilder(imageFile);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加命令行</span></span><br><span class="line">        pb.command(comand);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(logger.isDebugEnabled())&#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;[&#123;&#125;] OCR process info : Add command to ProcessBuilder&quot;</span>,<span class="built_in">this</span>.procID);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(logger.isDebugEnabled())&#123;</span><br><span class="line">                logger.debug(<span class="string">&quot;[&#123;&#125;] OCR process info : Excute OCR Command.&quot;</span>,<span class="built_in">this</span>.procID);</span><br><span class="line">            &#125;</span><br><span class="line">            process = pb.start();</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> process.waitFor();</span><br><span class="line">            <span class="keyword">if</span>(logger.isDebugEnabled())&#123;</span><br><span class="line">                logger.debug(<span class="string">&quot;[&#123;&#125;] OCR process info : Command excute result &gt;&gt;&gt; &#123;&#125;&quot;</span>,<span class="built_in">this</span>.procID,w);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(logger.isInfoEnabled())&#123;</span><br><span class="line">                logger.info(<span class="string">&quot;[&#123;&#125;] OCR process info : Command excute result &gt;&gt;&gt; &#123;&#125;&quot;</span>,<span class="built_in">this</span>.procID,w);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (w == <span class="number">0</span>) &#123;</span><br><span class="line">                txt_path = <span class="built_in">this</span>.ocr_result_file_path;</span><br><span class="line">                <span class="comment">//处理空格</span></span><br><span class="line">                <span class="built_in">this</span>.processSpace(txt_path);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//打印错误日志</span></span><br><span class="line">                <span class="built_in">this</span>.printCommandError(process);</span><br><span class="line">                <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;[%s] excute command Faild ! Result %d , Reason : %s !&quot;</span>;</span><br><span class="line">                <span class="keyword">switch</span> (w) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                        msg = String.format(msg,<span class="built_in">this</span>.procID,w,<span class="string">&quot;无法访问文件，可能文件名中存在空格等特殊字符&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">29</span>:</span><br><span class="line">                        msg = String.format(msg,<span class="built_in">this</span>.procID,w,<span class="string">&quot;无法识别图像或其选定区域&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">31</span>:</span><br><span class="line">                        msg = String.format(msg,<span class="built_in">this</span>.procID,w,<span class="string">&quot;不支持的图片格式&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        msg = String.format(msg,<span class="built_in">this</span>.procID,w,<span class="string">&quot;未知错误&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(msg);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;[&#123;&#125;] OCR process info : Command excute [pb.start()] Faild !&quot;</span>,<span class="built_in">this</span>.procID,e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;[&#123;&#125;] OCR process info : Command excute [process.waitFor()] Faild !&quot;</span>,<span class="built_in">this</span>.procID,e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(logger.isDebugEnabled())&#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;[&#123;&#125;] OCR process info : OCR Process End.&quot;</span>,<span class="built_in">this</span>.procID);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(logger.isInfoEnabled())&#123;</span><br><span class="line">            logger.info(<span class="string">&quot;[&#123;&#125;] OCR process info : OCR Process End.&quot;</span>,<span class="built_in">this</span>.procID);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> txt_path;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.core.config.ConfigurationSource;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.core.config.Configurator;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFileOCR</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">log4jxml</span> <span class="operator">=</span> <span class="string">&quot;/your/log/config/path/log4j2.xml&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        File config=<span class="keyword">new</span> <span class="title class_">File</span>(log4jxml);</span><br><span class="line">        <span class="type">ConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConfigurationSource</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(config),config);</span><br><span class="line">        Configurator.initialize(<span class="literal">null</span>, source);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_JPG_Linux</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">tessPath</span> <span class="operator">=</span> <span class="string">&quot;/your/tesseract/path/Tesseract-OCR&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">img</span> <span class="operator">=</span> <span class="string">&quot;/your/test/file/path/test.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">OcrProcess</span> <span class="variable">ocr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OcrProcess</span>(tessPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试保存其他目录</span></span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            ocr.setSaveDir(&quot;/others/save/path&quot;);</span></span><br><span class="line"><span class="comment">//        &#125; catch (FileNotFoundException e) &#123;</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(img);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> ocr.doOCR(file, <span class="string">&quot;chi_sim&quot;</span>);</span><br><span class="line">            System.out.println(path);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_JPG_Windows</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">tessPath</span> <span class="operator">=</span> <span class="string">&quot;D:\\your\\tesseract\\path\\Tesseract-OCR&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">img</span> <span class="operator">=</span> <span class="string">&quot;C:\\your\\test\\file\\path\\test.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">OcrProcess</span> <span class="variable">ocr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OcrProcess</span>(tessPath);</span><br><span class="line">        <span class="comment">//测试保存其他目录</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ocr.setSaveDir(<span class="string">&quot;C:\\others\\save\\path&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(img);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> ocr.doOCR(file, <span class="string">&quot;chi_sim&quot;</span>);</span><br><span class="line">            System.out.println(path);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第三方-JAR"><a href="#第三方-JAR" class="headerlink" title="第三方 JAR"></a>第三方 JAR</h2><hr>
<p>如果觉得使用命令行方式不方便，可以使用 Tess4j, Maven 引入如下。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sourceforge.tess4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tess4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Tess4j在tesseract 之上丰富了图像的处理，可以放大后识别，还有一些学习功能，但是在测试过程中，tess4j 在处理时比直接使用命令行的内存消耗要多点。</p>
<h2 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h2><hr>
<p>OCR 是一个特别消耗内存的操作，建议做成组件独立部署，与您的服务通过 API 来调用。  </p>
<p>以下是我的应用的一些数据，OCR 为独立部署。仅供参考：</p>
<ul>
<li><p>内存消耗</p>
<ol>
<li>开5个线程同时处理，内存持续维持在8-12G 之间。</li>
<li>单线程维持在 3-4G 之间。</li>
</ol>
</li>
<li><p>识别效率</p>
<ol>
<li>100张 A4 纸张内容，300kb 每张，单线程，处理时间为20-24分钟，12~16秒一张</li>
<li>10000张 A4 纸张内容，300kb 每张，5个线程，处理时间为7-10小时，中间失败几率会增大，重试次数多。</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>OpenCV</tag>
        <tag>OCR</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA OpenCV 入门</title>
    <url>/post/deaa1ad8.html</url>
    <content><![CDATA[<p>网上 JAVA 学习 OpenCV 的知识太少，自己通过学习把整理的示例，参数说明放在这里，大家一起互相学习。主要通过 OpenCV3.x 的官方开发文档，实体书等自学。在内容中加了大量注释起到一起学习，互相沟通的作用。<strong>函数讲解，案例代码内容我均整理在 GitHub【<a href="https://github.com/liuqi0725/OpenCV3-Study-JAVA">OpenCV3-Study-JAVA</a> 】上</strong></p>
<span id="more"></span>


<h2 id="开发环境及IDE"><a href="#开发环境及IDE" class="headerlink" title="开发环境及IDE"></a>开发环境及IDE</h2><ul>
<li>JDK 1.8</li>
<li>OpenCV 3.4</li>
<li>MacOS Sierra 10.12.4</li>
<li>IDEA 2017</li>
</ul>
<h2 id="主要参考："><a href="#主要参考：" class="headerlink" title="主要参考："></a>主要参考：</h2><ul>
<li><a href="https://docs.opencv.org/3.0-beta/index.html">官方 OpenCV 3.0 开发文档</a></li>
<li><a href="http://opencv-java-tutorials.readthedocs.io/en/latest/">官方 OpenCV 3.0 JAVA 教程</a></li>
<li><a href="http://pdf.th7.cn/down/files/1602/OpenCV%203.0%20Computer%20Vision%20with%20Java.pdf">OpenCV 3.0 Computer Vision with Java</a></li>
<li><a href="https://book.douban.com/subject/26320896">OpenCV3 编程入门</a></li>
</ul>
<h2 id="OpenCV-安装"><a href="#OpenCV-安装" class="headerlink" title="OpenCV 安装"></a>OpenCV 安装</h2><ul>
<li><a href="https://35liuqi.com/2018/01/29/macOS%20%E5%AE%89%E8%A3%85%20opencv3.4/">MacOS 安装 OpenCV JAVA 版</a></li>
<li>MacOS 安装 OpenCV Python3 版（暂无）</li>
<li>Window 安装 OpenCV JAVA 版（暂无）</li>
<li>Window 安装 OpenCV Python3 版（暂无）</li>
</ul>
<h2 id="章节目录"><a href="#章节目录" class="headerlink" title="章节目录"></a>章节目录</h2><p>+————————————————————————–+<br/><br>          <strong>所有示例均放在 <code>src/test/java/opencv/study</code> 目录下</strong>               <br/><br>+————————————————————————–+<br/></p>
<ol>
<li><p><a href="https://github.com/liuqi0725/OpenCV3-Study-JAVA/blob/master/src/test/java/opencv/study/StudySection_1.java">StudySection_1 ———– 认识 Mat 对象，创建图像矩阵</a></p>
<ul>
<li>创建 Mat 对象，Mat 对象的参数介绍</li>
<li>通过Matlab 创建 Mat 对象</li>
<li>创建彩色图像</li>
<li>创建透明图像</li>
<li>期望值来创建随机的初始化矩阵图像</li>
</ul>
</li>
<li><p><a href="https://github.com/liuqi0725/OpenCV3-Study-JAVA/blob/master/src/test/java/opencv/study/StudySection_2.java">StudySection_2 ———– 图像的读取、图像 ROI 区域的使用</a></p>
<ul>
<li>图像的读取</li>
<li>对 ROI 区域描边</li>
<li>截取 ROI 区域</li>
<li>用图片在原始图片上划定 ROI 区域，并替换</li>
</ul>
</li>
<li><p><a href="https://github.com/liuqi0725/OpenCV3-Study-JAVA/blob/master/src/test/java/opencv/study/StudySection_3.java">StudySection_3 ———– 矩形、颜色空间转化</a></p>
</li>
<li><p><a href="https://github.com/liuqi0725/OpenCV3-Study-JAVA/blob/master/src/test/java/opencv/study/StudySection_4.java">StudySection_4 ———– 绘图像(直线、矩形、圆形、椭圆等)</a></p>
<ul>
<li>画椭圆</li>
<li>画实心圆</li>
<li>画线</li>
<li>画矩形</li>
<li>结合例子</li>
</ul>
</li>
<li><p><a href="https://github.com/liuqi0725/OpenCV3-Study-JAVA/blob/master/src/test/java/opencv/study/StudySection_5.java">StudySection_5 ———– 图像空间压缩</a></p>
</li>
<li><p><a href="https://github.com/liuqi0725/OpenCV3-Study-JAVA/blob/master/src/test/java/opencv/study/StudySection_6.java">StudySection_6 ———– 图像线性混合、通道拆分合并、离散傅里叶变换</a></p>
</li>
<li><p><a href="https://github.com/liuqi0725/OpenCV3-Study-JAVA/blob/master/src/test/java/opencv/study/StudySection_7.java">StudySection_7 ———– 图像滤波</a></p>
<ul>
<li>3种线性滤波<ul>
<li>BoxBlur – 方框滤波   </li>
<li>Blur – 均值滤波</li>
<li>GaussianBlur – 高斯滤波</li>
</ul>
</li>
<li>2种非线性滤波<ul>
<li>medianBlur – 中值滤波</li>
<li>BilateralFilter – 双边滤波</li>
</ul>
</li>
</ul>
</li>
<li><p><a href="https://github.com/liuqi0725/OpenCV3-Study-JAVA/blob/master/src/test/java/opencv/study/StudySection_8.java">StudySection_8 ———– 图像腐蚀(erode)、膨胀(dilate)、查找条形码案例。</a></p>
</li>
<li><p><a href="https://github.com/liuqi0725/OpenCV3-Study-JAVA/blob/master/src/test/java/opencv/study/StudySection_9.java">StudySection_9 ———– 形态学滤波(开、闭运算、顶帽等)、识别图中二维码案例</a></p>
<ul>
<li>对本章节内容学习深入不够，图像的专业知识0-较多，后续随着业务的深入再回头来深入理解</li>
</ul>
</li>
<li><p><a href="https://github.com/liuqi0725/OpenCV3-Study-JAVA/blob/master/src/test/java/opencv/study/StudySection_10.java">StudySection_10 ———– floodFill(漫水填充)、图片的放大缩小 pyrUp、pyrDown、Resize</a></p>
</li>
<li><p><a href="https://github.com/liuqi0725/OpenCV3-Study-JAVA/blob/master/src/test/java/opencv/study/StudySection_11.java">StudySection_11 ———– threshold 固定阈值操作、adaptiveThreshold 自适应阈值操作</a></p>
</li>
<li><p><a href="https://github.com/liuqi0725/OpenCV3-Study-JAVA/blob/master/src/test/java/opencv/study/StudySection_12.java">StudySection_12 ———– Canny 算法、Sobel 算法、Laplacian 算法、Scharr 滤波器</a></p>
<ul>
<li>Sobel 、Laplacian 、Scharr 后续研究，看了教程与官网内容，属于边缘使用场景</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>OpenCV</tag>
      </tags>
  </entry>
  <entry>
    <title>MacBook 卸载 node</title>
    <url>/post/78fbf0ed.html</url>
    <content><![CDATA[<p>MacBook 下卸载 node 比较麻烦，这两天弄 Hexo，node 升级后导致 npm 版本不一致无法 install，就准备把 node、npm 删除了重新装。在Stackoverflow 上面找到一个手动删除的方法还不错，特地记录下来。</p>
<span id="more"></span>

<h2 id="brew-安装卸载"><a href="#brew-安装卸载" class="headerlink" title="brew 安装卸载"></a>brew 安装卸载</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew uninstall node</span><br></pre></td></tr></table></figure>

<h2 id="pkg-安装卸载"><a href="#pkg-安装卸载" class="headerlink" title="pkg 安装卸载"></a>pkg 安装卸载</h2><ul>
<li><p>首先运行脚本</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line">sudo lsbom -f -l -s -pf /var/db/receipts/org.nodejs.node.pkg.bom | <span class="keyword">while</span> <span class="built_in">read</span> f; <span class="keyword">do</span> sudo <span class="built_in">rm</span> -rf <span class="variable">$&#123;f:1&#125;</span>; <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line">sudo <span class="built_in">rm</span> -rf /usr/local/lib/node /usr/local/lib/node_modules /var/db/receipts/org.nodejs.*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/lib</span><br><span class="line">sudo <span class="built_in">rm</span> -rf node*</span><br></pre></td></tr></table></figure></li>
<li><p>进入<code>/usr/local/include</code>删除含有<code>node</code>和<code>node_modules</code>的目录</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/include</span><br><span class="line">sudo <span class="built_in">rm</span> -rf node*</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li><p>进入个人主文件夹，检查各种 <code>local</code>、<code>lib</code>、<code>include</code> 文件夹，删除名字含有<code>node</code>和<code>node_modules</code>的文件</p>
</li>
<li><p>进入 /usr/local/bin 删除 node 执行文件</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/bin</span><br><span class="line">sudo <span class="built_in">rm</span> -rf /usr/local/bin/npm</span><br><span class="line">sudo <span class="built_in">rm</span> -rf /usr/local/bin/node</span><br><span class="line"><span class="built_in">ls</span> -las 仔细查看，全局安装的npm包一般会在这个目录下创建软连接，发现就删除</span><br></pre></td></tr></table></figure>
</li>
<li><p>其他清理工作</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">rm</span> -rf /usr/local/share/man/man1/node.1</span><br><span class="line">sudo <span class="built_in">rm</span> -rf /usr/local/lib/dtrace/node.d</span><br><span class="line">sudo <span class="built_in">rm</span> -rf ~/.npm</span><br></pre></td></tr></table></figure>
<p>比较繁琐的操作是 <code>/usr/local/lib</code> 和 <code>/usr/local/bin</code> 这两个文件夹，全局安装的npm包会有很多软连接，需要仔细删除。</p>
</li>
</ul>
<blockquote>
<p>原文地址:<a href="https://segmentfault.com/a/1190000007445643">mac 卸载 node</a></p>
</blockquote>
]]></content>
      <categories>
        <category>MacOS</category>
      </categories>
      <tags>
        <tag>技巧</tag>
        <tag>npm</tag>
        <tag>node</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS M1 docker 安装 Redis</title>
    <url>/post/61de956b.html</url>
    <content><![CDATA[<h3 id="查看docker版本"><a href="#查看docker版本" class="headerlink" title="查看docker版本"></a>查看docker版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 网页查看版本</span></span><br><span class="line"><span class="comment"># https://hub.docker.com/search?q=redis&amp;type=image</span></span><br><span class="line"></span><br><span class="line">docker search postgresql</span><br></pre></td></tr></table></figure>
<h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 6.2.6 可以换成你想要的版本号， 不填表示最新版本</span></span><br><span class="line">docker pull redis:6.2.6</span><br></pre></td></tr></table></figure>

<h3 id="新建redis本地配置"><a href="#新建redis本地配置" class="headerlink" title="新建redis本地配置"></a>新建redis本地配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 允许远程连接</span></span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line"><span class="comment"># 端口</span></span><br><span class="line">port 6379</span><br><span class="line"><span class="comment"># 开启AOP持久</span></span><br><span class="line">appendonly <span class="built_in">yes</span></span><br></pre></td></tr></table></figure>


<h3 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># --name 名称</span></span><br><span class="line"><span class="comment"># -v 数据库本地挂载目录</span></span><br><span class="line"><span class="comment"># 6.2.6 替换为您下载的版本， 最新版本不填</span></span><br><span class="line"><span class="comment"># 注意！！！ 引入配置文件，各版本docker 中配置文件位置可能不一样 。6.2.6 为 &#x27;/etc/redis.conf&#x27;</span></span><br><span class="line"></span><br><span class="line">docker run --name redis6.2.6 \</span><br><span class="line">-v /Users/liuqi/home/dev/hock/docker_volumes/redis/data:/data \</span><br><span class="line">-v /Users/liuqi/home/dev/hock/docker_volumes/redis/conf/redis.conf:/etc/redis.conf \</span><br><span class="line">-p 6379:6379 \</span><br><span class="line">-d redis:6.2.6 redis-server /etc/redis.conf</span><br></pre></td></tr></table></figure>
<h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>默认登录没有用户名、密码。如需要密码请在<code>redis.conf</code> 中配置</p>
]]></content>
      <categories>
        <category>MacOS</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS M1 docker安装 PostgreSql</title>
    <url>/post/b87556ef.html</url>
    <content><![CDATA[<h3 id="查看docker版本"><a href="#查看docker版本" class="headerlink" title="查看docker版本"></a>查看docker版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 网页查看版本</span></span><br><span class="line"><span class="comment"># https://hub.docker.com/search?q=postgresql&amp;type=image</span></span><br><span class="line"></span><br><span class="line">docker search postgresql</span><br></pre></td></tr></table></figure>
<h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 12.9 可以换成你想要的版本号， 不填表示最新版本</span></span><br><span class="line">docker pull postgres:12.9</span><br></pre></td></tr></table></figure>
<h3 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># --name 名称</span></span><br><span class="line"><span class="comment"># -e TZ=PRC 时区-中国</span></span><br><span class="line"><span class="comment"># -p 端口</span></span><br><span class="line"><span class="comment"># -v 数据库本地挂载目录</span></span><br><span class="line">docker run --name pg_test -e POSTGRES_PASSWORD=123456 -e TZ=PRC -p 15432:5432 -v /Users/liuqi/home/dev/hock/docker_volumes/pg/data:/var/lib/postgresql/data -d postgres:12.9</span><br></pre></td></tr></table></figure>
<h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>PORT:15432<br>postgres/123456</p>
]]></content>
      <categories>
        <category>MacOS</category>
      </categories>
      <tags>
        <tag>database</tag>
        <tag>PostgreSql</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS M1 docker安装Mysql 5.7</title>
    <url>/post/9d25e51e.html</url>
    <content><![CDATA[<h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装5.7</span></span><br><span class="line">docker pull mysql/mysql-server:5.7  </span><br><span class="line"><span class="comment"># 安装最新  </span></span><br><span class="line">docker pull mysql/mysql-server:latest</span><br></pre></td></tr></table></figure>

<h2 id="下载设置安装mysql5-7"><a href="#下载设置安装mysql5-7" class="headerlink" title="下载设置安装mysql5.7"></a>下载设置安装mysql5.7</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --restart=always --name=mysql --privileged=<span class="literal">true</span> -p 3306:3306 -v /Users/liuqi/home/dev/hock/docker_volumes/mysql5.7:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql/mysql-server:5.7</span><br></pre></td></tr></table></figure>

<h2 id="进入容器病修改配置"><a href="#进入容器病修改配置" class="headerlink" title="进入容器病修改配置"></a>进入容器病修改配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mysql bash</span><br><span class="line"></span><br><span class="line">mysql -uroot -p 123456</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改本地root 密码</span></span><br><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新用户，可供外部访问</span></span><br><span class="line">CREATE USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"><span class="comment"># 授权</span></span><br><span class="line">GRANT ALL ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改外部连接root 用户密码</span></span><br><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="arm64-警告"><a href="#arm64-警告" class="headerlink" title="arm64 警告"></a>arm64 警告</h2><p><code>image may have poor performance,or fail, if run via emulation</code><br>在模拟环境下，性能降低, 如果不喜欢，装最新版即可。</p>
]]></content>
      <categories>
        <category>MacOS</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql 5.7 sql_mode=only_full_group_by</title>
    <url>/post/4ba979c5.html</url>
    <content><![CDATA[<p>Mysql 5.7 以上group by向下兼容时容易出现如下错误</p>
<blockquote>
<p>1055 - Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column ‘csc_risk.a.DefaultDate’ which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by, Time: 0.035000s </p>
</blockquote>
<p>原因是：MySQL5.7版本默认设置了 <strong>sql_mode = only_full_group_by</strong> 属性，导致报错。</p>
<span id="more"></span>

<h2 id="only-full-group-by-说明"><a href="#only-full-group-by-说明" class="headerlink" title="only_full_group_by 说明"></a>only_full_group_by 说明</h2><p>mysql5.7.x版本，默认是开启了 <strong>only_full_group_by</strong> 模式的，一旦开启 <strong>only_full_group_by</strong> ，group by 将变成和 distinct 一样，只能获取受到其影响的字段信息，无法和其他未受其影响的字段共存，这样 group by 的功能将变得十分狭窄了。 </p>
<p>但是 <strong>only_full_group_by</strong> 模式还是开启比较好。因为在 mysql 中有一个函数： any_value(field) 允许，非分组字段的出现（和关闭 only_full_group_by 模式有相同效果）。并且也能规范<strong>我们写的sql语句</strong></p>
<h2 id="关闭-only-full-group-by"><a href="#关闭-only-full-group-by" class="headerlink" title="关闭 only_full_group_by"></a>关闭 only_full_group_by</h2><ol>
<li>查看 sql_mode</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT @@sql_mode;</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>去掉ONLY_FULL_GROUP_BY，重新设置值。【新建数据库有效】</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SET @@global.sql_mode =<span class="string">&#x27;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>上面是改变了全局sql_mode，对于已存在的数据库，则需要在对应的数据下执行</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SET sql_mode =<span class="string">&#x27;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&#x27;</span>;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Common</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenCV 3.4 读懂 CvType ，类型构造说明 JAVA</title>
    <url>/post/adae42c4.html</url>
    <content><![CDATA[<p>CvType 可以说是 OpenCV 图像处理的基础常量参数。但是面对 CV_8U1C 、CV_8U2C、CV_8U3C、CV_8U4C 在初学阶段可以说一脸懵，他们代表的是什么呢？关于这些参数名门的来历，个人觉得有点 <a href="https://baike.baidu.com/item/%E5%8C%88%E7%89%99%E5%88%A9%E5%91%BD%E5%90%8D%E6%B3%95/7632397?fr=aladdin">[匈牙利命名法]</a> 的影子。本文就主要说明这些字母的含义</p>
<span id="more"></span>



<h2 id="什么是图像的通道？"><a href="#什么是图像的通道？" class="headerlink" title="什么是图像的通道？"></a>什么是图像的通道？</h2><p>在了解 CvType 这个常量类之前，需要先知道图像的通道是什么。OpenCV 中，图像可以分别为1，2，3，4 通道。</p>
<ul>
<li>1 通道为灰度图；</li>
<li>2 通道的图像是RGB555和RGB565。2通道图在程序处理中会用到，如傅里叶变换，可能会用到，一个通道为实数，一个通道为虚数，主要是编程方便。RGB555是16位的，2个字节，5+6+5，第一字节的前5位是R，后三位+第二字节是G，第二字节后5位是B，可见对原图像进行压缩了</li>
<li>3 通道为彩色图（RGB）；</li>
<li>4 通道为 RGBA ，是RGB加上一个A通道，也叫alpha通道，表示透明度，PNG图像是一种典型的4通道图像。alpha通道可以赋值0到1，或者0到255，表示透明到不透明</li>
</ul>
<p><strong>大部分使用场景下，常使用的是1，3，4通道； 2通道不常见</strong></p>
<h2 id="CvType-类型常量组合规则"><a href="#CvType-类型常量组合规则" class="headerlink" title="CvType 类型常量组合规则"></a>CvType 类型常量组合规则</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CV_[bite](U|S|F)C[channels]</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>bite</strong> : 比特数，位数。 有 8bite，16bite，32bite，64bite,对应在 Mat 中，每个像素的所占的空间大小，8位即 CV_8</p>
</li>
<li><p><strong>U|S|F</strong> ： </p>
<ul>
<li>U : unsigned int , 无符号整形</li>
<li>S : signed int , 有符号整形</li>
<li>F : float , 单精度浮点型,float类型本身即有符号</li>
</ul>
<blockquote>
<p>这里的有符号、无符号是针对图像二进制编码来讲的。我在写的过程中大多数情况下都是使用的无符号，即 CV_8U ,CV_16U，当有计算时可能会介入有符号（存在负数），没学过 C++，对底层也一知半解，望高手解答。</p>
</blockquote>
</li>
<li><p>**C[channels]**：图像的通道数</p>
</li>
</ul>
<p>通过上边的解释，我想您已经明白了个大概，比如 CV_8UC3 即 8位无符号的3通道（RGB 彩色）图像</p>
<h2 id="CvType-各-Bite-下可用参数说明"><a href="#CvType-各-Bite-下可用参数说明" class="headerlink" title="CvType 各 Bite 下可用参数说明"></a>CvType 各 Bite 下可用参数说明</h2><ul>
<li>8U  <ul>
<li>说明：无符号的8位图</li>
<li>值：CV_8UC1,CV_8UC2,CV_8UC3,CV_8UC4</li>
<li>通道取值范围：0~255</li>
</ul>
</li>
<li>8S<ul>
<li>说明：有符号的8位图</li>
<li>值：CV_8SC1,CV_8SC2,CV_8SC3,CV_8SC4</li>
<li>通道取值范围：-128~127</li>
</ul>
</li>
<li>16U<ul>
<li>说明：无符号的16位图</li>
<li>值：CV_16UC1,CV_16UC2,CV_16UC3,CV_16UC4</li>
<li>通道取值范围：0~65535</li>
</ul>
</li>
<li>16S<ul>
<li>说明：有符号的16位图</li>
<li>值：CV_16SC1,CV_16SC2,CV_16SC3,CV_16SC4</li>
<li>通道取值范围：-32768~32767</li>
</ul>
</li>
<li>32S<ul>
<li>说明：无符号的32位图 </li>
<li>值：CV_32SC1,CV_32SC2,CV_32SC3,CV_32SC4</li>
<li>通道取值范围：2147483648~2147483647</li>
</ul>
</li>
<li>32F<ul>
<li>说明：浮点型32位图</li>
<li>值：CV_32FC1,CV_32FC2,CV_32FC3,CV_32FC4</li>
<li>通道取值范围：1.18*(10[-38次方])~3.40*(10[38次方])</li>
</ul>
</li>
<li>64F<ul>
<li>说明：浮点型64位图</li>
<li>值：CV_64FC1,CV_64FC2,CV_64FC3,CV_64FC4</li>
<li>通道取值范围：2.23*(10[-308次方])~1.79*(10[308次方]) </li>
</ul>
</li>
<li>1U<ul>
<li>说明：1位</li>
<li>值：IPL_DEPTH_1U</li>
<li>通道取值范围：0~1</li>
</ul>
</li>
</ul>
<p><a href="http://blog.sina.com.cn/s/blog_662c7859010105za.html">这篇文章对8,16,32,64位下大小取值范围说明很详细</a></p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>OpenCV</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenCV 3.4 Scalar 参数说明，与 CvType 结合使用</title>
    <url>/post/86aa2842.html</url>
    <content><![CDATA[<p>我们在学习OpenCV 时，发现在构造 Mat 时，会有2个关键参数，一个 CvType，一个 Scalar。很多人不明白这2个参数的意思，所以在把别人例子拿来使用或自己写的的时候发现这个参数不知道该怎么填。本文就将 Scalar 参数详细的说明下。</p>
<p>Scalar 是一个配合 CvType 使用的参数，如果你不了解 CvType，可以先看看我写的 <a href="https://35liuqi.com/2018/04/11/OpenCV%203.4%20%E8%AF%BB%E6%87%82%20CvType%20%EF%BC%8C%E7%B1%BB%E5%9E%8B%E6%9E%84%E9%80%A0%E8%AF%B4%E6%98%8E%20JAVA/">OpenCV 3.4 读懂 CvType 类型说明</a> 了解什么是图像通道，CvType 的构造。</p>
<span id="more"></span>

<p><strong>本文下列实例均是 JAVA 代码，其他语言实现类同</strong></p>
<h2 id="Scalar-构造器"><a href="#Scalar-构造器" class="headerlink" title="Scalar 构造器"></a>Scalar 构造器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Scalar</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span>[] val;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Scalar</span><span class="params">(<span class="type">double</span> v0, <span class="type">double</span> v1, <span class="type">double</span> v2, <span class="type">double</span> v3)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = <span class="keyword">new</span> <span class="title class_">double</span>[]&#123;v0, v1, v2, v3&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Scalar</span><span class="params">(<span class="type">double</span> v0, <span class="type">double</span> v1, <span class="type">double</span> v2)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = <span class="keyword">new</span> <span class="title class_">double</span>[]&#123;v0, v1, v2, <span class="number">0.0D</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Scalar</span><span class="params">(<span class="type">double</span> v0, <span class="type">double</span> v1)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = <span class="keyword">new</span> <span class="title class_">double</span>[]&#123;v0, v1, <span class="number">0.0D</span>, <span class="number">0.0D</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Scalar</span><span class="params">(<span class="type">double</span> v0)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = <span class="keyword">new</span> <span class="title class_">double</span>[]&#123;v0, <span class="number">0.0D</span>, <span class="number">0.0D</span>, <span class="number">0.0D</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Scalar</span><span class="params">(<span class="type">double</span>[] vals)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (vals != <span class="literal">null</span> &amp;&amp; vals.length == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.val = (<span class="type">double</span>[])vals.clone();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.val = <span class="keyword">new</span> <span class="title class_">double</span>[<span class="number">4</span>];</span><br><span class="line">            <span class="built_in">this</span>.set(vals);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到有5个构造函数，参数也不复杂，很容易理解。除开 <code>public Scalar(double[] vals) </code> 这个数组入参的构造函数，其他4个构造函数分别是传入1个、2个、3个、4个 double 类型的构造函数，那么这些参数代表什么意思，他的取值范围是什么？</p>
<h2 id="Scalar-参数的含义"><a href="#Scalar-参数的含义" class="headerlink" title="Scalar 参数的含义"></a>Scalar 参数的含义</h2><p>Scalar <strong>一定是与 CvType</strong> 结合使用的，他代表 CvType 中指定通道的值。如果您不了解 CvType，可以先看看我写的 <a href="https://my.oschina.net/u/3767256/blog/1794173">OpenCV 3.4 读懂 CvType 类型说明</a> 了解什么是图像通道，CvType 的构造。</p>
<p>构造说明：</p>
<ol>
<li>构造函数的入参（值）的数量 &lt;= 通道数量 [如果是2通道图像，用4个参数的构造函数，后面2个参数不起作用]</li>
<li>构造函数的入参（值）的数量 &lt; 通道数量 时，未传入值的通道值为0</li>
<li>多通道图像时，入参顺序 new Scalar(B,G,R,alpha)</li>
</ol>
<p>下面来看示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.opencv.core.CvType;</span><br><span class="line"><span class="keyword">import</span> org.opencv.core.Mat;</span><br><span class="line"><span class="keyword">import</span> org.opencv.core.Scalar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.opencv.core.Size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestScalar</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建灰色图像</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createGrayImage</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//选择一个单通道类型 CV_8UC1</span></span><br><span class="line">        <span class="comment">//单通道下 0 为黑，255为白，取中间值 125 ，灰色。</span></span><br><span class="line">        <span class="type">Mat</span> <span class="variable">sourceImage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mat</span>(<span class="number">100</span>,<span class="number">100</span>, CvType.CV_8UC1, <span class="keyword">new</span> <span class="title class_">Scalar</span>(<span class="number">125</span>));</span><br><span class="line">        Imgcodecs.imwrite(<span class="string">&quot;savePath/gary-image.png&quot;</span>,sourceImage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建蓝色图像</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createBlueImage</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//蓝色为彩色图，所以通道类型为3通道，CV_8UC3</span></span><br><span class="line">        <span class="comment">//蓝色是 RGB 中的 B，其RGB值为 R：0  ,  G：0  ,  B：255</span></span><br><span class="line">        <span class="comment">//Scalar 入参顺序为 new Scalar(B,G,R,A)。</span></span><br><span class="line">        <span class="comment">//new Scalar(255) 的意思为 B 通道值为255 ，G、R 值不传递的话，默认为0</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Mat</span> <span class="variable">sourceImage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mat</span>(<span class="number">100</span>,<span class="number">100</span>, CvType.CV_8UC3, <span class="keyword">new</span> <span class="title class_">Scalar</span>(<span class="number">255</span>));</span><br><span class="line">        Imgcodecs.imwrite(<span class="string">&quot;savePath/blue-image.png&quot;</span>,sourceImage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建绿色图像</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createGreenImage</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//绿色为彩色图，所以通道类型为3通道，CV_8UC3</span></span><br><span class="line">        <span class="comment">//绿色是 RGB 中的  G，其RGB值为 R：0  ,  G：255  ,  B：0</span></span><br><span class="line">        <span class="comment">//Scalar 入参顺序为 new Scalar(B,G,R,A)。</span></span><br><span class="line">        <span class="comment">//new Scalar(0,255) 的意思为 B 通道值为0，G通道值为255，R 值不传递的话，默认为0</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Mat</span> <span class="variable">sourceImage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mat</span>(<span class="number">100</span>,<span class="number">100</span>, CvType.CV_8UC3, <span class="keyword">new</span> <span class="title class_">Scalar</span>(<span class="number">0</span>,<span class="number">255</span>));</span><br><span class="line">        Imgcodecs.imwrite(<span class="string">&quot;savePath/green-image.png&quot;</span>,sourceImage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建红色图像</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createRedImage</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//红色为彩色图，所以通道类型为3通道，CV_8UC3</span></span><br><span class="line">        <span class="comment">//红色是 RGB 中的 R，其RGB值为 R：255  ,  G：0  ,  B：0</span></span><br><span class="line">        <span class="comment">//Scalar 入参顺序为 new Scalar(B,G,R,A)。</span></span><br><span class="line">        <span class="comment">//new Scalar(0,0,255) 的意思为 B 通道值为 0，G 通道值为 0，R 通道值为 255</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Mat</span> <span class="variable">sourceImage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mat</span>(<span class="number">100</span>,<span class="number">100</span>, CvType.CV_8UC3, <span class="keyword">new</span> <span class="title class_">Scalar</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>));</span><br><span class="line">        Imgcodecs.imwrite(<span class="string">&quot;savePath/red-image.png&quot;</span>,sourceImage);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建透明图像</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createAlphaImage</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//透明图像为4通道图像，所以通道类型为4通道，CV_8UC4</span></span><br><span class="line">        <span class="comment">//创建一个半透明的红色图像来试试</span></span><br><span class="line">        <span class="comment">//红色是 RGB 中的 R，其RGB值为 R：255  ,  G：0  ,  B：0</span></span><br><span class="line">        <span class="comment">//Scalar 入参顺序为 new Scalar(B,G,R,A)。</span></span><br><span class="line">        <span class="comment">//new Scalar(0,0,255,125) 的意思为 B 通道值为 0，G 通道值为 0，R 通道值为 255，Alpha 通道值为125 （255为不透明，0为全透明会忽略所有的 RGB 颜色）</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Mat</span> <span class="variable">sourceImage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mat</span>(<span class="number">100</span>,<span class="number">100</span>, CvType.CV_8UC4, <span class="keyword">new</span> <span class="title class_">Scalar</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>,<span class="number">125</span>));</span><br><span class="line">        Imgcodecs.imwrite(<span class="string">&quot;savePath/alpha-image.png&quot;</span>,sourceImage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>通过上边的例子，应该已经明白 Scalar 的意思了吧，就是通道的值</strong></p>
<h2 id="Scalar-参数的数据范围"><a href="#Scalar-参数的数据范围" class="headerlink" title="Scalar 参数的数据范围"></a>Scalar 参数的数据范围</h2><p>处理 Alpha 通道值为 0~255 ，其他通道取值范围根据图像的位数（Bite）来决定。可以查看<a href="https://35liuqi.com/2018/04/11/OpenCV%203.4%20%E8%AF%BB%E6%87%82%20CvType%20%EF%BC%8C%E7%B1%BB%E5%9E%8B%E6%9E%84%E9%80%A0%E8%AF%B4%E6%98%8E%20JAVA/">OpenCV 3.4 读懂 CvType 类型说明</a> 了解什么是图像通道，CvType 的构造，后面后各 Bite 下通道的取值范围。</p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>OpenCV</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenCV3 图像膨胀 dilate、腐蚀 erode、提取图像中的条形码 JAVA 实现</title>
    <url>/post/362bdff0.html</url>
    <content><![CDATA[<p>利用近期对 OpenCV 的学习，结合图像的 dilate、erode 用 JAVA 来实现提取图像中的条形码，这样就可以通过识别工具来识别图中的内容。</p>
<span id="more"></span>


<h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> opencv;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> opencv.base.OpenCVStudyBase;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.opencv.core.*;</span><br><span class="line"><span class="keyword">import</span> org.opencv.imgcodecs.Imgcodecs;</span><br><span class="line"><span class="keyword">import</span> org.opencv.imgproc.Imgproc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> : alexliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> : 主要学习&lt;br/&gt;</span></span><br><span class="line"><span class="comment"> * 1. 图像腐蚀&lt;br/&gt;</span></span><br><span class="line"><span class="comment"> * 2. 图像膨胀&lt;br/&gt;</span></span><br><span class="line"><span class="comment"> * 3. 查找条形码案例&lt;br/&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudyTest_8</span> <span class="keyword">extends</span> <span class="title class_">OpenCVStudyBase</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 腐蚀，膨胀都属于形态学滤波。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 数学形态学中，基本的运算有：</span></span><br><span class="line"><span class="comment">     * 二值腐蚀和膨胀</span></span><br><span class="line"><span class="comment">     * 二值开闭运算</span></span><br><span class="line"><span class="comment">     * 骨架抽取</span></span><br><span class="line"><span class="comment">     * 极限腐蚀</span></span><br><span class="line"><span class="comment">     * 灰值腐蚀和膨胀</span></span><br><span class="line"><span class="comment">     * 灰值开闭运算</span></span><br><span class="line"><span class="comment">     * 灰值形态学梯度</span></span><br><span class="line"><span class="comment">     * .....</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 腐蚀，膨胀的主要功能如下：</span></span><br><span class="line"><span class="comment">     * 1. 消除噪声</span></span><br><span class="line"><span class="comment">     * 2. 分割（isolate）出独立的图像元素，在图像中连接（join）相邻的元素</span></span><br><span class="line"><span class="comment">     * 3. 寻找图像中的明显的极大值区域或极小值区域</span></span><br><span class="line"><span class="comment">     * 4. 求出图像的梯度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 注意：</span></span><br><span class="line"><span class="comment">     * 腐蚀和膨胀仅针对`图像高亮`区域进行操作。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">save_dir</span> <span class="operator">=</span> <span class="string">&quot;study-output/study-opencv-8&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 如何创建腐蚀、膨胀操作的核</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *      腐蚀和膨胀均有一个 Mat kernel 参数。这个参数就是腐蚀/膨胀操作的核，它是一个矩阵结构元素（Mat）</span></span><br><span class="line"><span class="comment">     *      OpenCV 在 Imgproc 包中，提供了 getStructuringElement 的函数，来方便创建腐蚀/膨胀的核</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * getStructuringElement 原型方法:</span></span><br><span class="line"><span class="comment">     *      getStructuringElement(int shape, Size ksize, Point anchor)</span></span><br><span class="line"><span class="comment">     *      getStructuringElement(int shape, Size ksize)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *      参数：</span></span><br><span class="line"><span class="comment">     *          shape : Integer 核的结构类型</span></span><br><span class="line"><span class="comment">     *              -- C++ 有四种（多一个用户自定义），其他语言3种</span></span><br><span class="line"><span class="comment">     *              -- MORPH_RECT , 一个矩形结构元素</span></span><br><span class="line"><span class="comment">     *              -- MORPH_ELLIPSE , 一个椭圆结构元素</span></span><br><span class="line"><span class="comment">     *              -- MORPH_CROSS , 一个十字形结构元素</span></span><br><span class="line"><span class="comment">     *          ksize : Size 结构元素的大小</span></span><br><span class="line"><span class="comment">     *          anchor : Point 元素中瞄点的位置。默认值 (-1,-1)表示在元素的中心位置。注意：只有十字形结构元素依赖瞄点，其他形状类型仅仅影响结果的偏移。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *      原文：</span></span><br><span class="line"><span class="comment">     *          shape – Element shape that could be one of the following:</span></span><br><span class="line"><span class="comment">     *              MORPH_RECT - a rectangular structuring element</span></span><br><span class="line"><span class="comment">     *              MORPH_ELLIPSE - an elliptic structuring element, that is, a filled ellipse inscribed into the rectangle Rect(0, 0, esize.width, 0.esize.height)</span></span><br><span class="line"><span class="comment">     *              MORPH_CROSS - a cross-shaped structuring element</span></span><br><span class="line"><span class="comment">     *              CV_SHAPE_CUSTOM - custom structuring element (OpenCV 1.x API)</span></span><br><span class="line"><span class="comment">     *          ksize – Size of the structuring element.</span></span><br><span class="line"><span class="comment">     *          anchor – Anchor position within the element. The default value  (-1, -1) means that the anchor is at the center.</span></span><br><span class="line"><span class="comment">     *              Note that only the shape of a cross-shaped element depends on the anchor position.</span></span><br><span class="line"><span class="comment">     *              In other cases the anchor just regulates how much the result of the morphological operation is shifted.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * ------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 腐蚀</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 1. 腐蚀说明：</span></span><br><span class="line"><span class="comment">     *      图像的一部分区域与指定的核进行卷积，求核的最`小`值并赋值给指定区域。</span></span><br><span class="line"><span class="comment">     *      腐蚀可以理解为图像中`高亮区域`的&#x27;领域缩小&#x27;。</span></span><br><span class="line"><span class="comment">     *      意思是高亮部分会被不是高亮部分的像素侵蚀掉，使高亮部分越来越少。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 2. 腐蚀函数(erode)</span></span><br><span class="line"><span class="comment">     *      erode 有3个原型方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *      erode(Mat src, Mat dst, Mat kernel, Point anchor, int iterations, int borderType, Scalar borderValue)</span></span><br><span class="line"><span class="comment">     *      erode(Mat src, Mat dst, Mat kernel, Point anchor, int iterations)</span></span><br><span class="line"><span class="comment">     *      erode(Mat src, Mat dst, Mat kernel)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *      参数：</span></span><br><span class="line"><span class="comment">     *          src : Mat 输入图像 对通道数无要求，但是 depth 必须是 CV_8U、CV_16U、CV_16S、CV_32F、CV_64F 之一</span></span><br><span class="line"><span class="comment">     *          dst : Mat 输出图像，与原图以上的尺寸与类型</span></span><br><span class="line"><span class="comment">     *          kernel : Mat 膨胀操作的核 ， null 时表示以当前像素为中心 3x3 为单位的核</span></span><br><span class="line"><span class="comment">     *                  一般使用函数 Imgproc.getStructuringElement 来创建核。该函数会返回指定形状或尺寸的矩阵结构元素。</span></span><br><span class="line"><span class="comment">     *          anchor : Point 瞄点。根据 kernel（核），处理每个核的某个点。 (-1,-1)代表取这个核的中心位置。</span></span><br><span class="line"><span class="comment">     *          interations : Integer 迭代 dilate(膨胀)的次数，默认 1 。。</span></span><br><span class="line"><span class="comment">     *          borderType : Integer 推断图像外部像素的某种边界模式，一般不需要这个参数。</span></span><br><span class="line"><span class="comment">     *          borderValue : Scalar 当 borderType 值为常数时，区域的颜色一般不用管，</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *          腐蚀，一般不需要borderType，borderValue，均有默认值。如果需要使用，可参考官网获取更多信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * ------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图像腐蚀处理</span></span><br><span class="line"><span class="comment">     * 不做任何处理的图片</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testErodeNomal</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Mat</span> <span class="variable">sourceImage</span> <span class="operator">=</span> Imgcodecs.imread(p_test_file_path + <span class="string">&quot;/shufa.png&quot;</span>);</span><br><span class="line">        <span class="comment">//Mat sourceImage = Imgcodecs.imread(test_file_path + &quot;/5cent.jpg&quot;,Imgcodecs.CV_LOAD_IMAGE_GRAYSCALE);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// size 越小，腐蚀的单位越小，图片越接近原图</span></span><br><span class="line">        <span class="type">Mat</span> <span class="variable">structImage</span> <span class="operator">=</span> Imgproc.getStructuringElement(Imgproc.MORPH_RECT,<span class="keyword">new</span> <span class="title class_">Size</span>(<span class="number">30</span>,<span class="number">30</span>));</span><br><span class="line">        <span class="type">Mat</span> <span class="variable">outImage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mat</span>();</span><br><span class="line">        <span class="comment">//开始腐蚀</span></span><br><span class="line">        Imgproc.erode(sourceImage,outImage,structImage);</span><br><span class="line">        <span class="built_in">this</span>.saveImage(<span class="built_in">this</span>.save_dir + <span class="string">&quot;/image_process_erode_nomal.png&quot;</span>,outImage);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图像腐蚀处理</span></span><br><span class="line"><span class="comment">     * 灰度处理的图片</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testErodeGray</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 由于shufa.png  背景为白色，字体为黑色，在灰度的0-255显示范围，看不出变化</span></span><br><span class="line">        <span class="comment">// 所以我们换一个背景图不是白色的。</span></span><br><span class="line">        <span class="type">Mat</span> <span class="variable">sourceImage</span> <span class="operator">=</span> Imgcodecs.imread(p_test_file_path + <span class="string">&quot;/shufa-1.jpg&quot;</span>,Imgcodecs.CV_LOAD_IMAGE_GRAYSCALE);</span><br><span class="line"></span><br><span class="line">        <span class="type">Mat</span> <span class="variable">structImage</span> <span class="operator">=</span> Imgproc.getStructuringElement(Imgproc.MORPH_ELLIPSE,<span class="keyword">new</span> <span class="title class_">Size</span>(<span class="number">30</span>,<span class="number">30</span>));</span><br><span class="line">        <span class="type">Mat</span> <span class="variable">outImage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mat</span>();</span><br><span class="line"></span><br><span class="line">        Imgproc.erode(sourceImage,outImage,structImage);</span><br><span class="line">        <span class="built_in">this</span>.saveImage(<span class="built_in">this</span>.save_dir + <span class="string">&quot;/image_process_erode_gray.png&quot;</span>,outImage);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图像腐蚀处理</span></span><br><span class="line"><span class="comment">     * 二值化处理的图片</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testErodeThreshold</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Mat</span> <span class="variable">sourceImage</span> <span class="operator">=</span> Imgcodecs.imread(<span class="built_in">this</span>.p_test_file_path + <span class="string">&quot;/shufa.png&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//二值化处理   cv_8uc1 8位单通道格式</span></span><br><span class="line">        <span class="type">Mat</span> <span class="variable">binaryMat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mat</span>(sourceImage.height(), sourceImage.width(), CvType.CV_8UC1);</span><br><span class="line">        Imgproc.threshold(sourceImage, binaryMat,<span class="number">100</span>, <span class="number">200</span>, Imgproc.THRESH_BINARY);</span><br><span class="line"></span><br><span class="line">        <span class="type">Mat</span> <span class="variable">outImage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mat</span>();</span><br><span class="line">        <span class="comment">//图像腐蚀</span></span><br><span class="line">        <span class="type">Mat</span> <span class="variable">structImage</span> <span class="operator">=</span> Imgproc.getStructuringElement(Imgproc.MORPH_RECT, <span class="keyword">new</span> <span class="title class_">Size</span>(<span class="number">30</span>,<span class="number">30</span>));</span><br><span class="line">        Imgproc.erode(binaryMat, outImage, structImage);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.saveImage(<span class="built_in">this</span>.save_dir + <span class="string">&quot;/image_process_erode_threshold.png&quot;</span>,outImage);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * ------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 膨胀</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 1. 膨胀说明：</span></span><br><span class="line"><span class="comment">     *      图像的一部分区域与指定的核进行卷积，求核的最`大`值并赋值给指定区域。</span></span><br><span class="line"><span class="comment">     *      膨胀可以理解为图像中`高亮区域`的&#x27;领域扩大&#x27;。</span></span><br><span class="line"><span class="comment">     *      意思是高亮部分会侵蚀不是高亮的部分，使高亮部分越来越多。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 2. 膨胀函数(dilate)</span></span><br><span class="line"><span class="comment">     *      dilate 有3个原型方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *      dilate(Mat src, Mat dst, Mat kernel, Point anchor, int iterations, int borderType, Scalar borderValue)</span></span><br><span class="line"><span class="comment">     *      dilate(Mat src, Mat dst, Mat kernel, Point anchor, int iterations)</span></span><br><span class="line"><span class="comment">     *      dilate(Mat src, Mat dst, Mat kernel)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *      参数：</span></span><br><span class="line"><span class="comment">     *          src : Mat 输入图像 对通道数无要求，但是 depth 必须是 CV_8U、CV_16U、CV_16S、CV_32F、CV_64F 之一</span></span><br><span class="line"><span class="comment">     *          dst : Mat 输出图像，与原图以上的尺寸与类型</span></span><br><span class="line"><span class="comment">     *          kernel : Mat 膨胀操作的核 ， null 时表示以当前像素为中心 3x3 为单位的核</span></span><br><span class="line"><span class="comment">     *                  一般使用函数 Imgproc.getStructuringElement 来创建核。该函数会返回指定形状或尺寸的矩阵结构元素。</span></span><br><span class="line"><span class="comment">     *          anchor : Point 瞄点。根据 kernel（核），处理每个核的某个点。 (-1,-1)代表取这个核的中心位置。</span></span><br><span class="line"><span class="comment">     *          interations : Integer 迭代 dilate(膨胀)的次数，默认 1 。。</span></span><br><span class="line"><span class="comment">     *          borderType : Integer 推断图像外部像素的某种边界模式，一般不需要这个参数。</span></span><br><span class="line"><span class="comment">     *          borderValue : Scalar 当 borderType 值为常数时，区域的颜色一般不用管，</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *          膨胀，一般不需要borderType，borderValue，均有默认值。如果需要使用，可参考官网获取更多信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * ------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图像膨胀处理</span></span><br><span class="line"><span class="comment">     * 不做任何处理的图片</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDilateNomal</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Mat</span> <span class="variable">sourceImage</span> <span class="operator">=</span> Imgcodecs.imread(<span class="built_in">this</span>.p_test_file_path + <span class="string">&quot;/shufa.png&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Mat</span> <span class="variable">outImage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mat</span>();</span><br><span class="line">        <span class="comment">//图像腐蚀</span></span><br><span class="line">        <span class="type">Mat</span> <span class="variable">structImage</span> <span class="operator">=</span> Imgproc.getStructuringElement(Imgproc.MORPH_RECT, <span class="keyword">new</span> <span class="title class_">Size</span>(<span class="number">30</span>,<span class="number">30</span>));</span><br><span class="line">        Imgproc.dilate(sourceImage, outImage, structImage);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.saveImage(<span class="built_in">this</span>.save_dir + <span class="string">&quot;/image_process_dilate_nomal.png&quot;</span>,outImage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图像膨胀处理</span></span><br><span class="line"><span class="comment">     * 灰度处理的图片</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDilateGray</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Mat</span> <span class="variable">sourceImage</span> <span class="operator">=</span> Imgcodecs.imread(<span class="built_in">this</span>.p_test_file_path + <span class="string">&quot;/shufa-1.jpg&quot;</span>,Imgcodecs.CV_LOAD_IMAGE_GRAYSCALE);</span><br><span class="line"></span><br><span class="line">        <span class="type">Mat</span> <span class="variable">outImage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mat</span>();</span><br><span class="line">        <span class="comment">//图像腐蚀</span></span><br><span class="line">        <span class="type">Mat</span> <span class="variable">structImage</span> <span class="operator">=</span> Imgproc.getStructuringElement(Imgproc.MORPH_RECT, <span class="keyword">new</span> <span class="title class_">Size</span>(<span class="number">30</span>,<span class="number">30</span>));</span><br><span class="line">        Imgproc.dilate(sourceImage, outImage, structImage);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.saveImage(<span class="built_in">this</span>.save_dir + <span class="string">&quot;/image_process_dilate_gray.png&quot;</span>,outImage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图像膨胀处理</span></span><br><span class="line"><span class="comment">     * 二值化处理的图片</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDilateThreshold</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Mat</span> <span class="variable">sourceImage</span> <span class="operator">=</span> Imgcodecs.imread(<span class="built_in">this</span>.p_test_file_path + <span class="string">&quot;/shufa.png&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//二值化处理   cv_8uc1 8位单通道格式</span></span><br><span class="line">        <span class="type">Mat</span> <span class="variable">binaryMat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mat</span>(sourceImage.height(), sourceImage.width(), CvType.CV_8UC1);</span><br><span class="line">        Imgproc.threshold(sourceImage, binaryMat,<span class="number">100</span>, <span class="number">200</span>, Imgproc.THRESH_BINARY);</span><br><span class="line"></span><br><span class="line">        <span class="type">Mat</span> <span class="variable">outImage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mat</span>();</span><br><span class="line">        <span class="comment">//图像腐蚀</span></span><br><span class="line">        <span class="type">Mat</span> <span class="variable">structImage</span> <span class="operator">=</span> Imgproc.getStructuringElement(Imgproc.MORPH_RECT, <span class="keyword">new</span> <span class="title class_">Size</span>(<span class="number">30</span>,<span class="number">30</span>));</span><br><span class="line">        Imgproc.dilate(binaryMat, outImage, structImage);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.saveImage(<span class="built_in">this</span>.save_dir + <span class="string">&quot;/image_process_dilate_threshold.png&quot;</span>,outImage);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找条形码案例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 步骤：</span></span><br><span class="line"><span class="comment">     * 1. 读取灰值图</span></span><br><span class="line"><span class="comment">     * 2. 图像模糊，降噪</span></span><br><span class="line"><span class="comment">     * 3. 图像二值化</span></span><br><span class="line"><span class="comment">     * 4. 腐蚀图像，通过腐蚀过滤掉不是竖线的的区域</span></span><br><span class="line"><span class="comment">     * 5. 膨胀图像，将腐蚀过的线条数据通过膨胀放大</span></span><br><span class="line"><span class="comment">     * 6. 继续用矩形核膨胀图像，使线条链接成矩形图像</span></span><br><span class="line"><span class="comment">     * 7. 查找轮廓</span></span><br><span class="line"><span class="comment">     * 8. 对比所有轮廓，过滤掉宽度小于200，偏斜角&lt;2度的矩形图像</span></span><br><span class="line"><span class="comment">     * 9. 找到图像并截取</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindLineCode</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取灰值图</span></span><br><span class="line">        <span class="type">Mat</span> <span class="variable">sourceImage</span> <span class="operator">=</span> Imgcodecs.imread(<span class="built_in">this</span>.p_test_file_path + <span class="string">&quot;/tiaoma.png&quot;</span>,Imgcodecs.CV_LOAD_IMAGE_GRAYSCALE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//图像高斯模糊</span></span><br><span class="line">        <span class="type">Mat</span> <span class="variable">gsMat</span> <span class="operator">=</span> Mat.ones(sourceImage.size(),sourceImage.type());</span><br><span class="line">        Imgproc.GaussianBlur(sourceImage,gsMat,<span class="keyword">new</span> <span class="title class_">Size</span>(<span class="number">5</span>,<span class="number">5</span>),<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">this</span>.saveImage(<span class="built_in">this</span>.save_dir + <span class="string">&quot;/image_process_dilate_tiaoma-1.png&quot;</span>,gsMat);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//图像二值化，adaptiveThreshold 后面再二值化的专题里讲解</span></span><br><span class="line">        <span class="type">Mat</span> <span class="variable">thresh_image</span> <span class="operator">=</span> Mat.ones(sourceImage.size(),sourceImage.type());</span><br><span class="line">        <span class="comment">// C 负数，取反色，超过阈值的为黑色，其他为白色</span></span><br><span class="line">        Imgproc.adaptiveThreshold(gsMat, thresh_image,<span class="number">255</span>, Imgproc.ADAPTIVE_THRESH_MEAN_C, Imgproc.THRESH_BINARY,<span class="number">7</span>,-<span class="number">2</span>);</span><br><span class="line">        <span class="built_in">this</span>.saveImage(<span class="built_in">this</span>.save_dir + <span class="string">&quot;/image_process_dilate_tiaoma-2.png&quot;</span>,thresh_image);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建输出图像，后续的操作都是这个图像</span></span><br><span class="line">        <span class="type">Mat</span> <span class="variable">outImage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mat</span>();</span><br><span class="line"></span><br><span class="line">         <span class="comment">/*</span></span><br><span class="line"><span class="comment">          * 图像腐蚀操作</span></span><br><span class="line"><span class="comment">          *</span></span><br><span class="line"><span class="comment">          * width=2 ，height=20 在腐蚀的时候，排除大多数细的垂直线。</span></span><br><span class="line"><span class="comment">          * 这个参数不易设置过大，可以通过多次腐蚀来达到排除的效果。</span></span><br><span class="line"><span class="comment">          *</span></span><br><span class="line"><span class="comment">          * ----------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">          * 注意 width、height 需根据图像的大小来设置。</span></span><br><span class="line"><span class="comment">          *</span></span><br><span class="line"><span class="comment">          * 比如我这里的示例图片大小是 1271(width)x648(height)。 我通过比较20是比较理想的值。</span></span><br><span class="line"><span class="comment">          * 但是20 并比适用比示例图小或大的图像。所以在设置这个参数前，需要根据图像大小来调整。</span></span><br><span class="line"><span class="comment">          *</span></span><br><span class="line"><span class="comment">          * &amp;&amp; 这个值没有固定、动态的大小，不要期望自动设置，除非接入 AI 来学习。 &amp;&amp;</span></span><br><span class="line"><span class="comment">          *</span></span><br><span class="line"><span class="comment">          * 但是我们加入到自己工程的业务里，我们处理的图片通常都是固定的几个图像大小</span></span><br><span class="line"><span class="comment">          *</span></span><br><span class="line"><span class="comment">          * 比如摄像头获取图像，可以指定 500x500</span></span><br><span class="line"><span class="comment">          * 比如扫描仪获取图像，可以指定 KPI 大小，那么获取到的同等材质（如 A4大小）的数码图片大小也是一样的。</span></span><br><span class="line"><span class="comment">          * 比如数码照片，在不同模式下照片大小是一致的，可以根据图片信息分类。</span></span><br><span class="line"><span class="comment">          *</span></span><br><span class="line"><span class="comment">          * 所以，自己根据自己业务经常处理的图片来设置一个比例参数 ，通过 sourceImage.heigth()*xParam 来获取这个参数即可。</span></span><br><span class="line"><span class="comment">          * ----------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">        <span class="type">Mat</span> <span class="variable">structImage</span> <span class="operator">=</span> Imgproc.getStructuringElement(Imgproc.MORPH_RECT, <span class="keyword">new</span> <span class="title class_">Size</span>(<span class="number">2</span>,<span class="number">20</span>));</span><br><span class="line">        Imgproc.erode(thresh_image, outImage, structImage,<span class="keyword">new</span> <span class="title class_">Point</span>(-<span class="number">1</span>,-<span class="number">1</span>),<span class="number">3</span>);  <span class="comment">//腐蚀了3次</span></span><br><span class="line">        <span class="built_in">this</span>.saveImage(<span class="built_in">this</span>.save_dir + <span class="string">&quot;/image_process_dilate_tiaoma-3.png&quot;</span>,outImage);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在用腐蚀的图像，进行膨胀，将线条加粗</span></span><br><span class="line">        Imgproc.dilate(outImage, outImage, structImage,<span class="keyword">new</span> <span class="title class_">Point</span>(-<span class="number">1</span>,-<span class="number">1</span>),<span class="number">3</span>);     <span class="comment">// 这里同样进行了3次膨胀</span></span><br><span class="line">        <span class="built_in">this</span>.saveImage(<span class="built_in">this</span>.save_dir + <span class="string">&quot;/image_process_dilate_tiaoma-4.png&quot;</span>,outImage);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 这里我划定了一个10x5 的矩形整列。来将剩余的线条通过膨胀连成区域。</span></span><br><span class="line"><span class="comment">         * 范围同样不宜过大或过小。</span></span><br><span class="line"><span class="comment">         * 过大：膨胀区域增大，最终结果图像干扰太多</span></span><br><span class="line"><span class="comment">         * 过小：膨胀区域减少，可满足的条件过多，造成不容易连成一个整理区域。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 再次膨胀，使其连成区域</span></span><br><span class="line">        structImage = Imgproc.getStructuringElement(Imgproc.MORPH_RECT, <span class="keyword">new</span> <span class="title class_">Size</span>(<span class="number">10</span>,<span class="number">5</span>));</span><br><span class="line">        Imgproc.dilate(outImage, outImage, structImage,<span class="keyword">new</span> <span class="title class_">Point</span>(-<span class="number">1</span>,-<span class="number">1</span>),<span class="number">3</span>);</span><br><span class="line">        <span class="built_in">this</span>.saveImage(<span class="built_in">this</span>.save_dir + <span class="string">&quot;/image_process_dilate_tiaoma-5.png&quot;</span>,outImage);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * findContours 找轮廓</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 原型方法：</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * findContours(Mat image, List&lt;MatOfPoint&gt; contours, Mat hierarchy, int mode, int method, Point offset)</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * image : Mat 是输入图像，图像的格式是8位单通道的图像，并且被解析为二值图像（即图中的所有非零像素之间都是相等的）。</span></span><br><span class="line"><span class="comment">         * coutours : List&lt;MatOfPoint&gt; 输出的轮廓数组，所有找到的轮廓都会放在这个数组中。MatOfPoint代表这个对象存储了轮廓的`点`数据</span></span><br><span class="line"><span class="comment">         * hierarchy : Mat 这个参数可以指定，也可以不指定。</span></span><br><span class="line"><span class="comment">         *              如果指定的话，输出hierarchy，将会描述输出轮廓树的结构信息。</span></span><br><span class="line"><span class="comment">         *              0号元素表示下一个轮廓（同一层级）；</span></span><br><span class="line"><span class="comment">         *              1号元素表示前一个轮廓（同一层级）；</span></span><br><span class="line"><span class="comment">         *              2号元素表示第一个子轮廓（下一层级）；</span></span><br><span class="line"><span class="comment">         *              3号元素表示父轮廓（上一层级）</span></span><br><span class="line"><span class="comment">         * mode : Integer 轮廓的模式，将会告诉OpenCV你想用何种方式来对轮廓进行提取，有四个可选的值：</span></span><br><span class="line"><span class="comment">         *      CV_RETR_EXTERNAL （0）：表示只提取最外面的轮廓；</span></span><br><span class="line"><span class="comment">         *      CV_RETR_LIST （1）：表示提取所有轮廓并将其放入列表；</span></span><br><span class="line"><span class="comment">         *      CV_RETR_CCOMP （2）:表示提取所有轮廓并将组织成一个两层结构，其中顶层轮廓是外部轮廓，第二层轮廓是“洞”的轮廓；</span></span><br><span class="line"><span class="comment">         *      CV_RETR_TREE （3）：表示提取所有轮廓并组织成轮廓嵌套的完整层级结构。</span></span><br><span class="line"><span class="comment">         * method : Integer 轮廓如何呈现的方法，有三种可选的方法：</span></span><br><span class="line"><span class="comment">         *      CV_CHAIN_APPROX_NONE （1）：将轮廓中的所有点的编码转换成点；</span></span><br><span class="line"><span class="comment">         *      CV_CHAIN_APPROX_SIMPLE （2）：压缩水平、垂直和对角直线段，仅保留它们的端点；</span></span><br><span class="line"><span class="comment">         *      CV_CHAIN_APPROX_TC89_L1  （3）or CV_CHAIN_APPROX_TC89_KCOS（4）：应用Teh-Chin链近似算法中的一种风格</span></span><br><span class="line"><span class="comment">         * offset : Point 可选，如果指定了点偏移，那么返回的轮廓中的所有点均作指定量的偏移</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        List&lt;MatOfPoint&gt; contours = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;MatOfPoint&gt;();</span><br><span class="line">        <span class="type">Mat</span> <span class="variable">hierarchy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mat</span>();</span><br><span class="line">        Imgproc.findContours(outImage,contours,hierarchy, Imgproc.RETR_EXTERNAL, Imgproc.CHAIN_APPROX_SIMPLE,<span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据轮廓可以找到的形状数组</span></span><br><span class="line">        <span class="comment">// Rect[] boundRect = new Rect[contours.size()];</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 循环找到的所有轮廓</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; contours.size();i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将轮廓保存为区域</span></span><br><span class="line">            <span class="comment">// boundRect[i] = Imgproc.boundingRect(contours.get(i));</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// System.out.println(boundRect[i].tl());</span></span><br><span class="line">            <span class="comment">// System.out.println(boundRect[i].br());</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取轮廓内，最小外包矩形</span></span><br><span class="line">            <span class="type">RotatedRect</span> <span class="variable">min</span> <span class="operator">=</span> Imgproc.minAreaRect(<span class="keyword">new</span> <span class="title class_">MatOfPoint2f</span>(contours.get(i).toArray()));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//偏转角度</span></span><br><span class="line">            <span class="keyword">if</span>(min.angle &lt; <span class="number">2</span>)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//获取一个矩形</span></span><br><span class="line">                <span class="type">Rect</span> <span class="variable">minRect</span> <span class="operator">=</span> min.boundingRect();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//将宽度&lt;200的排除</span></span><br><span class="line">                <span class="keyword">if</span>( ( minRect.br().x - minRect.tl().x ) &gt; <span class="number">200</span> )&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//截取</span></span><br><span class="line">                    <span class="type">Mat</span> <span class="variable">code</span> <span class="operator">=</span> sourceImage.submat(minRect);</span><br><span class="line">                    <span class="built_in">this</span>.saveImage(<span class="built_in">this</span>.save_dir + <span class="string">&quot;/image_process_dilate_tiaoma-code-&quot;</span>+i+<span class="string">&quot;.png&quot;</span>,code);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//在原图上把该矩形表示出来</span></span><br><span class="line">                Imgproc.rectangle(sourceImage, minRect.tl(), minRect.br(), <span class="keyword">new</span> <span class="title class_">Scalar</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">1</span>, Imgproc.LINE_AA, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出原图</span></span><br><span class="line">        <span class="built_in">this</span>.saveImage(<span class="built_in">this</span>.save_dir + <span class="string">&quot;/image_process_dilate_tiaoma-6.png&quot;</span>,sourceImage);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h2><p><strong>膨胀 dilate</strong></p>
<p>原图：<br><img src="https://static.oschina.net/uploads/img/201804/19155846_mfAN.png"></p>
<p>膨胀后：<br><img src="https://static.oschina.net/uploads/img/201804/19160147_Pc3o.png"></p>
<p><strong>腐蚀 erode</strong><br><img src="https://static.oschina.net/uploads/img/201804/19160233_VoRV.png"></p>
<p><strong>获取条形码</strong></p>
<blockquote>
<p>获取条形码的效果可能不是最好，方法也不是最好的，只是我学到这里的一些积累。只是抛出一种方法而已。</p>
</blockquote>
<p><img src="https://static.oschina.net/uploads/img/201804/19160256_Sq9R.png"></p>
<p><img src="https://static.oschina.net/uploads/img/201804/19160312_0pR4.png"></p>
<p><img src="https://static.oschina.net/uploads/img/201804/19160325_cZbS.png"></p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>OpenCV</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 命令行模块 Click</title>
    <url>/post/3ae1525e.html</url>
    <content><![CDATA[<p><a href="https://click.palletsprojects.com/">官网</a></p>
<p>Python 经常需要封装命令行，来达到执行指定函数的目的。常用的有 <code>sys</code>, <a href="https://click.palletsprojects.com/">click</a> , <a href="https://docs.python.org/3/howto/argparse.html">argparse</a>。 sys 是 python 系统自带，使用起来不是很方便。所以一般都是用 <a href="https://click.palletsprojects.com/">click</a> , <a href="https://docs.python.org/3/howto/argparse.html">argparse</a>。<br><a href="https://click.palletsprojects.com/">click</a> 相较于 <a href="https://docs.python.org/3/howto/argparse.html">argparse</a>代码更少，也更加简洁、直观。</p>
<span id="more"></span>


<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install click</span><br></pre></td></tr></table></figure>

<h2 id="初级示例"><a href="#初级示例" class="headerlink" title="初级示例"></a>初级示例</h2><p>创建一个 <code>click_demo.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> click</span><br><span class="line"></span><br><span class="line"><span class="meta">@click.command()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello click&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python click_demo.py</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">hello click</span><br></pre></td></tr></table></figure>

<h2 id="中级示例"><a href="#中级示例" class="headerlink" title="中级示例"></a>中级示例</h2><p>本示例中给函数添加参数，创建一个 <code>click_demo.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> click</span><br><span class="line"></span><br><span class="line"><span class="meta">@click.command()</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&quot;-n&quot;</span>, <span class="string">&quot;--name&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;your name&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&quot;-h&quot;</span>, <span class="string">&quot;--height&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;your height&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">name, height</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello &#123;&#125; , &#123;&#125; is your height.&quot;</span>.<span class="built_in">format</span>(name, height))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python click_demo.py -n ABC -h 178</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">hello ABC , 178 is your height</span><br></pre></td></tr></table></figure>

<h3 id="option-装饰器说明"><a href="#option-装饰器说明" class="headerlink" title="option 装饰器说明"></a>option 装饰器说明</h3><p>Options: 是一行一个参数，一个参数分为-开头的缩略参数，和–开头的完整参数名。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># type 类型</span></span><br><span class="line"><span class="comment"># required 必填 默认 False </span></span><br><span class="line"><span class="comment"># default 默认值 默认 None</span></span><br><span class="line"><span class="comment"># help 字段说明</span></span><br><span class="line"><span class="comment"># show_default 显示默认值,默认 False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@click.command()</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&quot;-n&quot;</span>, <span class="string">&quot;--name&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, required=<span class="literal">True</span>, <span class="built_in">help</span>=<span class="string">&quot;your name&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&quot;-h&quot;</span>, <span class="string">&quot;--height&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, required=<span class="literal">True</span>, <span class="built_in">help</span>=<span class="string">&quot;your height&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">name, height</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello &#123;&#125; , &#123;&#125; is your height.&quot;</span>.<span class="built_in">format</span>(name, <span class="built_in">str</span>(height)))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="高级示例"><a href="#高级示例" class="headerlink" title="高级示例"></a>高级示例</h2><p>本示例中添加多个命令行，创建一个 <code>click_demo.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> click</span><br><span class="line"></span><br><span class="line"><span class="comment"># click.group 主函数，用他链接其他函数</span></span><br><span class="line"><span class="meta">@click.group()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 无论如何主函数都会运行</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;main&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add 代表命令</span></span><br><span class="line"><span class="meta">@click.command(<span class="params">name=<span class="string">&#x27;add&#x27;</span></span>)  </span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&quot;-n&quot;</span>, <span class="string">&quot;--name&quot;</span>,required=<span class="literal">True</span>, <span class="built_in">help</span>=<span class="string">&quot;your name&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&quot;-p&quot;</span>, <span class="string">&quot;--pwd&quot;</span>, required=<span class="literal">True</span>, <span class="built_in">help</span>=<span class="string">&quot;your password&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_user</span>(<span class="params">name, height</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;add user &#123;&#125; success&quot;</span>.<span class="built_in">format</span>(name))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># del 代表命令</span></span><br><span class="line"><span class="meta">@click.command(<span class="params">name=<span class="string">&#x27;del&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&quot;-n&quot;</span>, <span class="string">&quot;--name&quot;</span>,required=<span class="literal">True</span>, <span class="built_in">help</span>=<span class="string">&quot;your name&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_user</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;delete user &#123;&#125; success&quot;</span>.<span class="built_in">format</span>(name))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main.add_command(add_user)</span><br><span class="line">    main.add_command(delete_user)</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python click_demo.py add -n ABC -p 123456</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">add user ABC success</span><br><span class="line"></span><br><span class="line">python click_demo.py del -n ABC</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">delete user ABC success</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Pycharm中OpenCV无提示并且函数为警告色(黄色)的解决方法</title>
    <url>/post/5e87845c.html</url>
    <content><![CDATA[<p>安装OpenCV-python 后，在Pycharm中所有的函数都没有提示，就算把函数手敲出来，还是警告色。虽然不影响使用，但是看着糟心。而且也不方便。</p>
<blockquote>
<p>阅读方法前，我将假设您已经基本掌握Python的环境配置及Pycharm的基本使用。</p>
</blockquote>
<h3 id="复制-Opencv-Python-包路径"><a href="#复制-Opencv-Python-包路径" class="headerlink" title="复制 Opencv-Python 包路径"></a>复制 Opencv-Python 包路径</h3><p>此路径在你当前项目的Python环境下的<code>site-packages</code> 下，如果你有多个python环境，或者虚拟环境，请自行前往复制。</p>
<p>复制路径示例: <code>/Users/xxxx/python/env/img_pos/python3.8/site-packages/cv2</code></p>
<blockquote>
<p>Windows 下差不多。 路径仅为参考，不用和您的路径对应</p>
</blockquote>
<h3 id="添加-Opencv-Python-路径到解析器"><a href="#添加-Opencv-Python-路径到解析器" class="headerlink" title="添加 Opencv-Python 路径到解析器"></a>添加 Opencv-Python 路径到解析器</h3><ul>
<li>打开设置 <code>File -&gt; Preferences</code></li>
<li>找到 <code>Python Interpreter</code></li>
<li>在 <code>Python Interpreter</code> 下拉中，选择 <code>show all</code></li>
<li>选择你当前项目的环境点击 <code>show paths for the selected interpreter</code><br>  <img src="https://s2.loli.net/2023/02/15/Cnr9x7f5YMelsqw.jpg"></li>
<li>将 <code>Opencv-Python</code> 包路径增加上一步 <code>show paths for the selected interpreter</code> 展开的列表中</li>
</ul>
<blockquote>
<p>老版本Pycharm 可能在 <code>Python Interpreter</code> 后面的点击 <code>齿轮</code> 显示 <code>show all</code></p>
</blockquote>
]]></content>
      <categories>
        <category>OpenCV</category>
      </categories>
      <tags>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>PlayWright 上传文件非Input框时操作</title>
    <url>/post/568b603f.html</url>
    <content><![CDATA[<p>比如如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;ImageUpload&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ImageUpload u-marginB10&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;ImageUpload__label js-dragdrop-area&quot;</span> <span class="attr">for</span>=<span class="string">&quot;selectFileMultiple&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;ImageUpload__hide&quot;</span>&gt;</span>drag and drop or select files<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;ImageUpload__text&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;js-dragdrop-num&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">span</span>&gt;</span>up to<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>NodeJs: <a href="https://playwright.dev/python/docs/api/class-filechooser">https://playwright.dev/python/docs/api/class-filechooser</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">page.on(&quot;filechooser&quot;, (fileChooser: FileChooser) =&gt; &#123;</span><br><span class="line">     fileChooser.setFiles([&quot;/path/to/a/file&quot;]);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>Python: <a href="https://playwright.dev/python/docs/api/class-filechooser/">https://playwright.dev/python/docs/api/class-filechooser/</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> page.expect_file_chooser() <span class="keyword">as</span> fc_info:</span><br><span class="line">    page.click(<span class="string">&quot;upload&quot;</span>)</span><br><span class="line">file_chooser = fc_info.value</span><br><span class="line">file_chooser.set_files(<span class="string">&quot;/path/to/a/file&quot;</span>)</span><br></pre></td></tr></table></figure>


<p>Java: <a href="https://playwright.dev/java/docs/api/class-filechooser">https://playwright.dev/java/docs/api/class-filechooser</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">FileChooser</span> <span class="variable">fileChooser</span> <span class="operator">=</span> page.waitForFileChooser(() -&gt; </span><br><span class="line">page.click(<span class="string">&quot;upload&quot;</span>));</span><br><span class="line">fileChooser.setFiles(Paths.get(<span class="string">&quot;myfile.pdf&quot;</span>));</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Crawler</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PlayWright</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 用  lxml 解析 HTML</title>
    <url>/post/56fee5e3.html</url>
    <content><![CDATA[<p>python 爬虫中，必然会接触到 HTML 解析。 lxml是一个Python库，使用它可以轻松处理XML和HTML文件，还可以用于web爬取。市面上有很多现成的XML解析器，但是为了获得更好的结果，开发人员有时更愿意编写自己的XML和HTML解析器。这时lxml库就派上用场了。这个库的主要优点是易于使用，在解析大型文档时速度非常快，归档的也非常好，并且提供了简单的转换方法来将数据转换为Python数据类型，从而使文件操作更容易。</p>
<span id="more"></span>

<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul>
<li><a href="https://github.com/lxml/lxml">github 地址</a></li>
<li><a href="https://lxml.de/">Home Page</a></li>
<li><a href="https://lxml.de/index.html#documentation">Documentation</a></li>
<li><a href="https://lxml.de/api.html">lxml etree Documentation</a></li>
</ul>
<blockquote>
<p>本示例只介绍了一些常用的示例，更多的请参考官方文档.</p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install lxml</span><br></pre></td></tr></table></figure>


<h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">html = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">　　&lt;head&gt;</span></span><br><span class="line"><span class="string">　　　　&lt;meta name=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span></span><br><span class="line"><span class="string">　　　　&lt;title&gt;Test&lt;/title&gt;</span></span><br><span class="line"><span class="string">　　&lt;/head&gt;</span></span><br><span class="line"><span class="string">　　&lt;body&gt;</span></span><br><span class="line"><span class="string">　　　　&lt;a href=&quot;http://a.domain.com&quot; customer_attr=&quot;abc&quot; target=&quot;_blank&quot;&gt;A_site&lt;/a&gt;</span></span><br><span class="line"><span class="string">　　　　&lt;a href=&quot;http://b.domain.com&quot; target=&quot;_blank&quot;&gt;B_site&lt;/a&gt;</span></span><br><span class="line"><span class="string">　　　　&lt;a href=&quot;http://c.domain.com&quot; target=&quot;_blank&quot;&gt;C_site&lt;/a&gt;</span></span><br><span class="line"><span class="string">　　　　&lt;a href=&quot;http://d.domain.com&quot; target=&quot;_blank&quot;&gt;D_site&lt;/a&gt;</span></span><br><span class="line"><span class="string">　　　　&lt;a href=&quot;http://e.domain.com&quot; target=&quot;_blank&quot;&gt;E_site&lt;/a&gt;</span></span><br><span class="line"><span class="string">　　&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">html = etree.HTML(html.lower().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">a_links = html.xpath(<span class="string">&quot;//a&quot;</span>)  <span class="comment"># 查找所有 a 标签 //a 代表 html 下所有 a</span></span><br><span class="line"><span class="keyword">for</span> a_link <span class="keyword">in</span> a_links:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">30</span>)</span><br><span class="line">    <span class="built_in">print</span>(a_link.attrib)      <span class="comment"># 获取属性</span></span><br><span class="line">    <span class="built_in">print</span>(a_link.text)        <span class="comment"># 获取 a 标签 text</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">******************************</span><br><span class="line">&#123;<span class="string">&#x27;href&#x27;</span>: <span class="string">&#x27;http://a.domain.com&#x27;</span>, <span class="string">&#x27;target&#x27;</span>: <span class="string">&#x27;_blank&#x27;</span>, <span class="string">&#x27;customer_attr&#x27;</span>: <span class="string">&#x27;abc&#x27;</span>&#125;</span><br><span class="line">A_site</span><br><span class="line">******************************</span><br><span class="line">&#123;<span class="string">&#x27;href&#x27;</span>: <span class="string">&#x27;http://b.domain.com&#x27;</span>, <span class="string">&#x27;target&#x27;</span>: <span class="string">&#x27;_blank&#x27;</span>&#125;</span><br><span class="line">B_site</span><br><span class="line">******************************</span><br><span class="line">&#123;<span class="string">&#x27;href&#x27;</span>: <span class="string">&#x27;http://c.domain.com&#x27;</span>, <span class="string">&#x27;target&#x27;</span>: <span class="string">&#x27;_blank&#x27;</span>&#125;</span><br><span class="line">C_site</span><br><span class="line">******************************</span><br><span class="line">&#123;<span class="string">&#x27;href&#x27;</span>: <span class="string">&#x27;http://d.domain.com&#x27;</span>, <span class="string">&#x27;target&#x27;</span>: <span class="string">&#x27;_blank&#x27;</span>&#125;</span><br><span class="line">D_site</span><br><span class="line">******************************</span><br><span class="line">&#123;<span class="string">&#x27;href&#x27;</span>: <span class="string">&#x27;http://e.domain.com&#x27;</span>, <span class="string">&#x27;target&#x27;</span>: <span class="string">&#x27;_blank&#x27;</span>&#125;</span><br><span class="line">E_site</span><br></pre></td></tr></table></figure>


<h2 id="XPATH"><a href="#XPATH" class="headerlink" title="XPATH"></a>XPATH</h2><p>XPATH 基本上是用一种类似目录树的方法来描述在XML文档中的路径。用 “/“ 来作为上下层级间的分隔。第一个 “/“ 表示文档的根节点。对于一个 HTML 文件来说，最外层的节点是 “/html”</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">html = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">　　&lt;head&gt;</span></span><br><span class="line"><span class="string">　　　　&lt;meta name=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span></span><br><span class="line"><span class="string">　　　　&lt;title&gt;Test&lt;/title&gt;</span></span><br><span class="line"><span class="string">　　&lt;/head&gt;</span></span><br><span class="line"><span class="string">　　&lt;body&gt;</span></span><br><span class="line"><span class="string">　　　　&lt;h1&gt;I am h1 html&lt;/h1&gt;</span></span><br><span class="line"><span class="string">　　　　&lt;p style=&quot;font-size: 50%&quot;&gt;Hello World&lt;/p&gt;</span></span><br><span class="line"><span class="string">　　　　&lt;p&gt;Hello World 2&lt;/p&gt;</span></span><br><span class="line"><span class="string">　　&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="通过绝对路径查找"><a href="#通过绝对路径查找" class="headerlink" title="通过绝对路径查找"></a>通过绝对路径查找</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">html = etree.HTML(html.lower().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="comment"># 找到 html 下 body 内的 p 。 注意 xpath 返回的不一定唯一的，是符合要求的所有节点</span></span><br><span class="line"><span class="comment"># 也可用用 //p 查找 html 下所有 p</span></span><br><span class="line">p_tags = html.xpath(<span class="string">&quot;/html/body/p&quot;</span>)  </span><br><span class="line"><span class="keyword">for</span> p_tag <span class="keyword">in</span> p_tags:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">30</span>)</span><br><span class="line">    <span class="comment"># p_tag 是一个 lxml.etree._Element 对象</span></span><br><span class="line">    <span class="built_in">print</span>(p_tag.text)               <span class="comment"># 获取文本内容</span></span><br><span class="line">    <span class="built_in">print</span>(a_link.values())          <span class="comment"># 获取所有属性值</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">******************************</span><br><span class="line">Hello World</span><br><span class="line">font-size: <span class="number">50</span>%</span><br><span class="line">******************************</span><br><span class="line">Hello World <span class="number">2</span></span><br></pre></td></tr></table></figure>

<h3 id="通过属性查找"><a href="#通过属性查找" class="headerlink" title="通过属性查找"></a>通过属性查找</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = etree.HTML(html.lower().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">p_tag = html.xpath(<span class="string">&quot;/html/body/p[@style=&#x27;font-size: 50%&#x27;]&quot;</span>)</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">p_tag = html.xpath(<span class="string">&quot;//p[@style=&#x27;font-size: 50%&#x27;]&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>其他属性有:</p>
<ul>
<li>@name</li>
<li>@id</li>
<li>@value</li>
<li>@href</li>
<li>@src</li>
<li>@class</li>
<li>text()        <ul>
<li><code>html.xpath(&quot;//p[text()=&#39;Hello World&#39;]&quot;)</code></li>
</ul>
</li>
<li>postion()     <ul>
<li><code>html.xpath(&quot;//p[position()=2]&quot;)</code> 获取第二个 p 节点</li>
</ul>
</li>
</ul>
<h3 id="任意中间节点"><a href="#任意中间节点" class="headerlink" title="任意中间节点"></a>任意中间节点</h3><h4 id="用-号"><a href="#用-号" class="headerlink" title="用 * 号"></a>用 * 号</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = etree.HTML(html.lower().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">p_tag = html.xpath(<span class="string">&quot;/html/*/p[@style=&#x27;font-size: 50%&#x27;]&quot;</span>)</span><br><span class="line"><span class="comment"># 加 * 号 不管 html 到 p 中间有多少层，不管当前 p 的上一级是 div 还是什么，都会被查找出来</span></span><br></pre></td></tr></table></figure>

<h4 id="用-descendant"><a href="#用-descendant" class="headerlink" title="用 descendant"></a>用 descendant</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># descendant 指代任意多层的中间节点, 它可以省略成一个 &#x27;/&#x27; 号</span></span><br><span class="line">html = etree.HTML(html.lower().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">p_tag = html.xpath(<span class="string">&quot;/descendant::p&quot;</span>)</span><br><span class="line"><span class="comment"># 等同于 p_tag = html.xpath(&quot;//p&quot;)</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Crawler</category>
      </categories>
      <tags>
        <tag>技巧</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python3 处理 mp3 ID3 信息</title>
    <url>/post/809914e1.html</url>
    <content><![CDATA[<p>现在听个音乐太难了,各大播放器在版权争夺下搞得一个音乐市场乌烟瘴气。有些歌这个平台可以听有些歌那个平台可以听。想听全就都买 VIP。懒得折腾了,还是回到起点吧”==下载音乐==”。因为主要上下班开车听听歌,发现下载下来的音乐很多都没有 id3 信息，网上找一些编辑 ID3 信息的编辑后，还是乱码。原因是现在基本都是 ID3 V2 信息了，没有写入 ID3 V1 信息。那么一些老款车或者中控都不支持 ID3 V2(比如我的车时 2012 款)，就会显示乱码。就想用 python 随便写一个来用用</p>
<span id="more"></span>

<h3 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h3><p><a href="https://github.com/liuqi0725/VanasMetaID3">VanasMetaID3</a></p>
<h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><ul>
<li>Python 3.8</li>
<li>MacOS Catalina 10.15.3 </li>
</ul>
<h3 id="引入包"><a href="#引入包" class="headerlink" title="引入包"></a>引入包</h3><ul>
<li>mutagen 1.44.0</li>
<li>Pillow 7.0.0</li>
<li>tkinter 8.6 </li>
</ul>
<h3 id="关于-tkinter-包的说明"><a href="#关于-tkinter-包的说明" class="headerlink" title="关于 tkinter 包的说明"></a>关于 tkinter 包的说明</h3><ul>
<li><p>如果是<a href="https://www.python.org/">python</a>官网下载安装,python3.7.x 以上都默认安装的 tkinter 8.6。</p>
</li>
<li><p>如果是 brew 安装,当前最新版是 3.7.6 ,tkinter 是 8.5</p>
</li>
</ul>
<p><strong>如果tkinter 是 8.5 ,会出现输入框无法输入中文的 bug。这个在 <a href="https://www.python.org/download/mac/tcltk/">python官网上有说明</a></strong></p>
<p>网上有很多解决办法,看你怎么选择,我懒得折腾,直接 brew 安装的卸载了。从官网下的 3.8 来安装</p>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><h4 id="V0-1"><a href="#V0-1" class="headerlink" title="V0.1"></a>V0.1</h4><ul>
<li>读取 mp3 文件</li>
<li>从文件夹中读取 mp3 文件</li>
<li>读取 mp3 ID3 信息(图片、歌词、标题、专辑….)</li>
<li>修改 mp3 ID3 信息（V1 , V2）</li>
</ul>
<blockquote>
<p>注意 图片、歌词等属于 V2 信息，V1 信息只有文件末尾的 128k 的数据，代码里有说明</p>
</blockquote>
<p><img src="https://s2.loli.net/2022/02/09/tum4TVOSPof8igM.jpg"></p>
<p><img src="https://s2.loli.net/2022/02/09/ZSc3XCqUIKhPxdt.jpg"></p>
<h3 id="打包成可执行的-APP"><a href="#打包成可执行的-APP" class="headerlink" title="打包成可执行的 APP"></a>打包成可执行的 APP</h3><p><strong>先安装 <code>py2app</code> , 当前最新是 0.21</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install py2app</span><br></pre></td></tr></table></figure>

<p><strong>打包成 APP</strong></p>
<p>如需设置 app，请修改<code>setup.py</code>, 具体设置方法参考 <a href="https://py2app.readthedocs.io/en/latest/index.html">py2app-0.21-Doc</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 项目目录下执行 </span></span><br><span class="line"><span class="comment"># 如果要拷贝到其他没有 python 环境的机器使用 去掉`-A` 打包所有包</span></span><br><span class="line">python3 setup.py py2app -A</span><br></pre></td></tr></table></figure>

<p><strong>app 存放在项目目录 py2app 创建的 dist 目录下</strong></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>tkinter</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 项目生成当前项目的 requirements 文件</title>
    <url>/post/509ba068.html</url>
    <content><![CDATA[<!--categories 类型有: Common Crawler Python JAVA CentOS Docker MacOS-->

<p>当我们需要生成 <code>requirements</code> 文件时，一般就是使用 <code>pip freeze</code> 但是如果一个项目一个虚拟目录，这样没问题。但我们大多时候可能会安装功能来区分虚拟环境，比如爬虫的、图像处理的、web 的。  这时候 <code>pip freeze</code> 就不那么友好了，它会导出当前环境所有的 lib。</p>
<span id="more"></span>

<h2 id="使用-pipreqs-导出当前项目的包"><a href="#使用-pipreqs-导出当前项目的包" class="headerlink" title="使用 pipreqs 导出当前项目的包"></a>使用 pipreqs 导出当前项目的包</h2><p>pipreqs 会对当前项目包扫描，找到不属于 python 默认库的包就会添加到 requirements 文件中</p>
<p>安装工具</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install pipreqs</span><br></pre></td></tr></table></figure>

<p>进入工程主目录,执行如下命令将生成 <code>requirements.txt</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pipreqs ./</span><br></pre></td></tr></table></figure>

<p>如果提示“UnicodeDecodeError: ‘gbk’ codec can’t decode ”的错误，需要指定字符集 –encoding=utf8</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pipreqs ./ --encoding=utf8</span><br></pre></td></tr></table></figure>

<p>如果requirements.txt文件已存在，需要增加–force，最终命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pipreqs ./ --force</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot 整合SpringSecurity实现账号密码+手机验证码登陆</title>
    <url>/post/6e429048.html</url>
    <content><![CDATA[<p>SpringSecurity 是 Spring 提供安全管理框架。核心内容包含<strong>认证</strong>、<strong>授权</strong>、<strong>攻击防护</strong>。实际上SpringSecurity 已经发展了多年了，但是在 SSM/SSH 中整合 SpringSecurity 相较于 Shiro 来说显得要麻烦很多，所以在安全管理框架这块一直都是 Shiro 的天下。</p>
<p>自从有了 SpringBoot ，SpringSecurity 的完美兼容让其价值完整的体现了出来。在 SpringBoot 中基本零配置就可以使用 SpringSecurity了。</p>
<span id="more"></span>

<h2 id="示例说明"><a href="#示例说明" class="headerlink" title="示例说明"></a>示例说明</h2><p>网上教程一大堆，一知半解导致写的错误一大堆，出错了又要去搜索，知识点越来越多，陷入恶性循环。</p>
<p>这里提供一个完整Demo ，虽然不一定说完全理解SpringSecurity，但是可以了解其运行方式。</p>
<p>示例中提供了 2 种认证方式，<strong>账号密码</strong>、<strong>手机验证码</strong>，请根据需要自定义。</p>
<h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><ul>
<li>SpringBoot 2.3.3</li>
<li>JDK 1.8</li>
<li>Mybatis 2.1.3</li>
<li>Mysql 5.7+</li>
</ul>
<h3 id="示例安装"><a href="#示例安装" class="headerlink" title="示例安装"></a>示例安装</h3><ul>
<li>下载 Demo<ul>
<li>GitHub : <a href="https://github.com/liuqi0725/springboot-useful/tree/master/springboot-security">https://github.com/liuqi0725/springboot-useful/tree/master/springboot-security</a></li>
<li>Gitee : <a href="https://gitee.com/alexliu0725/springboot-useful/tree/master/springboot-security">https://gitee.com/alexliu0725/springboot-useful/tree/master/springboot-security</a></li>
</ul>
</li>
<li>修改 <code>application.yaml</code> <strong>端口</strong>、<strong>数据库</strong> 等配置</li>
<li>启动后在不同的客户端机器上访问 <a href="http://localhost:8080/">http://localhost:8080</a> （根据自己配置的端口访问）</li>
<li>测试用2 种登陆方式: 用户密码、手机验证码</li>
<li>查看不同用户菜单是否不一样（测试授权）</li>
<li>访问不存在的路由地址，查看返回值</li>
</ul>
<blockquote>
<p>为避免迁移脚本冲突，如果不建多个数据库脚本的情况为，请先清空数据库里的内容</p>
</blockquote>
<p><a href='https://gitee.com/alexliu0725/springboot-useful'><img src='https://gitee.com/alexliu0725/springboot-useful/widgets/widget_6.svg' alt='Fork me on Gitee'></img></a></p>
<h2 id="Spring-security-介绍"><a href="#Spring-security-介绍" class="headerlink" title="Spring-security 介绍"></a>Spring-security 介绍</h2><p><a href="https://spring.io/projects/spring-security">Spring Security 官方说明</a></p>
<p><a href="https://docs.spring.io/spring-security/site/docs/current/reference/html5/">Spring Security 官方文档</a></p>
<p><a href="https://www.springcloud.cc/spring-security-zhcn.html">Spring Security 参考手册-中文</a></p>
<h2 id="为什么不用-shiro"><a href="#为什么不用-shiro" class="headerlink" title="为什么不用 shiro"></a>为什么不用 shiro</h2><p>之前SSM/SSH 一直用 Shiro。后面慢慢过渡到 SpringBoot 后，改用了 SpringSecurity。然后就没有然后了。Spring 真的好用，教程也全。<br>再说中型项目后续会涉及集群或微服务，security、cloud 打包用一套不香么。</p>
<h2 id="Spring-Security-做用户认证、授权"><a href="#Spring-Security-做用户认证、授权" class="headerlink" title="Spring-Security 做用户认证、授权"></a>Spring-Security 做用户认证、授权</h2><p>以下是我对这两点肤浅的认识。不包含 SSO、OAuth 等。后续会在其他文章中介绍。</p>
<p>编码分为 2 大块 <strong>access(访问)<strong>、</strong>authenticaton(认证)</strong></p>
<ul>
<li>access 会放过白名单，对非白名单的请求进行认证，认证的依据来源（权限、角色…），没有则返回 403</li>
<li>authenticaton 用户访问一个需要授权的 URL 时，会进行用户认证，认证通过后再通过 access 去判断是否可以访问<strong>（授权）</strong></li>
</ul>
<p><img src="https://s2.loli.net/2022/02/09/OvWfkgwsH9ZeqCm.jpg"></p>
<h2 id="CSRF-跨站请求伪造防护"><a href="#CSRF-跨站请求伪造防护" class="headerlink" title="CSRF 跨站请求伪造防护"></a>CSRF 跨站请求伪造防护</h2><p>Demo 中没有开启 csrf。 如果需要可以自行开启。</p>
<p>开启后，通过如下代码获取</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;_csrf.parameterName&#125;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;_csrf.token&#125;&quot;</span>&gt;</span></span><br><span class="line">或者放在head 中</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span>  <span class="attr">name</span> = <span class="string">“_csrf”</span> <span class="attr">content</span> = <span class="string">“$&#123;_csrf.token&#125;”</span> /&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span>  <span class="attr">name</span> = <span class="string">“_csrf_header”</span>  <span class="attr">content</span> = <span class="string">“$&#123;_csrf.headerName&#125;”</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<h2 id="iframe-嵌入"><a href="#iframe-嵌入" class="headerlink" title="iframe 嵌入"></a>iframe 嵌入</h2><p>SpringSecurity 默认是关闭了 frame 的嵌入的，可以开启。</p>
<p>参考 Demo 代码 <code>SecurityWebConfig</code> 中 <code>setFrameAllow(http)</code> 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setFrameAllow</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * iframe 允许显示的方式 &lt;br&gt;</span></span><br><span class="line"><span class="comment">         * SAMEORIGIN 仅允许 frame 页面当前域名下的显示 &lt;br&gt;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * FROMURI 允许 frame 页面在指定域名下显示 &lt;br&gt;</span></span><br><span class="line"><span class="comment">         *     例如：</span></span><br><span class="line"><span class="comment">         *     &lt;ul&gt;</span></span><br><span class="line"><span class="comment">         *          &lt;li&gt;http://www.baidu.com 允许该域名可以嵌套我的 frame&lt;/li&gt;</span></span><br><span class="line"><span class="comment">         *          &lt;li&gt;http://www.taobao.com 允许该域名可以嵌套我的 frame&lt;/li&gt;</span></span><br><span class="line"><span class="comment">         *     &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 正式环境请配置在配置文件中。方便管理</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">xframe</span> <span class="operator">=</span> <span class="string">&quot;SAMEORIGIN&quot;</span>;</span><br><span class="line">        <span class="comment">// 如果是 FROMURI 允许嵌套的外部域名白名单</span></span><br><span class="line">        String[] frameAllowWhiteDomain = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;https://example.cn&quot;</span>,<span class="string">&quot;https://example.com&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(xframe.equals(<span class="string">&quot;SAMEORIGIN&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">// 仅允许本域名</span></span><br><span class="line">            http.headers().frameOptions().sameOrigin();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(xframe.equals(<span class="string">&quot;FROMURI&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">//disable 默认策略。 这一句不能省。</span></span><br><span class="line">            http.headers().frameOptions().disable();</span><br><span class="line">            <span class="comment">//新增新的策略。</span></span><br><span class="line">            http.headers().addHeaderWriter(<span class="keyword">new</span> <span class="title class_">XFrameOptionsHeaderWriter</span>(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">WhiteListedAllowFromStrategy</span>(Arrays.asList(frameAllowWhiteDomain))</span><br><span class="line">            ));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;未知的 XFrameOptions 。仅支持 SAMEORIGIN , FROMURI&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="提升用户、编码体验"><a href="#提升用户、编码体验" class="headerlink" title="提升用户、编码体验"></a>提升用户、编码体验</h2><ol>
<li><p>异常处理</p>
<p> Demo 中并没有做全局的统一异常处理，在正式项目中，可以通过全局的异常处理来提升错误后的用户体验。通过以下 2 点可以实现，view 访问返回错误 view，json 访问返回错误 json</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 处理 spring `/error` </span></span><br><span class="line">   <span class="meta">@Controller</span></span><br><span class="line">   <span class="meta">@RequestMapping(&#123;&quot;$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;&quot;&#125;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringErrorProcessController</span> <span class="keyword">extends</span> <span class="title class_">AbstractErrorController</span> &#123;</span><br><span class="line">       ...</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 处理 Controller 层错误</span></span><br><span class="line">   <span class="meta">@ControllerAdvice</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerExceptionHandler</span>&#123;</span><br><span class="line">   </span><br><span class="line">   &#125;</span><br><span class="line">	</span><br></pre></td></tr></table></figure></li>
<li><p>自定义配置<br> SpringSecurity 中还是有很多参数的，比如白名单，开启 csrf、iframe 都是可以通过配置实现，这样换一个项目不用把代码又改一堆。可以通过 <code>@ConfigurationProperties</code> 实现 spring 配置，在 spring 加载时读取。</p>
</li>
<li><p>灵活的设计<br> SpringSecurity 只提供了工具，具体的实现还是要在项目（可以理解为第三方）中去实现，比如 Demo 中的<code>CustomerSecurityAuthenticationProcessService</code>,<code>CustomerPasswordService</code> 等。这些都是需要在启动时注入到SpringSecurity 中的，如何将这些类在启动时获取到实体，或者根据获取内容让 SpringSecurity 实现其他的逻辑。 </p>
</li>
</ol>
<blockquote>
<p>以上几点只是我的肤浅建议，相信大多数人都是这么做的，只是不提不爽啊，公司有些人老是硬编码，换个项目改一堆，有时候还找不到错在哪里。这种重复劳动实在是太费力了。</p>
</blockquote>
<h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><p>更多说明请参考代码中的注释。要点太多，Readme 写的话，又要写一次代码。</p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>Springboot</tag>
        <tag>SpringSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot+Flyway 管理项目SQL脚本</title>
    <url>/post/919b1099.html</url>
    <content><![CDATA[<p>Flyway 数据库的版本控制。</p>
<p>用一种简单、干净的方案，帮助用户完成数据库迁移的工作。使用Flyway，用户可以从任意一个数据库版本迁移到最新版本，简单而且有效。</p>
<p>支持多个平台：windows、ios、linux、docker、java、android 。本文介绍 Springboot 集成 Flyway，及Sql 脚本命名方式</p>
<span id="more"></span>

<h2 id="测试包放在前面"><a href="#测试包放在前面" class="headerlink" title="测试包放在前面"></a>测试包放在前面</h2><p>提供完整 Demo 供下载学习使用</p>
<ul>
<li>下载 <a href="https://github.com/liuqi0725/springboot-useful/tree/master/springboot-flyway">https://github.com/liuqi0725/springboot-useful/tree/master/springboot-flyway</a> 建议使用 <code>GitZip for github</code> 插件下载独立目录</li>
<li>修改 <code>application.yaml</code> 数据库地址.</li>
<li>启动后访问 <a href="http://localhost:8080/user/info/1">http://localhost:8080/user/info/1</a></li>
</ul>
<p><a href='https://gitee.com/alexliu0725/springboot-useful'><img src='https://gitee.com/alexliu0725/springboot-useful/widgets/widget_6.svg' alt='Fork me on Gitee'></img></a></p>
<h2 id="Flyway-的工作原理"><a href="#Flyway-的工作原理" class="headerlink" title="Flyway 的工作原理"></a>Flyway 的工作原理</h2><p>flyway 需要在 DB 中先创建一个 metdata 表 (缺省表名为 flyway_schema_history), 在该表中保存着每次 migration 的记录, 记录包含 migration 脚本的版本号和 SQL 脚本的 checksum 值. 当一个新的 SQL 脚本被扫描到后, Flyway 解析该 SQL 脚本的版本号, 并和 metadata 表已 apply 的的 migration 对比, 如果该 SQL 脚本版本更新的话, 将在指定的 DB 上执行该 SQL 文件, 否则跳过该 SQL 文件.</p>
<h2 id="版本号大小说明"><a href="#版本号大小说明" class="headerlink" title="版本号大小说明"></a>版本号大小说明</h2><p>两个 flyway 版本号的比较, 采用左对齐原则, 缺位用 0 代替. 举例如下: </p>
<ul>
<li>1.2.9.4 比 1.2.9   版本高</li>
<li>1.2.10  比 1.2.9.4 版本高</li>
<li>1.2.10  和 1.2.010 版本号一样高, 每个版本号部分的前导 0 会被忽略</li>
</ul>
<h2 id="脚本分类"><a href="#脚本分类" class="headerlink" title="脚本分类"></a>脚本分类</h2><p>Flyway SQL 文件可以分为两类:</p>
<ul>
<li>Versioned </li>
<li>Repeatable</li>
</ul>
<h3 id="Versioned"><a href="#Versioned" class="headerlink" title="Versioned"></a>Versioned</h3><p>Versioned migration 用于版本升级, 每个版本有唯一的版本号并只能 apply 一次</p>
<h3 id="Repeatable"><a href="#Repeatable" class="headerlink" title="Repeatable"></a>Repeatable</h3><p>Repeatable migration 是指可重复加载的 migration. 一旦 SQL 脚本的 checksum 有变动, flyway 就会重新应用该脚本. 它并不用于版本更新, 这类的 migration 总是在 versioned migration 执行之后才被执行.</p>
<h3 id="Migration-SQL的命名规则图"><a href="#Migration-SQL的命名规则图" class="headerlink" title="Migration SQL的命名规则图"></a>Migration SQL的命名规则图</h3><p><img src="https://img2018.cnblogs.com/blog/194640/201809/194640-20180917181704995-1479103124.png"></p>
<p>其中的文件名由以下部分组成，除了使用默认配置外，某些部分还可自定义规则.</p>
<ul>
<li>prefix: 可配置，前缀标识，默认值 V 表示 Versioned, R 表示 Repeatable</li>
<li>version: 标识版本号, 由一个或多个数字构成, 数字之间的分隔符可用点.或下划线_</li>
<li>separator: 可配置, 用于分隔版本标识与描述信息, 默认为两个下划线 ‘__’</li>
<li>description: 描述信息, 文字之间可以用下划线或空格分隔</li>
<li>suffix: 可配置, 后续标识, 默认为.sql</li>
</ul>
<h3 id="关于开发-生产环境版本说明"><a href="#关于开发-生产环境版本说明" class="headerlink" title="关于开发|生产环境版本说明"></a>关于开发|生产环境版本说明</h3><ol>
<li>开发环境 SQL 文件建议采用时间戳作为版本号. </li>
</ol>
<p>多人一起开发不会导致版本号争用, 同时再加上生产环境的版本号, 这样的话, 将来手工 merge 成生产环境 migration 脚本也比较方便, SQL 文件示例:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">V20200317.1059__V1.0_Unique_User_Names.sql</span><br><span class="line">V20180317.1459__V1.0_Add_SomeTables.sql</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>生产环境 SQL 文件, 应该是手动 merge 开发环境的 SQL 脚本, 版本号按照正常的版本, 比如 <code>V2.1.5_001__Release.sql</code></li>
</ol>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>Springboot</tag>
        <tag>flyway</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot+Nginx 做负载均衡</title>
    <url>/post/55431d62.html</url>
    <content><![CDATA[<p>利用Nginx 做负载均衡，提升服务器的的可靠性、容灾性。教程+示例，一学就会。</p>
<span id="more"></span>


<h2 id="负载均衡介绍"><a href="#负载均衡介绍" class="headerlink" title="负载均衡介绍"></a>负载均衡介绍</h2><p><a href="https://zh.wikipedia.org/wiki/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1">wiki</a></p>
<p><a href="https://baike.baidu.com/item/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/932451?fr=aladdin">百度百科</a></p>
<p>简单来说就是提升吞吐量、避免服务器过载。分为<strong>硬</strong>（如 F5），<strong>软</strong>(如 apache、nginx 的反向代理，还有其他模式)</p>
<h2 id="Nginx-负载均衡网络图"><a href="#Nginx-负载均衡网络图" class="headerlink" title="Nginx 负载均衡网络图"></a>Nginx 负载均衡网络图</h2><p><img src="https://s2.loli.net/2022/02/09/FIyHuevCmUWkGOw.jpg"></p>
<h2 id="Nginx-负载均衡策略"><a href="#Nginx-负载均衡策略" class="headerlink" title="Nginx 负载均衡策略"></a>Nginx 负载均衡策略</h2><p>nginx 负载均衡使用 <code>upstream</code> 配置. 包括内置策略，还有通过第三方插件方式的策略。有兴趣的可以深入学习。</p>
<h4 id="轮循（默认）-Round-Robin"><a href="#轮循（默认）-Round-Robin" class="headerlink" title="轮循（默认）[Round Robin]"></a>轮循（默认）[Round Robin]</h4><p>每个请求按时间顺序逐一分配到不同的后端服务器，如果服务器shutdown 了，将不在分发请求到该服务器。 </p>
<ul>
<li>servername 自定义名称</li>
<li>server 配置支持 ip/域名 + 有端口/无端口(80) 。内容根据实际配置</li>
<li>可配置 n 个 server</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream servername &#123;</span><br><span class="line">    server 192.168.0.1:8080;</span><br><span class="line">    server 192.168.0.2:8080; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="指定权重-Least-Connections"><a href="#指定权重-Least-Connections" class="headerlink" title="指定权重 [Least Connections]"></a>指定权重 [Least Connections]</h4><p>通过权重，指定轮循的几率。weight和访问比率成正比，多用于服务器性能有差异的情况。</p>
<ul>
<li>servername 自定义名称</li>
<li>server 配置支持 ip/域名 + 有端口/无端口(80) 。内容根据实际配置</li>
<li>weight 与访问量成正比，数字越大轮循几率越大</li>
<li>可配置 n 个 server</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream servername &#123; </span><br><span class="line">    server 192.168.0.1:8080 weight=8; </span><br><span class="line">    server 192.168.0.2:8080 weight=10; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h4 id="IP-绑定-IP-Hash"><a href="#IP-绑定-IP-Hash" class="headerlink" title="IP 绑定[IP Hash]"></a>IP 绑定[IP Hash]</h4><p>每个请求按根据客户端ip的hash结果分配服务器。这样可以客户端在一定时间内可以固定访问一台服务器，可以保持 Session 。<br>默认执行 20（忘记了）hash 算法查找服务器，如果没有则进行轮循(算是一种高级的轮循)。</p>
<ul>
<li>servername 自定义名称</li>
<li>server 配置支持 ip/域名 + 有端口/无端口(80) 。内容根据实际配置</li>
<li>可配置 n 个 server</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream servername &#123; </span><br><span class="line">    ip_hash; </span><br><span class="line">    server 192.168.0.1:8080; </span><br><span class="line">    server 192.168.0.2:8080; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="Server-参数"><a href="#Server-参数" class="headerlink" title="Server 参数"></a>Server 参数</h4><ul>
<li>down 表示当前server 不参与负载</li>
<li>weight 默认为1 数字越大 负载权重越大</li>
<li>max_fails 允许请求失败的次数 当超过最大次数 返回proxy_next_upstream模块定义的错误</li>
<li>fail_timeout:max_fails次失败后，服务端暂停的时间</li>
<li>backup: 其他所有的非backup机器down或者忙的时候 请求这台机器，这台机器的压力最小</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream servername &#123; </span><br><span class="line">    server 192.168.0.1:8080 down; </span><br><span class="line">    server 192.168.0.2:8080 weight=10 max_fails=30 fail_timeout=12; </span><br><span class="line">    server 192.168.0.3:8080 weight=8; </span><br><span class="line">    server 192.168.0.4:8080 backup; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Nginx-Springboot-实现负载均衡"><a href="#Nginx-Springboot-实现负载均衡" class="headerlink" title="Nginx+Springboot 实现负载均衡"></a>Nginx+Springboot 实现负载均衡</h2><h2 id="Demo-说明"><a href="#Demo-说明" class="headerlink" title="Demo 说明"></a>Demo 说明</h2><p>提供完整 Demo 下载学习使用。</p>
<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><ul>
<li>JDK1.8 以以上</li>
<li>Springboot 2.3.3</li>
<li>Nginx 1.15 以上</li>
</ul>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul>
<li>下载<a href="https://github.com/liuqi0725/springboot-useful/tree/master/springboot-soft-balance-nginx">(https://github.com/liuqi0725/springboot-useful/tree/master/springboot-soft-balance-nginx)</a> 建议使用<code>GitZip for github</code> 插件下载独立目录</li>
<li>执行 <code>clean</code> 、<code>package</code> 操作，将打包的 jar 和 <code>application.yaml</code> 放在一起</li>
<li>修改 <code>application.yaml</code> 端口地址.</li>
<li>启动多个服务</li>
<li>启动后在不同的客户端机器上访问 <a href="http://localhost/hello/username">http://localhost/hello/username</a>  username 自定义 。测试负载均衡</li>
</ul>
<h4 id="nginx-Session-共享"><a href="#nginx-Session-共享" class="headerlink" title="nginx Session 共享"></a>nginx Session 共享</h4><p>使用反向代理负载均衡，不可避免会面对 Session 共享。一般的方式是 cookie、memcache、redis 来管理共享数据. 后面的 <code>Springboot-security</code> 专题，会专门讲解。</p>
<h4 id="nginx-配置"><a href="#nginx-配置" class="headerlink" title="nginx 配置"></a>nginx 配置</h4><p>配置采用的 ip_hash 。可以替换成其他的策略测试。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    upstream springbootnginx&#123;</span><br><span class="line">       ip_hash;</span><br><span class="line">       # 其实 2 个可以都在放本地，修改端口即可</span><br><span class="line">       # 本地放一个</span><br><span class="line">       server 192.168.1.130:8080;</span><br><span class="line">       # 其他机器放一个</span><br><span class="line">       server 192.168.1.120:8080;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  192.168.1.130;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            # 指向反向代理</span><br><span class="line">            proxy_pass http://springbootnginx;</span><br><span class="line">            proxy_connect_timeout 3s;</span><br><span class="line">            proxy_read_timeout 5s;</span><br><span class="line">            proxy_send_timeout 3s;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>JAVA</tag>
        <tag>Springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7 安装 postgresql</title>
    <url>/post/a47edc12.html</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装方式一: yum 直接安装</span></span><br><span class="line"><span class="comment"># 建议先用 yum search 查看你的 yum 源下是否是 13</span></span><br><span class="line">yum -y install postgresql-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装方式二: 安装官方 yum 源再安装 postgresql</span></span><br><span class="line"></span><br><span class="line">yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm</span><br><span class="line"></span><br><span class="line">yum install -y postgresql13-server</span><br></pre></td></tr></table></figure>


<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不初始化没有配置文件数据等  或者 /usr/pgsql-13/bin/postgresql-13-setup initdb</span></span><br><span class="line">postgresql-setup initdb  </span><br></pre></td></tr></table></figure>

<h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><p>安装 postgresql 后，会创建 <code>postgres</code> 用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换用户</span></span><br><span class="line">su -postgres</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换成功后. 可以看到命令行变为</span></span><br><span class="line"></span><br><span class="line">[root@alexliu ~]<span class="comment"># su - postgres</span></span><br><span class="line">上一次登录：三 12月  9 11:11:56 CST 2020pts/0 上</span><br><span class="line">-bash-4.2$ </span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开 postgresql</span></span><br><span class="line"></span><br><span class="line">psql -U postgres</span><br><span class="line"></span><br><span class="line"><span class="comment"># 成功后</span></span><br><span class="line">-bash-4.2$ psql -U postgres</span><br><span class="line">psql (9.2.24)</span><br><span class="line">输入 <span class="string">&quot;help&quot;</span> 来获取帮助信息.</span><br><span class="line"></span><br><span class="line">postgres=<span class="comment"># </span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改密码, 密码内容自定义 , 注意语句结束需要加上 `;`</span></span><br><span class="line">ALTER USER postgres with encrypted password <span class="string">&#x27;abc123&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改完成后 </span></span><br><span class="line">\q      <span class="comment"># 退出 postgresql</span></span><br><span class="line"><span class="built_in">exit</span>    <span class="comment"># 退出 postgresql 后输入 exit 返回 root 用户</span></span><br></pre></td></tr></table></figure>

<h3 id="获取配置目录"><a href="#获取配置目录" class="headerlink" title="获取配置目录"></a>获取配置目录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换用户</span></span><br><span class="line">su -postgres</span><br><span class="line"><span class="comment"># 打开 postgresql</span></span><br><span class="line">psql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询config_file</span></span><br><span class="line">postgres=<span class="comment"># show config_file;</span></span><br><span class="line">             config_file             </span><br><span class="line">-------------------------------------</span><br><span class="line"> /data/pgsql/13/data/postgresql.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询当前数据目录</span></span><br><span class="line">postgres=<span class="comment"># show data_directory;</span></span><br><span class="line">   data_directory    </span><br><span class="line">---------------------</span><br><span class="line"> /data/pgsql/13/data</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="允许远程登陆"><a href="#允许远程登陆" class="headerlink" title="允许远程登陆"></a>允许远程登陆</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /var/lib/pgsql/13/data/postgresql.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开配置后</span></span><br><span class="line">:<span class="built_in">set</span> number <span class="comment"># 开启行号显示</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把第 59 行的 监听地址 改为 * . 默认是注释掉的</span></span><br><span class="line">59 listen_addresses = <span class="string">&#x27;*&#x27;</span>                   <span class="comment"># what IP address(es) to listen on;</span></span><br><span class="line">60                                          <span class="comment"># comma-separated list of addresses;</span></span><br><span class="line">61                                          <span class="comment"># defaults to &#x27;localhost&#x27;; use &#x27;*&#x27; for all</span></span><br></pre></td></tr></table></figure>


<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /var/lib/pgsql/13/data/pg_hba.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开配置后， 找到如下配置（最后面）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># TYPE  DATABASE        USER            ADDRESS                 METHOD</span></span><br><span class="line"><span class="comment"># &quot;local&quot; is for Unix domain socket connections only</span></span><br><span class="line"><span class="built_in">local</span>   all             all                                     peer</span><br><span class="line"><span class="comment"># IPv4 local connections:</span></span><br><span class="line">host    all             all             127.0.0.1/32            ident</span><br><span class="line"><span class="comment"># IPv6 local connections:</span></span><br><span class="line">host    all             all             ::1/128                 ident</span><br><span class="line"><span class="comment"># Allow replication connections from localhost, by a user with the</span></span><br><span class="line"><span class="comment"># replication privilege.</span></span><br><span class="line"><span class="comment">#local   replication     postgres                                peer</span></span><br><span class="line"><span class="comment">#host    replication     postgres        127.0.0.1/32            ident</span></span><br><span class="line"><span class="comment">#host    replication     postgres        ::1/128                 ident</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加如下内容在最后</span></span><br><span class="line">host    all             all             0.0.0.0/0               md5</span><br></pre></td></tr></table></figure>


<h2 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h2><h3 id="启动-停止-开机启动"><a href="#启动-停止-开机启动" class="headerlink" title="启动\停止\开机启动"></a>启动\停止\开机启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start postgresql</span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">systemctl start postgresql</span><br><span class="line"><span class="comment"># 状态</span></span><br><span class="line">systemctl status postgresql</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">systemctl restart postgresql</span><br><span class="line"><span class="comment"># 开机启动 </span></span><br><span class="line">systemctl <span class="built_in">enable</span> postgresql</span><br></pre></td></tr></table></figure>

<h3 id="防火墙配置"><a href="#防火墙配置" class="headerlink" title="防火墙配置"></a>防火墙配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --add-service=postgresql --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=5432/tcp --permanent          <span class="comment"># 5432为postgresql端口</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看防火墙开放端口</span></span><br><span class="line">firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>CentOS7</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
        <tag>database</tag>
        <tag>postgresql</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-compose 命令详解</title>
    <url>/post/efe1c160.html</url>
    <content><![CDATA[<h2 id="docker-compose-命令详解"><a href="#docker-compose-命令详解" class="headerlink" title="docker-compose 命令详解"></a>docker-compose 命令详解</h2><p>docker-compose的使用非常类似于docker命令的使用，但是需要注意的是大部分的compose命令都需要到docker-compose.yml文件所在的目录下才能执行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令聚合每个容器的输出，命令退出时，所有容器都将停止。</span></span><br><span class="line">docker-compose up </span><br><span class="line">		</span><br><span class="line"><span class="comment"># 在后台启动容器并使它们保持运行。</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看该容器的启动的日志打印(日志从头打印)。</span></span><br><span class="line">docker-compose logs -f</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某一容器的启动的日志打印(日志从头打印)。</span></span><br><span class="line">docker logs -f &lt;container_id&gt; 			</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某一容器的启动的日志打印(查看最后n条日志打印)。 例：`docker logs -f --tail 50 44b `</span></span><br><span class="line">docker logs -f --<span class="built_in">tail</span> &lt;数量&gt; &lt;container_id&gt; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止compose服务。</span></span><br><span class="line">docker-compose stop 				</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启compose服务。</span></span><br><span class="line">docker-compose restart 				</span><br><span class="line"></span><br><span class="line"><span class="comment"># kill compose服务。</span></span><br><span class="line">docker-compose <span class="built_in">kill</span> 					</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看compose服务状态。</span></span><br><span class="line">docker-compose ps 						</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除compose服务。	</span></span><br><span class="line">docker-compose <span class="built_in">rm</span> 						</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
        <tag>Docker</tag>
        <tag>docker-compose</tag>
        <tag>MacOS</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-compose使用多个compose文件创建不同镜像</title>
    <url>/post/1ed713cb.html</url>
    <content><![CDATA[<p>同一个application下，有多个应用，不同的compose.yaml文件，怎么分开创建</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 我们通常都是1个文件, 默认读取的 docker-compose.yml</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取文件名不是 docker-compose.yml 的文件</span></span><br><span class="line">docker-compose -f docker-compose-demo.yml up -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同时读取多个文件</span></span><br><span class="line">docker-compose -f docker-compose-demo.yml -f /your/path/dir/docker-compose-other.yml up -d</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong> 2个文件中如果配置相同，比如都叫 <code>web</code>, 后一个文件会替换第一个文件的内容。所以多个文件的内容需要是不一样的。</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS 安装 opencv3.4</title>
    <url>/post/c9ba1314.html</url>
    <content><![CDATA[<p>介绍在 MacOs 下安装 OpenCV 3.x</p>
<span id="more"></span>

<blockquote>
<p>环境<br>macOS Sierra</p>
<p>opencv 3.x</p>
</blockquote>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>参看官网文档，<a href="http://opencv-java-tutorials.readthedocs.io/en/latest/01-installing-opencv-for-java.html#install-opencv-3-x-under-macos">Installing OpenCV for Java under macOS</a></p>
<ol>
<li><p>安装 Homebrew</p>
</li>
<li><p>安装 xcode, 一般如果用Mac作开发，都是安装了的，可以忽略这步骤.<code>xcode-select --install</code></p>
</li>
<li><p>安装 ant 编译 <code>brew install ant</code> 安装后命令路径 <code>/usr/local/bin/ant</code></p>
</li>
<li><p>安装 openCV，默认 openCV 是不会编译成 java 的 jar包的。所以需要先修改opencv 配置文件来支持 java 编译成 jar。</p>
<ul>
<li><code>brew edit opencv</code> 打开 brew 对 opencv 的安装配置。</li>
<li>修改<code>-DBUILD_opencv_java=OFF</code> 为 <code>-DBUILD_opencv_java=ON</code>,然后保存</li>
<li>安装 opencv <code>brew install --build-from-source opencv</code></li>
</ul>
<p> <strong>等待安装完成即可。</strong></p>
<blockquote>
<p>安装过程中几个说明</p>
<ul>
<li>安装过程跟网络环境有直接关系，最好翻墙，或者更换 homebrew 源。我是翻墙的，所以下载读取资源差不多耗时15分钟。</li>
<li>最后一步安装 opencv 时，全程无状态条，只有命令行窗口头部不定期的更新文件头，总之不要认为他挂掉了而把它关掉。我是 15年 macbook pro ，差不多这一个步骤20分钟左右。<br/></li>
<li>全程安装了差不多40分钟。</li>
</ul>
</blockquote>
</li>
<li><p>opencv 安装后的路径。<code>/usr/local/Cellar/opencv</code></p>
</li>
<li><p>opencv java 编译后的 jar 及 macos 动态库位置<code>/usr/local/Cellar/opencv/3.x.x/share/OpenCV/java/</code> </p>
</li>
</ol>
<h2 id="Java-创建-java-项目"><a href="#Java-创建-java-项目" class="headerlink" title="Java 创建 java 项目"></a>Java 创建 java 项目</h2><p>参看官网文档，<a href="http://opencv-java-tutorials.readthedocs.io/en/latest/02-first-java-application-with-opencv.html">Your First Java Application with OpenCV</a></p>
<p>创建 java 项目。</p>
<ul>
<li>普通项目，直接复制 lib 至项目中</li>
<li>maven 项目，配置本地加载 lib 即可  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.opencv<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>opencv<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>/usr/local/Cellar/opencv/3.4.0_1/share/OpenCV/java/opencv-340.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloCV</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);</span><br><span class="line">        <span class="type">Mat</span> <span class="variable">mat</span> <span class="operator">=</span> Mat.eye(<span class="number">3</span>, <span class="number">3</span>, CvType.CV_8UC1);</span><br><span class="line">        System.out.println(<span class="string">&quot;mat = &quot;</span> + mat.dump());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="关于加载动态库"><a href="#关于加载动态库" class="headerlink" title="关于加载动态库"></a>关于加载动态库</h2><h3 id="通过-System-loadLibrary-加载"><a href="#通过-System-loadLibrary-加载" class="headerlink" title="通过 System.loadLibrary() 加载"></a>通过 System.loadLibrary() 加载</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.loadLibrary(Core.NATIVE_LIBRARY_NAME);</span><br></pre></td></tr></table></figure>

<p>您需要在您的 IDE 中设置加载动态库</p>
<ul>
<li>windows 下加载 dll 文件</li>
<li>macos 下加载 dylib 文件</li>
</ul>
<p>官网提示的方法：</p>
<ul>
<li><a href="http://opencv-java-tutorials.readthedocs.io/en/latest/01-installing-opencv-for-java.html#set-up-opencv-for-java-in-eclipse">Set up OpenCV for Java in Eclipse</a></li>
<li><a href="http://opencv-java-tutorials.readthedocs.io/en/latest/01-installing-opencv-for-java.html#set-up-opencv-for-java-in-other-ides-experimental">Set up OpenCV for Java in other IDEs</a></li>
</ul>
<h3 id="通过System-load-加载"><a href="#通过System-load-加载" class="headerlink" title="通过System.load()加载"></a>通过System.load()加载</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">opencvpath</span> <span class="operator">=</span> <span class="string">&quot;/usr/local/Cellar/opencv/3.4.0_1/share/OpenCV/java/libopencv_java340.dylib&quot;</span>;</span><br><span class="line">System.load(opencvpath);</span><br></pre></td></tr></table></figure>

<p>这种方式更灵活，方便根据您的系统环境来决定加载路径。适合软件在部署时。</p>
<p>自己写了个 loadLibraries 函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loadLibraries</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">fileOut</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">osName</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">opencvpath</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//windows</span></span><br><span class="line">        <span class="keyword">if</span>(osName.startsWith(<span class="string">&quot;Windows&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">bitness</span> <span class="operator">=</span> Integer.parseInt(System.getProperty(<span class="string">&quot;sun.arch.data.model&quot;</span>));</span><br><span class="line">            <span class="comment">//32位系统</span></span><br><span class="line">            <span class="keyword">if</span>(bitness == <span class="number">32</span>) &#123;</span><br><span class="line">                opencvpath=opencvpath+<span class="string">&quot;\\opencv\\x86\\Your path to .dll&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//64位系统</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (bitness == <span class="number">64</span>) &#123; </span><br><span class="line">                opencvpath=opencvpath+<span class="string">&quot;\\opencv\\x64\\Your path to .dll&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">                opencvpath=opencvpath+<span class="string">&quot;\\opencv\\x86\\Your path to .dll&quot;</span>; </span><br><span class="line">            &#125;           </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">// mac os</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(osName.equals(<span class="string">&quot;Mac OS X&quot;</span>))&#123;</span><br><span class="line">            opencvpath = opencvpath+<span class="string">&quot;Your path to .dylib&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(opencvpath);</span><br><span class="line">        System.load(opencvpath);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Failed to load opencv native library&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="安装过程的坑"><a href="#安装过程的坑" class="headerlink" title="安装过程的坑"></a>安装过程的坑</h2><h3 id="找不到-libjpeg-8-dylib"><a href="#找不到-libjpeg-8-dylib" class="headerlink" title="找不到 libjpeg.8.dylib"></a>找不到 libjpeg.8.dylib</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Library not loaded: /usr/local/opt/jpeg/lib/libjpeg.8.dylib</span><br><span class="line">  Referenced from: xxxxx</span><br><span class="line">  Reason: image not found</span><br></pre></td></tr></table></figure>

<p>这个算是 brew 安装 opencv 的一个 bug，通过 brew 安装 opencv，会安装最新的 libjpeg 包。<br>在我安装时，安装的<code>9b</code>版本。并没有<code>8d</code>版。而opencv3.x 使用的<code>8d</code>版。 出现这种情况有几种解决办法。</p>
<h4 id="安装libjpeg，8d-版本"><a href="#安装libjpeg，8d-版本" class="headerlink" title="安装libjpeg，8d 版本"></a>安装libjpeg，8d 版本</h4><p>我是参考stack overflow 上的回答来解决的。<a href="https://stackoverflow.com/questions/32703296/dyld-library-not-loaded-usr-local-lib-libjpeg-8-dylib-homebrew-php">原文地址</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -c http://www.ijg.org/files/jpegsrc.v8d.tar.gz</span><br><span class="line">tar xzf jpegsrc.v8d.tar.gz</span><br><span class="line"><span class="built_in">cd</span> jpeg-8d</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line"><span class="built_in">cp</span> ./.libs/libjpeg.8.dylib /usr/local/opt/jpeg/lib</span><br></pre></td></tr></table></figure>

<p>当然，我们没有 wget，所以把地址复制下来，浏览器打开下载即可。第二部解压也可手动解压了。<br>所以可以简化为如下4步即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> jpeg-8d</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line"><span class="built_in">cp</span> ./.libs/libjpeg.8.dylib /usr/local/opt/jpeg/lib</span><br></pre></td></tr></table></figure>

<h4 id="通过编译方式解决"><a href="#通过编译方式解决" class="headerlink" title="通过编译方式解决"></a>通过编译方式解决</h4><p>这个没试过，需要手动安装opencv，make 运行环境，手动 ant。</p>
<p>在手动安装 make 时，老是出错，就放弃了。</p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>OpenCV</tag>
      </tags>
  </entry>
  <entry>
    <title>Macos 回退系统安装 Mojava</title>
    <url>/post/aff78914.html</url>
    <content><![CDATA[<p>苹果系统（macOS）虽然稳定，但凡事都有例外，比如换硬盘、对新系统不满意、软件不兼容等问题想重装系统，下面就说说通过制作U盘安装 Mojava 10.14.6 </p>
<p>U盘进行重装的方法，重装等待的时间短，操作也不复杂。</p>
<ul>
<li>准备一个8G以上的U盘 （最好两个，我当时第一个U盘在复制文件时，老是0%，换了个u盘就好了）</li>
<li>U盘建议USB 3.0以上</li>
</ul>
<span id="more"></span>

<h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><h4 id="App-Store"><a href="#App-Store" class="headerlink" title="App Store"></a>App Store</h4><p><a href="https://apps.apple.com/us/app/macos-mojave/id1398502828?mt=12">https://apps.apple.com/us/app/macos-mojave/id1398502828?mt=12</a></p>
<p>App Store 下载后会保存在 Application 中。<br>App Store 可能会存在与系统不兼容，不让下载。可以尝试通过第三方下载。</p>
<h4 id="第三方"><a href="#第三方" class="headerlink" title="第三方"></a>第三方</h4><ul>
<li><p>参考: <a href="https://www.pc6.com/mac/582745.html">https://www.pc6.com/mac/582745.html</a></p>
</li>
<li><p>参考： <a href="https://sysin.org/blog/macOS-Mojave/">https://sysin.org/blog/macOS-Mojave/</a></p>
<p>  macOS Mojave 10.14.0 (18A391) - 2018-09-24<br>  百度网盘链接：<a href="https://pan.baidu.com/s/1KShzukqbw1qsXFOfOOw4DA?pwd=iauw">https://pan.baidu.com/s/1KShzukqbw1qsXFOfOOw4DA?pwd=iauw</a></p>
<p>  macOS Mojave 10.14.5 (18F132) - 2019-05-13<br>  百度网盘链接：<a href="https://pan.baidu.com/s/1Vx77Tp1MejzPXPor4MLTMA?pwd=8caj">https://pan.baidu.com/s/1Vx77Tp1MejzPXPor4MLTMA?pwd=8caj</a></p>
<p>  macOS Mojave 10.14.6 (18G103) - Supplemental Update - 2019-09-26<br>  百度网盘链接：<a href="https://pan.baidu.com/s/1XEee7JigYydw1yEgevsdmg?pwd=hv5g">https://pan.baidu.com/s/1XEee7JigYydw1yEgevsdmg?pwd=hv5g</a></p>
</li>
<li><p>参考： <a href="https://www.imacpc.net/archives/4153">https://www.imacpc.net/archives/4153</a></p>
</li>
</ul>
<h3 id="获取-Install-macOS-Mojava-app"><a href="#获取-Install-macOS-Mojava-app" class="headerlink" title="获取 Install macOS Mojava.app"></a>获取 Install macOS Mojava.app</h3><ul>
<li>App Store 下载的，默认在 <code>/Application</code> 中。</li>
<li>第三方下载，如果下载的是 <code>.app</code> 请拖到<code>应用程序</code>中。 也就是 <code>/Application</code>中。</li>
<li>第三方下载，如果下载的是 <code>.dmg</code> 直接安装，会直接在安装在 <code>/Application</code>中。</li>
</ul>
<p>完成后检查 <code>/Application</code> 也就是 <code>应用程序</code>中是否存在 <code>Install macOS Mojava.app</code>,中文系统会翻译为 <code>安装 macOS Mojava.app</code></p>
<h3 id="制作启动盘"><a href="#制作启动盘" class="headerlink" title="制作启动盘"></a>制作启动盘</h3><h4 id="备份U盘数据"><a href="#备份U盘数据" class="headerlink" title="备份U盘数据"></a>备份U盘数据</h4><p>U盘会被格式化，如果存在重要资料请备份</p>
<h4 id="格式化U盘"><a href="#格式化U盘" class="headerlink" title="格式化U盘"></a>格式化U盘</h4><p><img src="https://s2.loli.net/2022/11/08/7AlSp3inagCOm8V.jpg"></p>
<ul>
<li>打开 <code>磁盘工具</code> ，菜单栏选择 “显示 -&gt; 显示所有设备”</li>
<li>选择U盘，注意是U盘的上一级</li>
<li>点击 <code>抹掉</code></li>
<li>格式化U盘，名称 <code>Mojava</code>, 格式 <code>Mac OS扩展(日志式)</code>, 方案 <code>GUID分区图</code></li>
</ul>
<h4 id="制作启动U盘"><a href="#制作启动U盘" class="headerlink" title="制作启动U盘"></a>制作启动U盘</h4><p>制作U盘前，请先备份U盘重要数据.</p>
<p>执行制作U盘启动命令 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果名称不一致，规则如下, 注意空格</span></span><br><span class="line"><span class="comment"># sudo &lt;Install macOS Mojava.app 路径&gt;/Contents/Resources/createinstallmedia --volume &lt;U盘路径&gt; &lt;Install macOS Mojava.app 路径&gt; --nointeraction</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">sudo /Applications/Install\ macOS\ Mojave.app/Contents/Resources/createinstallmedia --volume /Volumes/Mojave /Applications/Install\ macOS\ Mojave.app --nointeraction</span><br></pre></td></tr></table></figure>

<p>执行结果如下。 执行过程时间不等，视您手上电脑性能、U盘传输速度决定。  正常情况下3-5分钟。如果出现 <code>Copying to disk</code> 一直是 0%, 建议换一块U盘试试。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /Applications/Install\ macOS\ Mojave.app/Contents/Resources/createinstallmedia --volume /Volumes/Mojave /Applications/Install\ macOS\ Mojave.app --nointeraction</span><br><span class="line">Password:</span><br><span class="line">Erasing Disk: 0%... 10%... 20%... 30%... 100%</span><br><span class="line">Copying to disk: 0%... 10%... 20%... 30%... 40%... 50%... 60%... 70%... 80%... 90%... 100%</span><br><span class="line">Making disk bootable...</span><br><span class="line">Copying boot files...</span><br><span class="line">Install media now available at <span class="string">&quot;/Volumes/Install macOS Mojave&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="安装-Mojava"><a href="#安装-Mojava" class="headerlink" title="安装 Mojava"></a>安装 Mojava</h3><ul>
<li>安装前请先备份电脑中所有的重要文件，会格式化整个硬盘</li>
<li>重启电脑，长按 <code>option</code> 会进入 <code>OSX 实用工具</code>, 选择 <code>Install macOS Mojava</code>。</li>
<li>选择<code>磁盘工具</code>, 选择电脑<code>系统盘</code> -&gt; <code>抹掉</code>。 格式根据系统决定，10.3以上系统版本请选择<code>APFS</code>磁盘格式，10.3以下系统版本选择<code>Mac OS 扩展</code>磁盘格式。 格式化以后退出<code>磁盘工具</code></li>
<li>选择<code>安装macOS</code></li>
</ul>
<h4 id="安装中出现应用程序副本已损坏，不能用来安装Mac-OS"><a href="#安装中出现应用程序副本已损坏，不能用来安装Mac-OS" class="headerlink" title="安装中出现应用程序副本已损坏，不能用来安装Mac OS"></a>安装中出现应用程序副本已损坏，不能用来安装Mac OS</h4><ul>
<li>点右上角wifi，关闭wifi，断开网络</li>
<li>点菜单栏-&gt; 实用工具-&gt; 打开终端</li>
<li>终端输入：date 032208102015.20</li>
<li>退出终端，重新选择<code>安装 macOS</code>即可</li>
</ul>
<p>此方法适用于 10.8 ~ 10.15 所有版本</p>
<p>整个操作时间一般半个小时左右，安装的快慢取决于USB读取速度和电脑性能，完成以后电脑会自动重启。等整个进度条走完，再进行简单的用户设置，就和刚买来的一样了。而刚刚重装的U盘也可以留着以后重装系统用。</p>
]]></content>
      <categories>
        <category>MacOS</category>
      </categories>
      <tags>
        <tag>技巧</tag>
        <tag>Mojava 10.14.6 启动U盘</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot+freemarker+pjax 实现单页局部刷新</title>
    <url>/post/ec3b14f1.html</url>
    <content><![CDATA[<p>使用 Springboot + freemarker + pjax 实现单页应用，局部刷新。提升用户体验，降低服务器压力。</p>
<span id="more"></span>


<h2 id="示例说明"><a href="#示例说明" class="headerlink" title="示例说明"></a>示例说明</h2><ul>
<li>下载<a href="https://github.com/liuqi0725/springboot-useful/tree/master/springboot-freemarker-pjax">测试包</a> 建议使用 <code>GitZip for github</code> 插件下载独立目录</li>
<li>修改 <code>application.yaml</code> 配置，不改保持默认也可以.</li>
<li>启动后访问 <a href="http://localhost:8080/">http://localhost:8080</a></li>
</ul>
<p><a href='https://gitee.com/alexliu0725/springboot-useful'><img src='https://gitee.com/alexliu0725/springboot-useful/widgets/widget_6.svg' alt='Fork me on Gitee'></img></a></p>
<h2 id="为什么用-freemarker"><a href="#为什么用-freemarker" class="headerlink" title="为什么用 freemarker"></a>为什么用 freemarker</h2><p>虽然 <a href="https://www.thymeleaf.org/">thymeleaf</a> 是 springboot 官方推荐的模板，优点一大堆。<br>如果你是（研发、UI）一起使用，建议使用<a href="https://www.thymeleaf.org/">thymeleaf</a>,毕竟可以直接运行显示静态数据，UI、研发互补干扰。这一块就吊打了 freemaker。</p>
<p>其他情况我会选择 freemarker。不为其他的，写起来方便，随便百度一篇文章，语法这一块就基本明白了。而且 freemarker 的语法跟我们平时的编码语法很接近，<br>你就不用在写的过程去考虑语法该怎么写。</p>
<p>比如常用的 if、for：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;#assign a = 1 /&gt;</span><br><span class="line">&lt;#assign b = 2 /&gt;</span><br><span class="line"></span><br><span class="line">&lt;#if a == b &gt;</span><br><span class="line">    ...do something</span><br><span class="line">&lt;#elseif a == 1 &gt;</span><br><span class="line">    ...do something</span><br><span class="line">&lt;#else&gt;</span><br><span class="line">    ...do something</span><br><span class="line">&lt;/#if&gt;</span><br><span class="line"></span><br><span class="line">&lt;#list userlist as user&gt;</span><br><span class="line">    ...do something</span><br><span class="line">&lt;/#list&gt;</span><br></pre></td></tr></table></figure>

<p>总之还没入坑<a href="https://www.thymeleaf.org/">thymeleaf</a>的同学，有这个空闲时间学习<a href="https://www.thymeleaf.org/">thymeleaf</a>还不如学个前端框架来的实际。</p>
<blockquote>
<p>题外话:用<a href="https://www.thymeleaf.org/">thymeleaf</a>实现局部刷新，比 freemaker 简单</p>
</blockquote>
<h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><ul>
<li><p>定义 2 套模板。 </p>
<ul>
<li>一套用于初始化、页面刷新</li>
<li>一套 pjax 模板，普通请求</li>
</ul>
</li>
<li><p>添加 Pjax 拦截器</p>
<ul>
<li>拦截器中判断是否 pjax，并根据结果返回指定模板</li>
<li>由于 pjax 请求不能继承父页面，只能刷新局部，所以如果需要对父页面的一些动态内容进行指定，需要在拦截器中完成</li>
</ul>
</li>
<li><p>页面渲染原理</p>
<ul>
<li>普通请求：利用 Freemarker 的 macro 在子页面进行替换操作</li>
<li>pjax 请求：利用 Freemarker 的 macro 在子页面进行替换操作，并动态添加到指定的 div 中，实现局部刷新</li>
</ul>
<blockquote>
<p>我测试下，不能使用 freemarker 插件的 extend override等，如果能使用，请高手指教。</p>
</blockquote>
</li>
</ul>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h4 id="菜单选中"><a href="#菜单选中" class="headerlink" title="菜单选中"></a>菜单选中</h4><p>为了保证页面刷新后，菜单保持不变。建议菜单放在 <strong>cookie</strong> 中。也可以利用缓存保持。</p>
<h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><p>头部添加<br>request.headers[‘X-PJAX-URL’] = “<a href="http://35liuqi.com/redirect&quot;">http://35liuqi.com/redirect&quot;</a></p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>Springboot</tag>
        <tag>freemarker</tag>
        <tag>pjax</tag>
      </tags>
  </entry>
  <entry>
    <title>termius终端中文乱码处理</title>
    <url>/post/46a9669c.html</url>
    <content><![CDATA[<p><a href="https://termius.com/">termius</a> 是 Mac上非常好用的命令行扩展。 但是对中文支持非常差。下面介绍如何修改支持中文。</p>
<h3 id="打开配置文件"><a href="#打开配置文件" class="headerlink" title="打开配置文件"></a>打开配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi ~/.zshrc </span><br></pre></td></tr></table></figure>

<h3 id="加入配置"><a href="#加入配置" class="headerlink" title="加入配置"></a>加入配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> LANG=en_US.UTF-8</span><br></pre></td></tr></table></figure>

<h3 id="启用配置"><a href="#启用配置" class="headerlink" title="启用配置"></a>启用配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>

<p>重启<a href="https://termius.com/">termius</a>即可</p>
]]></content>
      <categories>
        <category>MacOS</category>
      </categories>
      <tags>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS 使用 SSH 方式连接服务器</title>
    <url>/post/e8f3c962.html</url>
    <content><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>服务器： centos7 64 位<br>客户端： Macos 10.13</p>
<p>内容主要讲解本地证书创建，拷贝证书，本地别名等</p>
<h2 id="创建证书"><a href="#创建证书" class="headerlink" title="创建证书"></a>创建证书</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -t 秘钥类型 默认 rsa 可以省略</span></span><br><span class="line"><span class="comment"># -C 注释文字，一般是你的邮箱，可以省略</span></span><br><span class="line"><span class="comment"># -f 是存放文件及名称。不加的话，默认是 id_rsh</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;xxx@xx.com&quot;</span> -f ~/.ssh/id_rsa_gitee</span><br></pre></td></tr></table></figure>

<p>创建后 保存在 <code>~/.ssh</code>目录下</p>
<blockquote>
<p>如果之前创建过很多证书，在 ~/.ssh 目录下会有 <code>known_hosts</code> 文件。<br>如果创建失败。可以删除该文件。</p>
</blockquote>
<h2 id="拷贝公钥到服务器"><a href="#拷贝公钥到服务器" class="headerlink" title="拷贝公钥到服务器"></a>拷贝公钥到服务器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># macos</span></span><br><span class="line"><span class="comment"># 如果没有修改过默认端口 22，不需要填端口</span></span><br><span class="line">scp -P &lt;端口&gt; ~/.ssh/your_id.pub &lt;用户名&gt;@&lt;服务器ip地址&gt;:/home/ssh_key/your_id.pub</span><br></pre></td></tr></table></figure>

<h2 id="服务器设置客户端公钥"><a href="#服务器设置客户端公钥" class="headerlink" title="服务器设置客户端公钥"></a>服务器设置客户端公钥</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 登陆服务器</span></span><br><span class="line"><span class="comment"># `/home/ssh_key/your_id.pub` 为你执行 scp 时 复制到服务器的公钥</span></span><br><span class="line"><span class="built_in">cat</span> /home/ssh_key/your_id.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 此时链接就不需要密码了</span></span><br><span class="line"><span class="comment"># 如果没有修改过默认端口 22，不需要填端口</span></span><br><span class="line">ssh -P &lt;端口&gt; &lt;用户名&gt;@&lt;服务器ip地址&gt;</span><br></pre></td></tr></table></figure>

<h2 id="快捷登陆"><a href="#快捷登陆" class="headerlink" title="快捷登陆"></a>快捷登陆</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 ~/.ssh 下新建 config</span></span><br><span class="line">vi ~/.ssh config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加配置</span></span><br><span class="line">Host            alias_PC        <span class="comment"># 自定义别名</span></span><br><span class="line">HostName        hostname        <span class="comment"># 替换为你的 ssh 服务 ip 或 domain</span></span><br><span class="line">Port            port            <span class="comment"># ssh 服务器端口</span></span><br><span class="line">User            user            <span class="comment"># ssh 服务器用户</span></span><br><span class="line">IdentityFile    ~/.ssh/your_id  <span class="comment"># 注意此时是秘钥，不需要加 `.pub`</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加后就可以通过别名 直接快捷链接</span></span><br><span class="line">ssh alias_PC</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>MacOS</category>
      </categories>
      <tags>
        <tag>MacOS</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>内网穿透 FRP 安装配置使用</title>
    <url>/post/f3ebe7d9.html</url>
    <content><![CDATA[<p>内网没有公网IP，但是又有需要提供内网机器上部署的应用或者服务器给外网访问，这个动作就是内网穿透。ngrok、<a href="https://gofrp.org/">frp</a> 等工具就是用来干这个的。  <a href="https://gofrp.org/">frp</a> 支持tcp、udp、http、https等协议类型，并且支持web服务器根据域名进行路由转发。</p>
<span id="more"></span>


<h2 id="配置前准备"><a href="#配置前准备" class="headerlink" title="配置前准备"></a>配置前准备</h2><ul>
<li>公网服务器一台</li>
<li>本地计算机一台(笔记本/台式主机/服务器均可)</li>
<li>根据系统下载所需包<a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a>  </li>
</ul>
<p><strong>PS:</strong> 下载包时，要考虑服务端（公网服务器）、客户端（本地计算机）的系统及芯片。  比如服务端为 centos7 64 位，  客户端为 MacOs 。 那么服务端下载的是 <code>frp_xx.xx.xx_linux_xxxx.tar.gz</code> ， 客户端下载的是 <code>frp_xx.xx.xx_darwin_xxxxx.tar.gz</code></p>
<h2 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h2><ul>
<li>服务器系统为 Centos7 AMD 64位</li>
<li>frp 存储目录为 /usr/local/etc/frp</li>
</ul>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>根据系统下载服务端文件 <a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目录可存放在自己想存放的位置</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/etc/</span><br><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.37.0/frp_0.37.0_linux_arm64.tar.gz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -zxvf frp_0.37.0_linux_arm64.tar.gz</span><br><span class="line"><span class="comment"># 重命名</span></span><br><span class="line"><span class="built_in">mv</span> frp_0.37.0_linux_arm64 frp</span><br></pre></td></tr></table></figure>

<p>修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 到 frp 存放目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/etc/frp</span><br><span class="line"><span class="comment"># 修改配置 frps.ini </span></span><br><span class="line">vi frps.ini</span><br></pre></td></tr></table></figure>

<p>frps.ini 配置修改，更多高阶配置参考<a href="https://gofrp.org/">frp</a> 文档</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line"><span class="comment"># 客户端通信端口</span></span><br><span class="line">bind_port = 7000        </span><br><span class="line"><span class="comment"># 访问 web 端口   </span></span><br><span class="line">vhost_http_port = 6800    </span><br><span class="line"><span class="comment"># 身份验证</span></span><br><span class="line">token = 123456</span><br></pre></td></tr></table></figure>

<p>防火墙开放端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 端口修改为您 frps.ini 设置的 bind_port </span></span><br><span class="line">firewall-cmd --zone=public --add-port=7000/tcp --permanent </span><br><span class="line"><span class="comment"># 重启防火墙</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>


<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>启动方式有 2 种，2 选 1 即可</p>
<ul>
<li>命令行直接启动（不推荐）</li>
<li>配置到系统服务中</li>
</ul>
<h4 id="配置到系统服务中"><a href="#配置到系统服务中" class="headerlink" title="配置到系统服务中"></a>配置到系统服务中</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 复制服务到系统服务中。 注意切换到你的 frp 保存路径</span></span><br><span class="line"><span class="built_in">cp</span> /usr/local/etc/frp/systemd/frps.service /etc/systemd/system/frps.service</span><br><span class="line"><span class="comment"># 编辑 service</span></span><br><span class="line">vi /etc/systemd/system/frps.service</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Frp Server Service</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line"><span class="comment"># User=nobody, 如果要 frp 独占 80 端口需要注释掉。但大多数情况我相信大部分人都是用的 nginx 转发</span></span><br><span class="line">User=nobody</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5s</span><br><span class="line"><span class="comment"># 此处切换为你的 frp 路径</span></span><br><span class="line">ExecStart=/usr/local/etc/frp/frps -c /usr/local/etc/frp/frps.ini</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>


<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> frps</span><br><span class="line"><span class="comment"># 启动 frp</span></span><br><span class="line">systemctl start frps</span><br></pre></td></tr></table></figure>

<h4 id="控制台启动（不推荐）"><a href="#控制台启动（不推荐）" class="headerlink" title="控制台启动（不推荐）"></a>控制台启动（不推荐）</h4><p>不推荐控制台启动</p>
<ul>
<li>显示启动，关闭 bash 就停止了</li>
<li>后台启动，不方便关闭。 </li>
<li>命令复杂，不容易记忆</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示启动，关闭 bash 窗口，程序就停止了</span></span><br><span class="line">./frps -c ./frps.ini       </span><br><span class="line"><span class="comment"># 后台启动，不便于关闭。关闭方法自行搜索  </span></span><br><span class="line"><span class="built_in">nohup</span> ./frps -c ./frps.ini &amp;  </span><br></pre></td></tr></table></figure>

<h3 id="Nginx-转发配置"><a href="#Nginx-转发配置" class="headerlink" title="Nginx 转发配置"></a>Nginx 转发配置</h3><p>我使用的 https ，配置如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name frp.sample.com; </span><br><span class="line">    rewrite ^(.*) https://$server_name<span class="variable">$1</span> permanent;    <span class="comment"># 转发 443</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name frp.sample.com;  <span class="comment"># 修改域名/二级域名</span></span><br><span class="line"></span><br><span class="line">    underscores_in_headers on;      <span class="comment"># 允许传递带_ 的参数 默认 off</span></span><br><span class="line"></span><br><span class="line">    ssl_protocols TLSv1.2 TLSv1.3;</span><br><span class="line">    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;</span><br><span class="line">    ssl_prefer_server_ciphers off;</span><br><span class="line">    ssl_session_cache shared:SSL:10m;</span><br><span class="line">    ssl_session_timeout 1d;</span><br><span class="line">    ssl_session_tickets off;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ssl 证书</span></span><br><span class="line">    ssl_certificate /etc/letsencrypt/live/frp.sample.com/fullchain.pem;</span><br><span class="line">    ssl_certificate_key /etc/letsencrypt/live/frp.sample.com/privkey.pem;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        proxy_pass http://127.0.0.1:6800;   <span class="comment"># 转发到frps.ini 配置的 vhost_http_port 端口上</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h2><ul>
<li>本地计算机系统为 MacOS 11.4 Inter 64位</li>
<li>frp 存储目录为 /User/alexliu/tools/frp</li>
</ul>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>根据系统下载服务端文件 <a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /User/alexliu/tools/frp/frpc.ini</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件配置如下</span></span><br><span class="line"></span><br><span class="line">[common]</span><br><span class="line">server_addr = xxx.xxx.xxx.xxx   <span class="comment"># 公网服务器ip，部署 frps 服务端主机 ip</span></span><br><span class="line">server_port = 7000              <span class="comment"># 与服务端bind_port一致</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 公网通过ssh访问本机</span></span><br><span class="line">[ssh]</span><br><span class="line"><span class="built_in">type</span> = tcp                      <span class="comment"># 连接协议</span></span><br><span class="line">local_ip = xxx.xxx.xxx.xxx      <span class="comment"># 本地计算机ip</span></span><br><span class="line">local_port = 22                 <span class="comment"># ssh默认端口号</span></span><br><span class="line">remote_port = 6000              <span class="comment"># 自定义的访问内部ssh端口号</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 公网访问本机web服务器以http方式</span></span><br><span class="line">[web]</span><br><span class="line"><span class="built_in">type</span> = http                     <span class="comment"># 根据本地 web 服务协议来，如果本地 web 服务是 ssl，就是 https</span></span><br><span class="line">local_port = 8081               <span class="comment"># web 服务端口</span></span><br><span class="line">custom_domains = frp.sample.com <span class="comment"># 公网访问域名</span></span><br></pre></td></tr></table></figure>

<h3 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./frpc -c ./frpc.ini            <span class="comment"># 显示启动</span></span><br><span class="line"><span class="built_in">nohup</span> ./frpc -c ./frpc.ini &amp;    <span class="comment"># 后台启动</span></span><br></pre></td></tr></table></figure>


<h2 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h2><h3 id="自定义二级域名"><a href="#自定义二级域名" class="headerlink" title="自定义二级域名"></a>自定义二级域名</h3><p>自定义二级域名，可以分发至多个 web服务</p>
<ul>
<li>服务端修改</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br><span class="line">vhost_http_port = 6800</span><br><span class="line">token = 123456</span><br><span class="line"><span class="comment"># 设置主域名</span></span><br><span class="line">subdomain_host = frp.sample.com</span><br></pre></td></tr></table></figure>

<ul>
<li>客户端配置</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = xxx.xxx.xxx</span><br><span class="line">server_port = 7000</span><br><span class="line">token = 123456</span><br><span class="line"></span><br><span class="line">[web]</span><br><span class="line"><span class="built_in">type</span> = http</span><br><span class="line">local_port = 80</span><br><span class="line"><span class="comment"># 设置子域名</span></span><br><span class="line">subdomain = a</span><br><span class="line"></span><br><span class="line">[web1]</span><br><span class="line"><span class="built_in">type</span> = http</span><br><span class="line">local_port = 8080</span><br><span class="line"><span class="comment"># 设置子域名</span></span><br><span class="line">subdomain = b</span><br></pre></td></tr></table></figure>

<p>这时候 访问<code>a.frp.sample.com</code>访问 80 端口应用。  访问<code>b.frp.sample.com</code>访问8080端口应用。  nginx 转发需要改为泛域名 <code>*.frp.sample.com</code> ，如果是 https 需要申请泛域名证书</p>
<h3 id="Dashboard"><a href="#Dashboard" class="headerlink" title="Dashboard"></a>Dashboard</h3><p>Dashboard 是可以通过浏览器查看 <a href="https://gofrp.org/">frp</a> 的状态以及代理统计信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑 服务端 frps.ini</span></span><br><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br><span class="line">vhost_http_port = 6800</span><br><span class="line">token = 123456</span><br><span class="line"><span class="comment"># 设置主域名</span></span><br><span class="line">subdomain_host = frp.sample.com</span><br><span class="line"></span><br><span class="line">dashboard_port = 7500</span><br><span class="line"><span class="comment"># dashboard 用户名密码，默认都为 admin,为空则不需要</span></span><br><span class="line">dashboard_user = admin</span><br><span class="line">dashboard_pwd = admin</span><br></pre></td></tr></table></figure>

<p>然后开放服务端端口 7500 , 使用 IP:Port 即可访问。如果需要 nginx 转发，配置好后，转发 7500 即可</p>
]]></content>
      <categories>
        <category>CentOS7</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
        <tag>Nginx</tag>
        <tag>frp</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 Docker 的 ngrok 内网穿透部署</title>
    <url>/post/85afc9a0.html</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2022/02/09/YlfmtoQauLvU8qW.jpg"></p>
<p>ngrok 是一个反向代理，通过在公共的端点和本地运行的 Web 服务器之间建立一个安全的通道。ngrok 可捕获和分析所有通道上的流量，便于后期分析和重放。反向代理在计算机网络中是代理服务器的一种。</p>
<span id="more"></span>


<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><p><a href="https://ngrok.com/">Ngrok 官网</a> 目前已经切换为 ngrok2 。免费 8 小时<br><a href="https://github.com/tutumcloud/ngrok.git">Ngrok Github</a>  升级为 ngrok2 后已闭源。</p>
<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>最近痛下决心，把服务器重装系统了。一些软件，工具能用 docker 就用 docker。管理起来方便多了。所以 ngrok 也是用 docker 方式。17 年第一次装ngrok 时，就是直接在服务器上装的，装的过程很痛苦，各种包编译的问题，或者缺胳膊少腿的，折腾了 2-3 天，7，8 篇教程的综合才安装好。所以不建议在服务器上直接安装。 特别是一些没什么基础的小白。避免安装失败或者其他原因造成的服务器各类包安装冗余，甚至冲突。使用 docker 安装，不好用删了即可。</p>
<h2 id="为什么要搭建自己的-ngrok"><a href="#为什么要搭建自己的-ngrok" class="headerlink" title="为什么要搭建自己的 ngrok"></a>为什么要搭建自己的 ngrok</h2><ul>
<li>管理内网服务器，内网web进行演示</li>
<li>快速开发微信程序和第三方支付平台调试</li>
<li>本地WEB外网访问、本地开发微信、TCP端口转发</li>
</ul>
<p>国内内网穿透</p>
<ul>
<li><a href="https://www.oray.com/activity/190301/buy/?utm_source=baidu&utm_medium=cpc&utm_campaign=act_190301&i=45650&bd_vid=12322937661724432394">花生壳</a></li>
<li><a href="http://www.ngrok.cc/">Sunny-Ngrok</a></li>
</ul>
<p>至于搭建自己的 ngrok 服务的目的。 因为没有免费的…… </p>
<h2 id="选-ngrok-还是-frp"><a href="#选-ngrok-还是-frp" class="headerlink" title="选 ngrok 还是 frp"></a>选 ngrok 还是 frp</h2><p>首先你自己要清楚你的使用范围。 因为他的速度跟你服务器以及供应商息息相关。比如我买的搬瓦工VPS，倒数第二便宜那种。 那内网穿透也就仅限个人项目测试，小范围人群测试这种。  所以在这种情况下无需考虑 ngrok 或 frp 那个更优。 都慢的抓脑壳。</p>
<p>如果是公司使用，那还是建议在阿里云等服务器上搭建一个，速度也快，性能也好。  </p>
<p>至于 ngrok，frp 我都试过。 最后选了 ngrok，方便点</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li>公网 IP 的服务器 <ul>
<li>国内: 腾讯云，阿里云……</li>
<li>国外: 搬瓦工，Vultr, 亚马逊……</li>
</ul>
</li>
<li>域名<ul>
<li>可以找别人借你一个二级域名</li>
<li>可以买一个域名  便宜的首年 10 来块。 注意：推荐 GoDaddy 或者国外买域名</li>
</ul>
</li>
<li>Linux 系统。 本文不支持 windows</li>
</ul>
<h2 id="DNS-解析"><a href="#DNS-解析" class="headerlink" title="DNS 解析"></a>DNS 解析</h2><p>全文使用 <strong>example.com</strong> 代替你购买的域名。 二级域名同理</p>
<p>添加 2 条 A 记录。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#  host     Type        TTL     value</span><br><span class="line"></span><br><span class="line">ngrok         A         900     xxx.xxx.xxx.xxx</span><br><span class="line">*.ngrok       A         900     xxx.xxx.xxx.xxx</span><br></pre></td></tr></table></figure>

<p><code>xxx.xxx.xxx.xxx</code> 为你服务器的 IP 地址</p>
<ul>
<li>把 ngrok.example.com 解析到 xxx.xxx.xxx.xxx</li>
<li>把 *.ngrok.example.com 解析到 xxx.xxx.xxx.xxx<ul>
<li>ngrok 部署后，会反向代理到对应的子域名中</li>
</ul>
</li>
</ul>
<blockquote>
<p>国内的服务器服务商，DNS 解析基本都支持泛域名(*.xxx.com)添加 。这里比国外强。<br>如果你的提供商不支持，要么你每增加一个子域名，在 DNS 中增加一个，要么切换到 DNSPod 去</p>
</blockquote>
<h2 id="docker-部署-ngrok"><a href="#docker-部署-ngrok" class="headerlink" title="docker 部署 ngrok"></a>docker 部署 ngrok</h2><p>本文使用 <a href="https://hub.docker.com/r/hteen/ngrok?utm_source=ld246.com">hteen/ngrok</a> 镜像。<br>或者你自己选一个 <a href="https://hub.docker.com/search?q=ngrok&type=image">docker 中 ngrok 镜像搜索</a></p>
<blockquote>
<p>docker 的安装不在本文讨论范围。 可以参考 <a href="https://35liuqi.com/2019/06/27/CentOS-7%20%E5%AE%89%E8%A3%85%20Docker/">CentOS-7 安装 Docker</a></p>
</blockquote>
<h3 id="拉镜像"><a href="#拉镜像" class="headerlink" title="拉镜像"></a>拉镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拉镜像</span></span><br><span class="line">docker pull hteen/ngrok</span><br><span class="line"></span><br><span class="line"><span class="comment"># 完成后检查 </span></span><br><span class="line">[root@104 ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hteen/ngrok          latest              9f29e9d374e9        4 years ago         260MB</span><br></pre></td></tr></table></figure>

<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意替换域名</span></span><br><span class="line">docker run --<span class="built_in">rm</span> -it -e DOMAIN=<span class="string">&quot;ngrok.example.com&quot;</span> -v /data/ngrok:/myfiles hteen/ngrok /bin/sh /build.sh</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果国内服务器，这一步时间很长。耐心等待！！！</p>
</blockquote>
<p><strong>ngrok 初始化后</strong>，会生成 <code>/data/ngrok</code> 目录</p>
<h3 id="查看客户端"><a href="#查看客户端" class="headerlink" title="查看客户端"></a>查看客户端</h3><p>目录 <code>/data/ngrok/bin</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/ngrokd                      <span class="comment"># 服务端。 不管。  注意不要和客户端 ngrok 看混了</span></span><br><span class="line">bin/ngrok                       <span class="comment"># linux 客户端    在本地的 centos7 上验证失败</span></span><br><span class="line">bin/darwin_amd64/ngrok          <span class="comment"># osx 客户端      在本地的 macbook 上验证成功</span></span><br><span class="line">bin/windows_amd64/ngrok.exe     <span class="comment"># windows 客户端  在本地的 windows 上验证成功</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用 ftp 或者 scp 等方式拷贝对应客户端到你本地</p>
</blockquote>
<h3 id="启动-ngrok-服务"><a href="#启动-ngrok-服务" class="headerlink" title="启动 ngrok 服务"></a>启动 ngrok 服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意修改域名</span></span><br><span class="line"></span><br><span class="line">docker run -idt --name ngrok-server \</span><br><span class="line">-v /data/ngrok:/myfiles \</span><br><span class="line">-p 8081:80 \</span><br><span class="line">-p 8082:443 \</span><br><span class="line">-p 4443:4443 \</span><br><span class="line">-e DOMAIN=<span class="string">&#x27;ngrok.example.com&#x27;</span> hteen/ngrok /bin/sh /server.sh</span><br></pre></td></tr></table></figure>

<ul>
<li>本地 8081 转发到 image 的 80 端口</li>
<li>本地 8082 转发到 image 的 443 端口</li>
<li>本地 4443 转发到 image 的 4443 端口</li>
</ul>
<h2 id="配置-nginx"><a href="#配置-nginx" class="headerlink" title="配置 nginx"></a>配置 nginx</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name ngrok.example.com *.ngrok.example.com; <span class="comment"># 监听域名</span></span><br><span class="line">  </span><br><span class="line">  underscores_in_headers on; <span class="comment"># 允许传递带_ 的参数 默认 off。 比如你研发 header 中带 access_token 。不开启将无法传递</span></span><br><span class="line">  </span><br><span class="line">  location / &#123;</span><br><span class="line">    proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">    proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    proxy_pass http://127.0.0.1:8081;  <span class="comment"># 这里的端口号是开启容器时 ngrok 监听的端口号</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置完后，重启 nginx</p>
</blockquote>
<h2 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=4443/tcp --permanent       <span class="comment"># 开放4443端口</span></span><br><span class="line">firewall-cmd --reload </span><br></pre></td></tr></table></figure>

<h2 id="配置客户端"><a href="#配置客户端" class="headerlink" title="配置客户端"></a>配置客户端</h2><p>下载客户端到本地。并新建 ngrok.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">server_addr:</span> <span class="string">&quot;ngrok.example.com:4443&quot;</span>       <span class="comment"># 服务器域名 + 端口 </span></span><br><span class="line"><span class="attr">trust_host_root_certs:</span> <span class="literal">false</span>                <span class="comment"># True 支持TLS加密协议的证书信任</span></span><br><span class="line"><span class="attr">tunnels:</span>                                    <span class="comment"># 通道,可以配置多个</span></span><br><span class="line">  <span class="attr">hello:</span>                                    <span class="comment"># 名称</span></span><br><span class="line">   <span class="attr">proto:</span>                                   <span class="comment"># 属性。固定</span></span><br><span class="line">     <span class="attr">http:</span> <span class="number">5000</span>                             <span class="comment"># http 监听本地端口</span></span><br><span class="line">     <span class="attr">https:</span> <span class="number">5000</span>                            <span class="comment"># https 监听本地端口</span></span><br><span class="line">   <span class="attr">subdomain:</span> <span class="string">test1</span>                         <span class="comment"># 子域名 自定义，不能重复. 例子中访问域名为  http://test1.ngrok.example.com</span></span><br><span class="line">   </span><br><span class="line">   <span class="attr">world:</span>                                   </span><br><span class="line">   <span class="attr">proto:</span>                                   </span><br><span class="line">     <span class="attr">http:</span> <span class="number">5000</span>                             </span><br><span class="line">     <span class="attr">https:</span> <span class="number">5000</span></span><br><span class="line">   <span class="attr">subdomain:</span> <span class="string">test2</span>                    </span><br></pre></td></tr></table></figure>

<h3 id="启动客户端"><a href="#启动客户端" class="headerlink" title="启动客户端"></a>启动客户端</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 ngrok 客户端目录</span></span><br><span class="line">./ngrok -config=ngrok.yml start all     <span class="comment"># 启动所有监听</span></span><br><span class="line">./ngrok -config=ngrok.yml start world   <span class="comment"># 仅启动 名称为 world 的监听</span></span><br></pre></td></tr></table></figure>


<h3 id="本地监控"><a href="#本地监控" class="headerlink" title="本地监控"></a>本地监控</h3><p><a href="http://127.0.0.1:4040/">http://127.0.0.1:4040</a></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Docker 安装 MantisBT 及配置</title>
    <url>/post/137bd650.html</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2022/02/09/7KYmfpl3IhGjnQE.jpg"></p>
<p>缺陷管理平台Mantis，也做MantisBT，全称Mantis Bug Tracker。</p>
<p>Mantis是一个基于PHP技术的轻量级的开源缺陷跟踪系统，以Web操作的形式提供项目管理及缺陷跟踪服务。在功能上、实用性上足以满足中小型项目的管理及跟踪。更重要的是其开源，不需要负担任何费用。</p>
<p>本文介绍基于 Docker 安装 MaintisBT 并完成配置。</p>
<span id="more"></span>


<h2 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h2><ul>
<li>Centos7</li>
<li>Docker 19.03.13</li>
</ul>
<h2 id="MantisBT-镜像Pull-start"><a href="#MantisBT-镜像Pull-start" class="headerlink" title="MantisBT 镜像Pull/start"></a>MantisBT 镜像Pull/start</h2><p>使用的的 <a href="https://hub.docker.com/r/vimagick/mantisbt">vimagick/mantisbt</a> 镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">docker pull vimagick/mantisbt</span><br></pre></td></tr></table></figure>


<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动 Mantis 8989 替换成你希望暴露的端口</span></span><br><span class="line">docker run -d -p 8989:80 --name mantisbt vimagick/mantisbt</span><br></pre></td></tr></table></figure>

<h2 id="初始化-Mantis"><a href="#初始化-Mantis" class="headerlink" title="初始化 Mantis"></a>初始化 Mantis</h2><ol>
<li><p>新建数据库。 Mysql/postgresql 都可以。 比如:”bug_mantis”</p>
</li>
<li><p>访问: <a href="http://127.0.0.1:8989/">http://127.0.0.1:8989</a></p>
<ul>
<li>ip 改为你部署 Mantis 服务器的 ip。 如果是域名访问，自行配置 nginx 或 apache 转发</li>
<li>port 改为你部署 Mantis 服务暴露的端口。 如果是域名访问，自行 nginx 或 apache 转发</li>
</ul>
</li>
<li><p>在初始化页面配置数据库链接。</p>
</li>
</ol>
<blockquote>
<p>配置完数据库就可以使用了</p>
</blockquote>
<h2 id="挂载配置文件"><a href="#挂载配置文件" class="headerlink" title="挂载配置文件"></a>挂载配置文件</h2><ol>
<li><p>进入 docker 镜像命令行</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入 mantis docker 容器命令行</span></span><br><span class="line">docker <span class="built_in">exec</span> -it &lt;container 名称或 <span class="built_in">id</span>&gt; /bin/bash</span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># container 名称或 id 可以通过 docker ps -a 查看。本文在 启动镜像时， 通过 --name 命名为 mantisbt</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mantisbt /bin/bash</span><br></pre></td></tr></table></figure></li>
<li><p>复制 config_inc.php 内容</p>
<p> 当你初始化完成后，此配置文件会写入你的数据库配置。为避免 docker 容器被删除，每次都要重新初始化，我们需要将配置文件拷贝出来。并添加我们自己的配置</p>
<p> 查看 config_inc.php 内容，并复制</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 此时你应该在 docker mantisbt 容器里</span></span><br><span class="line"><span class="built_in">cat</span>: /var/www/html/config/config_inc.php</span><br><span class="line"></span><br><span class="line"><span class="comment"># 内容如下</span></span><br><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$g_hostname</span>               = <span class="string">&#x27;192.168.0.197&#x27;</span>;</span><br><span class="line"><span class="variable">$g_db_type</span>                = <span class="string">&#x27;pgsql&#x27;</span>;</span><br><span class="line"><span class="variable">$g_database_name</span>          = <span class="string">&#x27;fx_mantisbt&#x27;</span>;</span><br><span class="line"><span class="variable">$g_db_username</span>            = <span class="string">&#x27;postgres&#x27;</span>;</span><br><span class="line"><span class="variable">$g_db_password</span>            = <span class="string">&#x27;fx123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$g_db_table_prefix</span>          = <span class="string">&#x27;fx&#x27;</span>;</span><br><span class="line"><span class="variable">$g_db_table_plugin_prefix</span>   = <span class="string">&#x27;mantis&#x27;</span>;</span><br><span class="line"><span class="variable">$g_db_table_suffix</span>          = <span class="string">&#x27;mantis&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$g_default_timezone</span>       = <span class="string">&#x27;Asia/Shanghai&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$g_crypto_master_salt</span>     = <span class="string">&#x27;tQpeV+o+BQ3zdBv6t9Kn0jXBK7AFJJdeko5fIsBH8Hs=&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>在主机下新建配置文件</p>
<p> 位置任意，比如我是在 <code>/usr/data/</code> 下新建 <code>mantis</code> 目录</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 主机新建 config_inc.php 配置文件</span></span><br><span class="line">vi /usr/data/mantis/config_inc.php</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开后，将 mantis 的配置复制进去</span></span><br><span class="line"><span class="comment"># 内容如下</span></span><br><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$g_hostname</span>               = <span class="string">&#x27;192.168.0.197&#x27;</span>;</span><br><span class="line"><span class="variable">$g_db_type</span>                = <span class="string">&#x27;pgsql&#x27;</span>;</span><br><span class="line"><span class="variable">$g_database_name</span>          = <span class="string">&#x27;fx_mantisbt&#x27;</span>;</span><br><span class="line"><span class="variable">$g_db_username</span>            = <span class="string">&#x27;postgres&#x27;</span>;</span><br><span class="line"><span class="variable">$g_db_password</span>            = <span class="string">&#x27;fx123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$g_db_table_prefix</span>          = <span class="string">&#x27;fx&#x27;</span>;</span><br><span class="line"><span class="variable">$g_db_table_plugin_prefix</span>   = <span class="string">&#x27;mantis&#x27;</span>;</span><br><span class="line"><span class="variable">$g_db_table_suffix</span>          = <span class="string">&#x27;mantis&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$g_default_timezone</span>       = <span class="string">&#x27;Asia/Shanghai&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$g_crypto_master_salt</span>     = <span class="string">&#x27;tQpeV+o+BQ3zdBv6t9Kn0jXBK7AFJJdeko5fIsBH8Hs=&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>增加配置</p>
<p> 继续编辑 <code>/usr/data/mantis/config_inc.php</code> 新增邮件配置</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置完成后 内容如下</span></span><br><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$g_hostname</span>               = <span class="string">&#x27;192.168.0.197&#x27;</span>;</span><br><span class="line"><span class="variable">$g_db_type</span>                = <span class="string">&#x27;pgsql&#x27;</span>;</span><br><span class="line"><span class="variable">$g_database_name</span>          = <span class="string">&#x27;fx_mantisbt&#x27;</span>;</span><br><span class="line"><span class="variable">$g_db_username</span>            = <span class="string">&#x27;postgres&#x27;</span>;</span><br><span class="line"><span class="variable">$g_db_password</span>            = <span class="string">&#x27;fx123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$g_db_table_prefix</span>          = <span class="string">&#x27;fx&#x27;</span>;</span><br><span class="line"><span class="variable">$g_db_table_plugin_prefix</span>   = <span class="string">&#x27;mantis&#x27;</span>;</span><br><span class="line"><span class="variable">$g_db_table_suffix</span>          = <span class="string">&#x27;mantis&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$g_default_timezone</span>       = <span class="string">&#x27;Asia/Shanghai&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$g_crypto_master_salt</span>     = <span class="string">&#x27;tQpeV+o+BQ3zdBv6t9Kn0jXBK7AFJJdeko5fIsBH8Hs=&#x27;</span>;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 开启邮箱验证</span><br><span class="line"> */ </span><br><span class="line"><span class="variable">$g_enable_email_notification</span> = ON;</span><br><span class="line"><span class="variable">$g_phpMailer_method</span> = PHPMAILER_METHOD_SMTP;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * smtp 配置</span><br><span class="line"> */ </span><br><span class="line"><span class="variable">$g_smtp_host</span>            = <span class="string">&#x27;smtp.example.com&#x27;</span>;</span><br><span class="line"><span class="variable">$g_smtp_username</span>        = <span class="string">&#x27;your-mail@example.com&#x27;</span>;    </span><br><span class="line"><span class="variable">$g_smtp_password</span>        = <span class="string">&#x27;******&#x27;</span>;         </span><br><span class="line"><span class="variable">$g_smtp_port</span>            = 465;</span><br><span class="line"><span class="variable">$g_smtp_connection_mode</span> = <span class="string">&#x27;ssl&#x27;</span>;  /* 普通为 25 ，具体设置参考你使用邮箱 smtp 配置 */</span><br><span class="line"></span><br><span class="line"><span class="variable">$g_from_name</span>            = <span class="string">&#x27;Mantis Bug Tracker&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$g_administrator_email</span>  = <span class="string">&#x27;your-mail@example.com&#x27;</span>;</span><br><span class="line"><span class="variable">$g_webmaster_email</span>      = <span class="string">&#x27;your-mail@example.com&#x27;</span>;</span><br><span class="line"><span class="variable">$g_return_path_email</span>    = <span class="string">&#x27;your-mail@example.com&#x27;</span>;</span><br><span class="line"><span class="variable">$g_from_email</span>           = <span class="string">&#x27;your-mail@example.com&#x27;</span>;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 创建用户时可以设置密码,默认是通过邮件邀请，公司内部用可以启用</span><br><span class="line"> */</span><br><span class="line"><span class="variable">$g_send_reset_password</span> = OFF;</span><br></pre></td></tr></table></figure></li>
<li><p>重新部署容器</p>
<p> 删除当前容器</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop &lt;container 名称或 <span class="built_in">id</span>&gt;  <span class="comment"># 此处为你的 mantis 名称</span></span><br><span class="line">docker <span class="built_in">rm</span> &lt;container 名称或 <span class="built_in">id</span>&gt;  <span class="comment"># 此处为你的 mantis 名称</span></span><br></pre></td></tr></table></figure>
<p> 带配置文件的启动</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8989:80 --name mantisbt -v /usr/data/mantis/config_inc.php:/var/www/html/config/config_inc.php vimagick/mantisbt</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
        <tag>Docker</tag>
        <tag>MantisBT</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Hexo常见问题</title>
    <url>/post/e4e699fe.html</url>
    <content><![CDATA[<p>随着WP安装的插件越来越多，自己的 VPS 又配置偏低，导致访问越来越慢。之前就知道 Hexo，但是因为当时忙于项目，懒得搞。最近实在无法忍受了，就考虑迁移到Hexo上。在安装过程中发现一些问题，特地记录下</p>
<span id="more"></span>

<h2 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h2><blockquote>
<p>node: v12.14.1<br>npm: 6.13.4<br>os: macOS Mojava 10.14.5</p>
</blockquote>
<h2 id="Git-clone-太慢，或者错误"><a href="#Git-clone-太慢，或者错误" class="headerlink" title="Git clone 太慢，或者错误"></a>Git clone 太慢，或者错误</h2><p>其实问题网上搜一大堆，之前自己用的梯子速度很快，还没感觉。现在用的自己搭的梯子，速度一下就不爽了。下载速度有时候只有 几kib/s 或者直接就报错下不下来。 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">RPC failed; curl 18 transfer closed with outstanding <span class="built_in">read</span> data remaining</span><br></pre></td></tr></table></figure>

<h3 id="从码云上-clone-【推荐】"><a href="#从码云上-clone-【推荐】" class="headerlink" title="从码云上 clone 【推荐】"></a>从码云上 clone 【推荐】</h3><ul>
<li><strong>把你需要 clone 的目标在 Github 上复制地址</strong></li>
</ul>
<img src="https://s2.loli.net/2022/02/09/fS3cRKWI6pvQh9H.jpg" width="300" style="align:center">
     
<ul>
<li><strong>打开码云<a href="https://gitee.com/">gitee.com</a></strong>, 新建仓库-&gt;从 GitHub 导入</li>
</ul>
<img src="https://s2.loli.net/2022/02/09/TSsPXmN2Zx4jatG.jpg" width="300" style="align:center">

<ul>
<li><strong>在本地用码云的仓库地址 进行 clone</strong></li>
</ul>
<h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><ul>
<li><p>加大缓存区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#约500M </span></span><br><span class="line">git config --global http.postBuffer 512000000 </span><br></pre></td></tr></table></figure></li>
<li><p>加 <code>–depth 1</code> 控制复制深度</p>
<blockquote>
<p>–depth 1 复制深度为1，就是每个文件只取最近一次提交，不是整个历史版本。 </p>
</blockquote>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/liuqi0725/image2PDF.git --depth 1 </span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="NPM-安装出现权限不足的问题"><a href="#NPM-安装出现权限不足的问题" class="headerlink" title="NPM 安装出现权限不足的问题"></a>NPM 安装出现权限不足的问题</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">WARN checkPermissions Missing write access to /usr/local/lib/node_modules</span><br></pre></td></tr></table></figure>

<p><code>npm install xxx</code> 时，因为没有权限造成的该错误。网上普片的处理方式是在命令前加 <code>sudo</code>,但是这样做并没有解决实际问题。一劳永逸的方法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改npm包所安装目录的权限</span></span><br><span class="line">sudo <span class="built_in">chown</span> -R <span class="variable">$USER</span> /usr/local然后输入密码就可以了</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接下来可以进行npm全局包安装</span></span><br><span class="line">npm install -g bower</span><br></pre></td></tr></table></figure>


<h2 id="发布找不到-git"><a href="#发布找不到-git" class="headerlink" title="发布找不到 git"></a>发布找不到 git</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 发布静态网页时</span></span><br><span class="line">$ hexo d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 出现如下错误</span></span><br><span class="line">ERROR Deployer not found: git</span><br></pre></td></tr></table></figure>

<p>在 <code>yourblog-path</code> 目录下<strong>执行如下命令</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>

<h2 id="Hexo-安装"><a href="#Hexo-安装" class="headerlink" title="Hexo 安装"></a>Hexo 安装</h2><p>Hexo 的安装，主题优化，部署个人服务器，自动发布可参考如下文章。</p>
<p><a href="https://www.jianshu.com/p/77db3862595c">Mac 系统下搭建hexo个人博客</a><br><a href="https://www.jianshu.com/p/4547c3d5f819">Hexo部署到服务器并完成自动发布</a><br><a href="https://www.cnblogs.com/fly_dragon/p/8718614.html">CentOS搭建Git服务器及权限管理</a><br><a href="https://www.jianshu.com/p/7debbf85f437">Hexo搭建的Github博客之优化</a><br><a href="https://www.cnblogs.com/aoguai/p/11481253.html">Hexo博客Next v7.X 主题升级,美化</a></p>
]]></content>
      <categories>
        <category>Common</category>
      </categories>
      <tags>
        <tag>技巧</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>抛弃七牛云, 好用的图床 sm</title>
    <url>/post/bd4891b9.html</url>
    <content><![CDATA[<p>markdown 一直都用七牛云当图床，但是七牛云也有几个问题，比如临时域名有时间限制，需要自己去买域名并实名;图片在博文中莫名无法访问，但是单独打开又是好的。一直想找替代产品。最近找到一个 <a href="https://sm.ms/">sm.ms</a> 在境外搭建blogger 或业务时，非常的不错。</p>
<p>如果仅在境内使用，我还是比较推荐七牛云的。</p>
<span id="more"></span>

<h3 id="免费内容有什么"><a href="#免费内容有什么" class="headerlink" title="免费内容有什么"></a>免费内容有什么</h3><p>具体详情可以查看<a href="https://sm.ms/pricing">https://sm.ms/pricing</a></p>
<p><img src="https://s2.loli.net/2022/02/09/m7dlgeFExOI4S5r.jpg"></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>生成自己的api-token</p>
<p><img src="https://s2.loli.net/2022/02/09/H6bR9kzSfZpCNru.jpg"></p>
<p>然后就可以在自己的应用中，或者markdown编辑器中添加图床</p>
]]></content>
      <categories>
        <category>Common</category>
      </categories>
      <tags>
        <tag>技巧</tag>
        <tag>图床</tag>
        <tag>MarkDown</tag>
      </tags>
  </entry>
  <entry>
    <title>搬瓦工 SWAP 修改、新增SWAP分区的大小的方法</title>
    <url>/post/a88f1873.html</url>
    <content><![CDATA[<h2 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h2><ul>
<li>Centos7</li>
</ul>
<h2 id="1-查看swap分区的大小"><a href="#1-查看swap分区的大小" class="headerlink" title="1. 查看swap分区的大小"></a>1. 查看swap分区的大小</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">free -h</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">free -m</span><br></pre></td></tr></table></figure>

<h2 id="2-删除旧分区"><a href="#2-删除旧分区" class="headerlink" title="2. 删除旧分区"></a>2. 删除旧分区</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">swapoff -a</span><br></pre></td></tr></table></figure>

<h2 id="3-新建swap分区"><a href="#3-新建swap分区" class="headerlink" title="3. 新建swap分区"></a>3. 新建swap分区</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在opt下新建 1G 的swap 分区【位置可以任意】</span></span><br><span class="line"><span class="comment"># bs 每一块大小， count 共多少块  1024*1M = 1024M = 1G </span></span><br><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=/opt/swap bs=1M count=1024</span><br></pre></td></tr></table></figure>

<h2 id="4-格式化-SWAP-分区文件"><a href="#4-格式化-SWAP-分区文件" class="headerlink" title="4. 格式化 SWAP 分区文件"></a>4. 格式化 SWAP 分区文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkswap /opt/swap</span><br></pre></td></tr></table></figure>

<h2 id="5-激活-SWAP-分区"><a href="#5-激活-SWAP-分区" class="headerlink" title="5. 激活 SWAP 分区"></a>5. 激活 SWAP 分区</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">swapon /opt/swap</span><br></pre></td></tr></table></figure>

<h2 id="6-赋予-SWAP-文件适当的权限"><a href="#6-赋予-SWAP-文件适当的权限" class="headerlink" title="6. 赋予 SWAP 文件适当的权限"></a>6. 赋予 SWAP 文件适当的权限</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chown</span> root:root /opt/swap</span><br><span class="line"><span class="built_in">chmod</span> 600 /opt/swap</span><br></pre></td></tr></table></figure>

<h2 id="7-修改-etc-fstab-文件"><a href="#7-修改-etc-fstab-文件" class="headerlink" title="7. 修改 /etc/fstab 文件"></a>7. 修改 <code>/etc/fstab</code> 文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/fstab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将下面内容加入</span></span><br><span class="line"><span class="comment"># 如果原来有类似的，要删除掉</span></span><br><span class="line"></span><br><span class="line">/opt/swap swap swap defaults 0 0</span><br><span class="line"><span class="comment"># 保存退出</span></span><br></pre></td></tr></table></figure>

<h2 id="8-查看swap分区是否生效"><a href="#8-查看swap分区是否生效" class="headerlink" title="8. 查看swap分区是否生效"></a>8. 查看swap分区是否生效</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">free -h</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2021/12/09/39ebBgAiYxhVJSz.jpg"></p>
]]></content>
      <categories>
        <category>CentOS7</category>
      </categories>
      <tags>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>注册台湾 AppleID 教程</title>
    <url>/post/f1cbcb38.html</url>
    <content><![CDATA[<p>12 月 8 日 LOL 手游上架台湾 App Store。 为了下载，注册个台湾的账号。</p>
<span id="more"></span>

<h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>打开注册页面（手机/电脑 都可以） <a href="https://appleid.apple.com/account">Apple ID 注册页</a>， 注意以下几个数据的填写。</p>
<ul>
<li>地区，选择 <code>台湾</code>。  居然不是 <code>中国台湾</code>， 反正中国只有一个，台湾是中国的一部分。</li>
<li>出生日期， 要 &gt; 18 岁</li>
<li>手机号，可以用国内手机号进行验证。（一定是真实手机号，后面需要收短信验证码）</li>
</ul>
<p><img src="https://s2.loli.net/2022/02/09/Hh6wET29gskcjOY.jpg"></p>
<h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>Apple ，会验证您的邮箱，手机。会给你邮箱，手机发送验证码。通过后才能注册成功。</p>
<ol>
<li>验证邮箱，把你邮箱里的验证码输入即可。</li>
<li>验证手机，把你短信验证码输入即可。</li>
</ol>
<h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><p>在手机的 AppStore 上登陆你新注册的台湾账号。<strong>注意：是从 App Store 登陆。不是从 iPhone 的设置登陆哦。</strong></p>
<p>App Store 登陆 AppleID 分 2 种情况</p>
<ul>
<li><p>App Store 已登陆账号</p>
<ol>
<li>App Store -&gt; 右上角头像 -&gt; 滑到最底部 -&gt; 退出登录</li>
<li>App Store -&gt; 右上角头像 -&gt; 登陆</li>
</ol>
</li>
<li><p>App Store 未登录账号</p>
<p>  App Store -&gt; 右上角头像 -&gt; 登陆</p>
</li>
</ul>
<h4 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h4><ol>
<li><p><strong>首次</strong>使用该账号登陆 App Store 会提示让你”<strong>检查</strong>“，选择“<strong>检查</strong>”即可。   </p>
</li>
<li><p>在选择<strong>检查</strong>后，进入完成创建 Apple ID 页面，选择“<strong>同意条款与条件</strong>”</p>
</li>
<li><p>进入<strong>完成您的 Apple ID</strong> 页面。  </p>
<ul>
<li>支付方式 ！支付方式 ！支付方式 ！ 千万别点。</li>
<li>地址、电话随意，邮编百度一个</li>
</ul>
</li>
</ol>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol>
<li>支付方式。 国内的 Visa 是无法绑定的，所以除了您有台湾的visa ，请勿随意去设置支付方式，导致账号无法使用。</li>
<li>切换国家和地区。 同样为了支付，网上说切换国家地区来支付。 你切换到中国，绑定了支付宝，app store 也切换到中国了。至于能不能去支付你之前用台湾账号下的APP，我没测。 但是！！！！ 如果你想再切换回台湾地区，不行了，因为换回来支付方式就默认选中，让你必填，你没台湾 visa，也不能电话支付，这个账号 GG 了，你如果还要用台湾账号下载其他内容，你只有重新注册一个了。</li>
</ol>
<h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><p><a href="https://zhuanlan.zhihu.com/p/313583352">参考链接</a></p>
]]></content>
      <categories>
        <category>Common</category>
      </categories>
      <tags>
        <tag>Common</tag>
        <tag>账号注册</tag>
      </tags>
  </entry>
</search>
